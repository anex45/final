question,category,correct_answer,incorrect_answer_1,incorrect_answer_2,incorrect_answer_3
Explain the concept of duck typing in Python.,python_basics,Sample answer 3 for: Explain the concept of duck typing in Python.,Sample answer 1 for: How would you detect a cycle in a linked list?,Sample answer 1 for: What is the difference between a greedy algorithm and dynamic programming?,Sample answer 2 for: How does exception handling work in Python?
What is a heap data structure and when would you use it?,data_structures,Sample answer 3 for: What is a heap data structure and when would you use it?,Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?,Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?,Sample answer 1 for: Explain the asyncio module in Python and how it works.
Explain the quicksort algorithm and its time complexity.,algorithms,Sample answer 1 for: Explain the quicksort algorithm and its time complexity.,Sample answer 1 for: How would you implement a graph data structure in Python?,Sample answer 2 for: What are Python's magic methods and how would you use them?,Sample answer 3 for: Explain the concept of backtracking with an example.
What are binary trees and how would you implement one in Python?,data_structures,Sample answer 1 for: What are binary trees and how would you implement one in Python?,Sample answer 1 for: What are Python type hints and how do they improve code quality?,Sample answer 1 for: What is the difference between a stack and a queue?,"Sample answer 1 for: Explain the difference between class methods, static methods, and instance methods."
What are Python type hints and how do they improve code quality?,advanced_python,Sample answer 3 for: What are Python type hints and how do they improve code quality?,Sample answer 1 for: What are binary trees and how would you implement one in Python?,Sample answer 1 for: What is method overriding and how does it work in Python?,Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries.
Explain the concept of dynamic programming with an example.,data_structures,Sample answer 2 for: Explain the concept of dynamic programming with an example.,Sample answer 2 for: Explain the concept of metaprogramming in Python.,Sample answer 2 for: Explain the concept of inheritance in Python with an example.,Sample answer 2 for: What is a heap data structure and when would you use it?
Explain the concept of coroutines in Python.,advanced_python,Sample answer 3 for: Explain the concept of coroutines in Python.,"Lists are mutable collections that can be modified after creation, while tuples are immutable. Lists are defined using square brackets [], while tuples use parentheses (). Tuples are more memory-efficient and can be used as dictionary keys (since they're immutable), which lists cannot.",Sample answer 3 for: How would you implement a linked list in Python?,Sample answer 1 for: How does exception handling work in Python?
How would you find the kth largest element in an unsorted array?,algorithms,Sample answer 3 for: How would you find the kth largest element in an unsorted array?,Sample answer 2 for: What is the __init__ method in Python and how is it used?,Sample answer 2 for: What is a heap data structure and when would you use it?,Sample answer 3 for: What is the traveling salesman problem and how would you approach it?
What are Python generators and how do they differ from regular functions?,python_basics,Sample answer 1 for: What are Python generators and how do they differ from regular functions?,Sample answer 1 for: What is polymorphism and how is it implemented in Python?,Sample answer 1 for: Explain the concept of metaprogramming in Python.,Sample answer 2 for: How would you detect a cycle in a linked list?
Explain the concept of monkey patching in Python and when it might be useful.,advanced_python,Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful.,Sample answer 1 for: Explain the concept of composition vs inheritance with examples.,Sample answer 2 for: What are Python's data model and how does it relate to special methods?,Sample answer 1 for: What is polymorphism and how is it implemented in Python?
How would you implement a breadth-first search algorithm?,algorithms,Sample answer 2 for: How would you implement a breadth-first search algorithm?,Sample answer 2 for: Explain the concept of recursion with an example.,"The main difference is mutability: lists can be changed after creation (mutable) while tuples cannot (immutable). Lists use square brackets and support operations like append() and extend(), while tuples use parentheses and don't allow modification after creation. Tuples are more memory efficient and slightly faster than lists.",Sample answer 3 for: What are binary trees and how would you implement one in Python?
Explain the concept of monkey patching in Python and when it might be useful.,advanced_python,Sample answer 2 for: Explain the concept of monkey patching in Python and when it might be useful.,Sample answer 1 for: What is the Global Interpreter Lock (GIL) in Python?,Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python.,Sample answer 1 for: Explain the difference between depth-first search and breadth-first search.
Explain the concept of duck typing in Python.,python_basics,Sample answer 2 for: Explain the concept of duck typing in Python.,Sample answer 2 for: What are Python generators and how do they differ from regular functions?,Sample answer 1 for: How would you implement a linked list in Python?,Sample answer 3 for: What is the difference between a stack and a queue?
How would you implement a graph data structure in Python?,data_structures,Sample answer 2 for: How would you implement a graph data structure in Python?,Sample answer 1 for: Explain the concept of coroutines in Python.,Sample answer 1 for: What is the __init__ method in Python and how is it used?,Sample answer 3 for: What is the __init__ method in Python and how is it used?
What is the __init__ method in Python and how is it used?,oop_concepts,Sample answer 3 for: What is the __init__ method in Python and how is it used?,"Lists are mutable collections that can be modified after creation, while tuples are immutable. Lists are defined using square brackets [], while tuples use parentheses (). Tuples are more memory-efficient and can be used as dictionary keys (since they're immutable), which lists cannot.",Sample answer 2 for: Explain the concept of inheritance in Python with an example.,Sample answer 1 for: How would you find the longest common subsequence of two strings?
Explain the concept of coroutines in Python.,advanced_python,Sample answer 1 for: Explain the concept of coroutines in Python.,Sample answer 3 for: Explain the concept of list comprehensions in Python.,Sample answer 1 for: Explain the concept of duck typing in Python.,Sample answer 3 for: How would you implement a breadth-first search algorithm?
What is the difference between a list and a tuple in Python?,python_basics,"Lists are mutable, meaning they can be modified after creation, while tuples are immutable. Lists use square brackets [] and tuples use parentheses (). Lists generally consume more memory than tuples and are slower for iteration.",Sample answer 1 for: How would you find the kth largest element in an unsorted array?,Sample answer 3 for: Explain the concept of metaprogramming in Python.,Sample answer 3 for: Explain the difference between '==' and 'is' operators in Python.
What is the Global Interpreter Lock (GIL) in Python?,python_basics,Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?,"Sample answer 2 for: Explain the difference between class methods, static methods, and instance methods.",Sample answer 2 for: How would you find the longest common subsequence of two strings?,Sample answer 2 for: Explain the quicksort algorithm and its time complexity.
How would you find the kth largest element in an unsorted array?,algorithms,Sample answer 3 for: How would you find the kth largest element in an unsorted array?,Sample answer 2 for: What are binary trees and how would you implement one in Python?,Sample answer 1 for: Explain the concept of coroutines in Python.,Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?
How would you implement a breadth-first search algorithm?,algorithms,Sample answer 2 for: How would you implement a breadth-first search algorithm?,"Sample answer 3 for: Explain the difference between class methods, static methods, and instance methods.",Sample answer 3 for: What are Python's data model and how does it relate to special methods?,Sample answer 2 for: Explain the concept of encapsulation in Python.
"Explain the difference between class methods, static methods, and instance methods.",oop_concepts,"Sample answer 1 for: Explain the difference between class methods, static methods, and instance methods.",Sample answer 3 for: Explain the concept of recursion with an example.,Sample answer 2 for: Explain the concept of encapsulation in Python.,Sample answer 3 for: What are metaclasses in Python and how would you use them?
Explain the concept of metaprogramming in Python.,advanced_python,Sample answer 2 for: Explain the concept of metaprogramming in Python.,Sample answer 1 for: Explain the difference between '==' and 'is' operators in Python.,Sample answer 2 for: What are metaclasses in Python and how would you use them?,Sample answer 2 for: What is the __init__ method in Python and how is it used?
What is the difference between a list and a tuple in Python?,python_basics,"The main difference is mutability: lists can be changed after creation (mutable) while tuples cannot (immutable). Lists use square brackets and support operations like append() and extend(), while tuples use parentheses and don't allow modification after creation. Tuples are more memory efficient and slightly faster than lists.",Sample answer 2 for: Explain the concept of inheritance in Python with an example.,Sample answer 2 for: What are metaclasses in Python and how would you use them?,Sample answer 2 for: Explain the concept of hash tables and their implementation in Python.
Explain the concept of hash tables and their implementation in Python.,data_structures,Sample answer 1 for: Explain the concept of hash tables and their implementation in Python.,Sample answer 3 for: What are Python decorators and how do they work?,Sample answer 2 for: How would you detect a cycle in a linked list?,Sample answer 2 for: Explain the concept of composition vs inheritance with examples.
What is the difference between a greedy algorithm and dynamic programming?,algorithms,Sample answer 1 for: What is the difference between a greedy algorithm and dynamic programming?,Sample answer 2 for: Explain the quicksort algorithm and its time complexity.,Sample answer 1 for: How does exception handling work in Python?,Sample answer 3 for: What are metaclasses in Python and how would you use them?
What are Python descriptors and how do they work?,advanced_python,Sample answer 1 for: What are Python descriptors and how do they work?,Sample answer 1 for: Explain the concept of metaprogramming in Python.,"Python manages memory through automatic garbage collection. It uses reference counting to track how many references point to an object, and when the count reaches zero, the memory is freed. Python also has a cycle detector to handle circular references. All Python objects are stored in a private heap, and the memory manager allocates heap space for objects.",Sample answer 1 for: What are Python decorators and how do they work?
Explain the concept of coroutines in Python.,advanced_python,Sample answer 3 for: Explain the concept of coroutines in Python.,Sample answer 1 for: Explain the quicksort algorithm and its time complexity.,Sample answer 3 for: What is method overriding and how does it work in Python?,Sample answer 3 for: Explain the concept of recursion with an example.
Explain the concept of inheritance in Python with an example.,oop_concepts,Sample answer 2 for: Explain the concept of inheritance in Python with an example.,Sample answer 3 for: Explain the concept of hash tables and their implementation in Python.,Sample answer 1 for: Explain the concept of coroutines in Python.,Sample answer 2 for: What are Python type hints and how do they improve code quality?
What are Python type hints and how do they improve code quality?,advanced_python,Sample answer 2 for: What are Python type hints and how do they improve code quality?,Sample answer 3 for: Explain the concept of coroutines in Python.,Sample answer 2 for: What are Python's magic methods and how would you use them?,Sample answer 1 for: What are the advantages and disadvantages of using arrays vs linked lists?
How would you implement a linked list in Python?,data_structures,Sample answer 1 for: How would you implement a linked list in Python?,Sample answer 3 for: How would you detect a cycle in a linked list?,Sample answer 2 for: Explain the concept of encapsulation in Python.,Sample answer 1 for: How would you implement a breadth-first search algorithm?
What are binary trees and how would you implement one in Python?,data_structures,Sample answer 3 for: What are binary trees and how would you implement one in Python?,Sample answer 3 for: How would you implement a graph data structure in Python?,Sample answer 3 for: How would you find the kth largest element in an unsorted array?,Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?
What is the difference between a list and a tuple in Python?,python_basics,"Lists are mutable, meaning they can be modified after creation, while tuples are immutable. Lists use square brackets [] and tuples use parentheses (). Lists generally consume more memory than tuples and are slower for iteration.",Sample answer 2 for: Explain the concept of composition vs inheritance with examples.,Sample answer 2 for: Explain the concept of coroutines in Python.,Sample answer 3 for: Explain the concept of hash tables and their implementation in Python.
What is the difference between a list and a tuple in Python?,python_basics,"Lists are mutable collections that can be modified after creation, while tuples are immutable. Lists are defined using square brackets [], while tuples use parentheses (). Tuples are more memory-efficient and can be used as dictionary keys (since they're immutable), which lists cannot.",Sample answer 1 for: What is the difference between multiprocessing and multithreading in Python?,Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful.,"Sample answer 3 for: Explain the difference between class methods, static methods, and instance methods."
Explain the concept of duck typing in Python.,python_basics,Sample answer 3 for: Explain the concept of duck typing in Python.,Sample answer 1 for: Explain the concept of hash tables and their implementation in Python.,Sample answer 1 for: Explain the time complexity of common operations in Python dictionaries.,Sample answer 1 for: Explain the concept of multiple inheritance and the method resolution order in Python.
Explain the asyncio module in Python and how it works.,advanced_python,Sample answer 2 for: Explain the asyncio module in Python and how it works.,Sample answer 3 for: Explain the concept of dynamic programming with an example.,Sample answer 2 for: What is the __init__ method in Python and how is it used?,Sample answer 2 for: What is a heap data structure and when would you use it?
Explain the quicksort algorithm and its time complexity.,algorithms,Sample answer 1 for: Explain the quicksort algorithm and its time complexity.,Sample answer 3 for: Explain the concept of hash tables and their implementation in Python.,Sample answer 2 for: How would you find the longest common subsequence of two strings?,Sample answer 3 for: What are Python decorators and how do they work?
Explain the concept of hash tables and their implementation in Python.,data_structures,Sample answer 1 for: Explain the concept of hash tables and their implementation in Python.,Sample answer 1 for: What are Python's magic methods and how would you use them?,Sample answer 2 for: How would you implement a breadth-first search algorithm?,Sample answer 1 for: Explain the concept of composition vs inheritance with examples.
Explain the concept of backtracking with an example.,algorithms,Sample answer 1 for: Explain the concept of backtracking with an example.,Sample answer 1 for: What is the Global Interpreter Lock (GIL) in Python?,Sample answer 2 for: Explain the concept of monkey patching in Python and when it might be useful.,"Sample answer 1 for: Explain the difference between class methods, static methods, and instance methods."
How would you find the longest common subsequence of two strings?,algorithms,Sample answer 3 for: How would you find the longest common subsequence of two strings?,Sample answer 3 for: Explain the concept of monkey patching in Python and when it might be useful.,Sample answer 2 for: What are Python type hints and how do they improve code quality?,Sample answer 3 for: What are binary trees and how would you implement one in Python?
What is a heap data structure and when would you use it?,data_structures,Sample answer 2 for: What is a heap data structure and when would you use it?,Sample answer 3 for: How would you implement a graph data structure in Python?,Sample answer 3 for: What is polymorphism and how is it implemented in Python?,Sample answer 2 for: What is the __init__ method in Python and how is it used?
What is polymorphism and how is it implemented in Python?,oop_concepts,Sample answer 3 for: What is polymorphism and how is it implemented in Python?,Sample answer 2 for: How would you implement a linked list in Python?,Sample answer 3 for: Explain the concept of duck typing in Python.,Sample answer 3 for: What are Python generators and how do they differ from regular functions?
What is the Global Interpreter Lock (GIL) in Python?,python_basics,Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?,Sample answer 3 for: How would you find the longest common subsequence of two strings?,Sample answer 3 for: Explain the concept of hash tables and their implementation in Python.,Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?
Explain the difference between depth-first search and breadth-first search.,data_structures,Sample answer 2 for: Explain the difference between depth-first search and breadth-first search.,Sample answer 1 for: What is a heap data structure and when would you use it?,Sample answer 3 for: Explain the concept of metaprogramming in Python.,Sample answer 3 for: What are Python type hints and how do they improve code quality?
Explain the concept of composition vs inheritance with examples.,oop_concepts,Sample answer 3 for: Explain the concept of composition vs inheritance with examples.,Sample answer 1 for: What are Python context managers and how do they work?,Sample answer 2 for: What is polymorphism and how is it implemented in Python?,Sample answer 3 for: Explain the difference between '==' and 'is' operators in Python.
Explain the concept of inheritance in Python with an example.,oop_concepts,Sample answer 2 for: Explain the concept of inheritance in Python with an example.,Sample answer 1 for: What are Python context managers and how do they work?,Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?,Sample answer 1 for: How would you implement a graph data structure in Python?
"Explain the difference between class methods, static methods, and instance methods.",oop_concepts,"Sample answer 1 for: Explain the difference between class methods, static methods, and instance methods.",Sample answer 3 for: Explain the quicksort algorithm and its time complexity.,Sample answer 3 for: What are Python context managers and how do they work?,Sample answer 2 for: What is method overriding and how does it work in Python?
How would you find the kth largest element in an unsorted array?,algorithms,Sample answer 1 for: How would you find the kth largest element in an unsorted array?,Sample answer 3 for: What are binary trees and how would you implement one in Python?,"Sample answer 2 for: Explain the difference between class methods, static methods, and instance methods.",Sample answer 3 for: Explain the concept of metaprogramming in Python.
What is polymorphism and how is it implemented in Python?,oop_concepts,Sample answer 2 for: What is polymorphism and how is it implemented in Python?,Sample answer 2 for: Explain the concept of list comprehensions in Python.,Sample answer 2 for: Explain the quicksort algorithm and its time complexity.,Sample answer 3 for: Explain the concept of list comprehensions in Python.
What are Python generators and how do they differ from regular functions?,python_basics,Sample answer 3 for: What are Python generators and how do they differ from regular functions?,Sample answer 1 for: Explain the quicksort algorithm and its time complexity.,Sample answer 3 for: How would you implement a linked list in Python?,Sample answer 3 for: What are Python decorators and how do they work?
How would you find the kth largest element in an unsorted array?,algorithms,Sample answer 1 for: How would you find the kth largest element in an unsorted array?,Sample answer 3 for: What are Python's magic methods and how would you use them?,Sample answer 2 for: What is method overriding and how does it work in Python?,Sample answer 3 for: What is a heap data structure and when would you use it?
What are the advantages and disadvantages of using arrays vs linked lists?,data_structures,Sample answer 2 for: What are the advantages and disadvantages of using arrays vs linked lists?,Sample answer 1 for: Explain the concept of composition vs inheritance with examples.,Sample answer 2 for: What are Python descriptors and how do they work?,Sample answer 1 for: What are Python generators and how do they differ from regular functions?
What are abstract classes and interfaces in Python?,oop_concepts,Sample answer 3 for: What are abstract classes and interfaces in Python?,Sample answer 1 for: How does exception handling work in Python?,Sample answer 1 for: What are Python type hints and how do they improve code quality?,Sample answer 2 for: Explain the concept of binary search and its time complexity.
What is method overriding and how does it work in Python?,oop_concepts,Sample answer 1 for: What is method overriding and how does it work in Python?,Sample answer 2 for: Explain the concept of hash tables and their implementation in Python.,Sample answer 1 for: What are the advantages and disadvantages of using arrays vs linked lists?,Sample answer 3 for: What is the traveling salesman problem and how would you approach it?
Explain the concept of list comprehensions in Python.,python_basics,Sample answer 2 for: Explain the concept of list comprehensions in Python.,Sample answer 2 for: Explain the concept of composition vs inheritance with examples.,Sample answer 1 for: What are Python context managers and how do they work?,Sample answer 2 for: What is method overriding and how does it work in Python?
Explain the concept of multiple inheritance and the method resolution order in Python.,oop_concepts,Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python.,Sample answer 2 for: What is the __init__ method in Python and how is it used?,Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?,Sample answer 3 for: Explain the concept of recursion with an example.
What is a heap data structure and when would you use it?,data_structures,Sample answer 1 for: What is a heap data structure and when would you use it?,Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?,Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?,Sample answer 1 for: How would you find the longest common subsequence of two strings?
What is the difference between a list and a tuple in Python?,python_basics,"The main difference is mutability: lists can be changed after creation (mutable) while tuples cannot (immutable). Lists use square brackets and support operations like append() and extend(), while tuples use parentheses and don't allow modification after creation. Tuples are more memory efficient and slightly faster than lists.",Sample answer 2 for: Explain the concept of encapsulation in Python.,Sample answer 1 for: What are Python decorators and how do they work?,Sample answer 3 for: Explain the concept of backtracking with an example.
Explain the concept of monkey patching in Python and when it might be useful.,advanced_python,Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful.,Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?,Sample answer 3 for: Explain the concept of coroutines in Python.,Sample answer 2 for: What is a heap data structure and when would you use it?
Explain the concept of inheritance in Python with an example.,oop_concepts,Sample answer 2 for: Explain the concept of inheritance in Python with an example.,Sample answer 2 for: What are Python context managers and how do they work?,Sample answer 1 for: What are metaclasses in Python and how would you use them?,Sample answer 1 for: What is the __init__ method in Python and how is it used?
What is the difference between a greedy algorithm and dynamic programming?,algorithms,Sample answer 3 for: What is the difference between a greedy algorithm and dynamic programming?,Sample answer 1 for: How would you detect a cycle in a linked list?,Sample answer 3 for: How would you implement a linked list in Python?,Sample answer 3 for: Explain the concept of duck typing in Python.
Explain the concept of list comprehensions in Python.,python_basics,Sample answer 1 for: Explain the concept of list comprehensions in Python.,Sample answer 2 for: Explain the quicksort algorithm and its time complexity.,Sample answer 3 for: How would you implement a graph data structure in Python?,Sample answer 2 for: Explain the concept of coroutines in Python.
What are Python generators and how do they differ from regular functions?,python_basics,Sample answer 3 for: What are Python generators and how do they differ from regular functions?,Sample answer 2 for: How would you implement a linked list in Python?,Sample answer 3 for: What are Python type hints and how do they improve code quality?,Sample answer 3 for: How would you find the longest common subsequence of two strings?
Explain the concept of composition vs inheritance with examples.,oop_concepts,Sample answer 3 for: Explain the concept of composition vs inheritance with examples.,Sample answer 3 for: What is a heap data structure and when would you use it?,Sample answer 3 for: What is the difference between a greedy algorithm and dynamic programming?,Sample answer 1 for: What is polymorphism and how is it implemented in Python?
Explain the concept of metaprogramming in Python.,advanced_python,Sample answer 1 for: Explain the concept of metaprogramming in Python.,Sample answer 3 for: Explain the concept of binary search and its time complexity.,Sample answer 1 for: Explain the quicksort algorithm and its time complexity.,Sample answer 2 for: What is a heap data structure and when would you use it?
Explain the concept of encapsulation in Python.,oop_concepts,Sample answer 1 for: Explain the concept of encapsulation in Python.,Sample answer 3 for: Explain the quicksort algorithm and its time complexity.,Sample answer 3 for: What is the traveling salesman problem and how would you approach it?,Sample answer 3 for: How would you implement a graph data structure in Python?
What are metaclasses in Python and how would you use them?,oop_concepts,Sample answer 2 for: What are metaclasses in Python and how would you use them?,"Lists are mutable, meaning they can be modified after creation, while tuples are immutable. Lists use square brackets [] and tuples use parentheses (). Lists generally consume more memory than tuples and are slower for iteration.",Sample answer 2 for: What is the difference between a stack and a queue?,Sample answer 2 for: What are Python context managers and how do they work?
Explain the concept of monkey patching in Python and when it might be useful.,advanced_python,Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful.,Sample answer 2 for: How would you find the kth largest element in an unsorted array?,Sample answer 2 for: What are the advantages and disadvantages of using arrays vs linked lists?,Sample answer 2 for: What is a heap data structure and when would you use it?
Explain the concept of hash tables and their implementation in Python.,data_structures,Sample answer 1 for: Explain the concept of hash tables and their implementation in Python.,Sample answer 1 for: Explain the time complexity of common operations in Python dictionaries.,Sample answer 3 for: What are metaclasses in Python and how would you use them?,Sample answer 3 for: What are Python decorators and how do they work?
What are the advantages and disadvantages of using arrays vs linked lists?,data_structures,Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?,Sample answer 1 for: What is the traveling salesman problem and how would you approach it?,Sample answer 2 for: What are Python's data model and how does it relate to special methods?,Sample answer 1 for: Explain the concept of backtracking with an example.
Explain the concept of composition vs inheritance with examples.,oop_concepts,Sample answer 3 for: Explain the concept of composition vs inheritance with examples.,Sample answer 3 for: Explain the concept of list comprehensions in Python.,Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?,Sample answer 2 for: What are Python descriptors and how do they work?
Explain the concept of composition vs inheritance with examples.,oop_concepts,Sample answer 1 for: Explain the concept of composition vs inheritance with examples.,Sample answer 1 for: How would you implement a graph data structure in Python?,"Python uses automatic memory management through reference counting and garbage collection. When objects are created, Python allocates memory from a private heap. It tracks references to objects, and when an object's reference count drops to zero, the memory is reclaimed. Python also has a cyclic garbage collector to detect and collect objects in reference cycles that would otherwise not be collected.",Sample answer 2 for: Explain the concept of duck typing in Python.
What are Python's data model and how does it relate to special methods?,advanced_python,Sample answer 2 for: What are Python's data model and how does it relate to special methods?,Sample answer 3 for: How would you detect a cycle in a linked list?,Sample answer 3 for: Explain the asyncio module in Python and how it works.,Sample answer 2 for: What are binary trees and how would you implement one in Python?
What are Python's magic methods and how would you use them?,advanced_python,Sample answer 1 for: What are Python's magic methods and how would you use them?,Sample answer 2 for: Explain the concept of closures in Python with an example.,Sample answer 2 for: What are Python decorators and how do they work?,Sample answer 2 for: What is polymorphism and how is it implemented in Python?
Explain the concept of monkey patching in Python and when it might be useful.,advanced_python,Sample answer 2 for: Explain the concept of monkey patching in Python and when it might be useful.,Sample answer 2 for: How would you implement a graph data structure in Python?,Sample answer 2 for: What are Python's data model and how does it relate to special methods?,Sample answer 2 for: How would you find the kth largest element in an unsorted array?
How would you implement a breadth-first search algorithm?,algorithms,Sample answer 1 for: How would you implement a breadth-first search algorithm?,Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?,Sample answer 1 for: Explain the concept of metaprogramming in Python.,Sample answer 2 for: What is method overriding and how does it work in Python?
How would you implement a graph data structure in Python?,data_structures,Sample answer 1 for: How would you implement a graph data structure in Python?,Sample answer 2 for: What is the __init__ method in Python and how is it used?,Sample answer 1 for: Explain the concept of hash tables and their implementation in Python.,Sample answer 3 for: What are Python's magic methods and how would you use them?
Explain the concept of recursion with an example.,algorithms,Sample answer 3 for: Explain the concept of recursion with an example.,Sample answer 2 for: Explain the difference between '==' and 'is' operators in Python.,Sample answer 2 for: Explain the concept of list comprehensions in Python.,Sample answer 2 for: Explain the difference between depth-first search and breadth-first search.
How would you find the longest common subsequence of two strings?,algorithms,Sample answer 1 for: How would you find the longest common subsequence of two strings?,Sample answer 2 for: How would you find the kth largest element in an unsorted array?,Sample answer 2 for: How would you implement a linked list in Python?,Sample answer 2 for: What are Python context managers and how do they work?
What is the difference between a list and a tuple in Python?,python_basics,"The main difference is mutability: lists can be changed after creation (mutable) while tuples cannot (immutable). Lists use square brackets and support operations like append() and extend(), while tuples use parentheses and don't allow modification after creation. Tuples are more memory efficient and slightly faster than lists.",Sample answer 2 for: Explain the concept of metaprogramming in Python.,Sample answer 3 for: How would you implement a linked list in Python?,Sample answer 3 for: What are Python descriptors and how do they work?
Explain the concept of hash tables and their implementation in Python.,data_structures,Sample answer 3 for: Explain the concept of hash tables and their implementation in Python.,Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?,Sample answer 2 for: Explain the concept of monkey patching in Python and when it might be useful.,Sample answer 1 for: Explain the concept of list comprehensions in Python.
What is the Global Interpreter Lock (GIL) in Python?,python_basics,Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?,Sample answer 3 for: Explain the quicksort algorithm and its time complexity.,Sample answer 2 for: How does exception handling work in Python?,Sample answer 3 for: What is the difference between a greedy algorithm and dynamic programming?
What are abstract classes and interfaces in Python?,oop_concepts,Sample answer 2 for: What are abstract classes and interfaces in Python?,Sample answer 2 for: What is method overriding and how does it work in Python?,Sample answer 2 for: How would you implement a graph data structure in Python?,Sample answer 2 for: What are Python type hints and how do they improve code quality?
How would you implement a graph data structure in Python?,data_structures,Sample answer 1 for: How would you implement a graph data structure in Python?,Sample answer 3 for: What is the __init__ method in Python and how is it used?,Sample answer 3 for: What are Python generators and how do they differ from regular functions?,Sample answer 2 for: How would you detect a cycle in a linked list?
Explain the time complexity of common operations in Python dictionaries.,data_structures,Sample answer 2 for: Explain the time complexity of common operations in Python dictionaries.,Sample answer 2 for: What is the difference between a stack and a queue?,Sample answer 2 for: Explain the concept of hash tables and their implementation in Python.,Sample answer 3 for: How would you implement a breadth-first search algorithm?
What is the difference between multiprocessing and multithreading in Python?,advanced_python,Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?,Sample answer 2 for: Explain the concept of backtracking with an example.,Sample answer 2 for: How would you implement a breadth-first search algorithm?,Sample answer 1 for: Explain the concept of backtracking with an example.
Explain the concept of closures in Python with an example.,advanced_python,Sample answer 3 for: Explain the concept of closures in Python with an example.,Sample answer 1 for: What are metaclasses in Python and how would you use them?,Sample answer 2 for: What is polymorphism and how is it implemented in Python?,Sample answer 2 for: What are Python descriptors and how do they work?
What are Python generators and how do they differ from regular functions?,python_basics,Sample answer 1 for: What are Python generators and how do they differ from regular functions?,Sample answer 2 for: Explain the concept of list comprehensions in Python.,Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?,Sample answer 1 for: Explain the concept of duck typing in Python.
What are Python type hints and how do they improve code quality?,advanced_python,Sample answer 1 for: What are Python type hints and how do they improve code quality?,Sample answer 1 for: What are Python's magic methods and how would you use them?,Sample answer 1 for: What are Python generators and how do they differ from regular functions?,"The main difference is mutability: lists can be changed after creation (mutable) while tuples cannot (immutable). Lists use square brackets and support operations like append() and extend(), while tuples use parentheses and don't allow modification after creation. Tuples are more memory efficient and slightly faster than lists."
Explain the quicksort algorithm and its time complexity.,algorithms,Sample answer 1 for: Explain the quicksort algorithm and its time complexity.,Sample answer 3 for: What is a heap data structure and when would you use it?,Sample answer 3 for: What are Python's data model and how does it relate to special methods?,Sample answer 3 for: What is polymorphism and how is it implemented in Python?
Explain the concept of binary search and its time complexity.,algorithms,Sample answer 3 for: Explain the concept of binary search and its time complexity.,Sample answer 2 for: Explain the concept of multiple inheritance and the method resolution order in Python.,Sample answer 3 for: What are Python type hints and how do they improve code quality?,Sample answer 3 for: What are Python descriptors and how do they work?
What are Python decorators and how do they work?,python_basics,Sample answer 1 for: What are Python decorators and how do they work?,"Lists are mutable collections that can be modified after creation, while tuples are immutable. Lists are defined using square brackets [], while tuples use parentheses (). Tuples are more memory-efficient and can be used as dictionary keys (since they're immutable), which lists cannot.",Sample answer 3 for: What are abstract classes and interfaces in Python?,Sample answer 1 for: Explain the concept of list comprehensions in Python.
How does exception handling work in Python?,python_basics,Sample answer 2 for: How does exception handling work in Python?,Sample answer 1 for: How would you implement a graph data structure in Python?,Sample answer 3 for: What is the traveling salesman problem and how would you approach it?,Sample answer 1 for: Explain the concept of duck typing in Python.
Explain the concept of monkey patching in Python and when it might be useful.,advanced_python,Sample answer 3 for: Explain the concept of monkey patching in Python and when it might be useful.,Sample answer 2 for: Explain the difference between depth-first search and breadth-first search.,Sample answer 2 for: Explain the concept of dynamic programming with an example.,Sample answer 2 for: What is the __init__ method in Python and how is it used?
How would you implement a graph data structure in Python?,data_structures,Sample answer 2 for: How would you implement a graph data structure in Python?,"Lists are mutable collections that can be modified after creation, while tuples are immutable. Lists are defined using square brackets [], while tuples use parentheses (). Tuples are more memory-efficient and can be used as dictionary keys (since they're immutable), which lists cannot.",Sample answer 2 for: How would you implement a breadth-first search algorithm?,Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?
Explain the difference between depth-first search and breadth-first search.,data_structures,Sample answer 2 for: Explain the difference between depth-first search and breadth-first search.,Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?,Sample answer 2 for: Explain the concept of backtracking with an example.,Sample answer 2 for: What is a heap data structure and when would you use it?
What is the difference between multiprocessing and multithreading in Python?,advanced_python,Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?,"Lists are mutable collections that can be modified after creation, while tuples are immutable. Lists are defined using square brackets [], while tuples use parentheses (). Tuples are more memory-efficient and can be used as dictionary keys (since they're immutable), which lists cannot.",Sample answer 1 for: How does exception handling work in Python?,Sample answer 3 for: What are Python generators and how do they differ from regular functions?
What is the traveling salesman problem and how would you approach it?,algorithms,Sample answer 2 for: What is the traveling salesman problem and how would you approach it?,Sample answer 2 for: Explain the concept of closures in Python with an example.,Sample answer 3 for: Explain the concept of recursion with an example.,Sample answer 1 for: Explain the concept of hash tables and their implementation in Python.
How does exception handling work in Python?,python_basics,Sample answer 3 for: How does exception handling work in Python?,"Sample answer 1 for: Explain the difference between class methods, static methods, and instance methods.",Sample answer 2 for: What is the difference between a stack and a queue?,Sample answer 3 for: How would you find the longest common subsequence of two strings?
Explain the time complexity of common operations in Python dictionaries.,data_structures,Sample answer 1 for: Explain the time complexity of common operations in Python dictionaries.,Sample answer 1 for: Explain the asyncio module in Python and how it works.,Sample answer 2 for: Explain the concept of encapsulation in Python.,Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python.
Explain the quicksort algorithm and its time complexity.,algorithms,Sample answer 2 for: Explain the quicksort algorithm and its time complexity.,Sample answer 2 for: What are Python context managers and how do they work?,Sample answer 3 for: Explain the concept of composition vs inheritance with examples.,Sample answer 2 for: Explain the concept of encapsulation in Python.
