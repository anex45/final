[
  {
    "question": "What is the difference between multiprocessing and multithreading in Python?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: What is a heap data structure and when would you use it?",
      "Sample answer 2 for: Explain the difference between class methods, static methods, and instance methods.",
      "Sample answer 3 for: What is polymorphism and how is it implemented in Python?"
    ]
  },
  {
    "question": "Explain the asyncio module in Python and how it works.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the asyncio module in Python and how it works.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 3 for: Explain the concept of dynamic programming with an example.",
      "Sample answer 1 for: What is the __init__ method in Python and how is it used?"
    ]
  },
  {
    "question": "What are Python decorators and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: What are Python decorators and how do they work?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 1 for: What is the difference between multiprocessing and multithreading in Python?",
      "Lists are mutable collections that can be modified after creation, while tuples are immutable. Lists are defined using square brackets [], while tuples use parentheses (). Tuples are more memory-efficient and can be used as dictionary keys (since they're immutable), which lists cannot."
    ]
  },
  {
    "question": "Explain the difference between '==' and 'is' operators in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: Explain the difference between '==' and 'is' operators in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 2 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 1 for: Explain the concept of multiple inheritance and the method resolution order in Python."
    ]
  },
  {
    "question": "What is the difference between a stack and a queue?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: What is the difference between a stack and a queue?",
    "incorrect_answers": [
      "Sample answer 3 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 2 for: Explain the difference between depth-first search and breadth-first search.",
      "Sample answer 2 for: Explain the concept of dynamic programming with an example."
    ]
  },
  {
    "question": "Explain the quicksort algorithm and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: Explain the quicksort algorithm and its time complexity.",
    "incorrect_answers": [
      "Sample answer 3 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 2 for: How would you implement a linked list in Python?",
      "Sample answer 3 for: Explain the concept of coroutines in Python."
    ]
  },
  {
    "question": "How would you detect a cycle in a linked list?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you detect a cycle in a linked list?",
    "incorrect_answers": [
      "Sample answer 3 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 1 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 1 for: What are Python context managers and how do they work?"
    ]
  },
  {
    "question": "Explain the concept of closures in Python with an example.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the concept of closures in Python with an example.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the difference between depth-first search and breadth-first search.",
      "Sample answer 2 for: Explain the concept of coroutines in Python.",
      "Sample answer 1 for: What are metaclasses in Python and how would you use them?"
    ]
  },
  {
    "question": "Explain the concept of metaprogramming in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: Explain the concept of metaprogramming in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: How does exception handling work in Python?",
      "Sample answer 2 for: What is the difference between a stack and a queue?",
      "Sample answer 1 for: What are the advantages and disadvantages of using arrays vs linked lists?"
    ]
  },
  {
    "question": "Explain the concept of backtracking with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: Explain the concept of backtracking with an example.",
    "incorrect_answers": [
      "Sample answer 3 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 1 for: Explain the concept of encapsulation in Python.",
      "Sample answer 2 for: What are Python's data model and how does it relate to special methods?"
    ]
  },
  {
    "question": "Explain the time complexity of common operations in Python dictionaries.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries.",
    "incorrect_answers": [
      "Sample answer 2 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 1 for: What are abstract classes and interfaces in Python?",
      "Sample answer 3 for: How would you implement a linked list in Python?"
    ]
  },
  {
    "question": "How would you implement a graph data structure in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: How would you implement a graph data structure in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: How does exception handling work in Python?",
      "Sample answer 1 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 1 for: What is a heap data structure and when would you use it?"
    ]
  },
  {
    "question": "What is polymorphism and how is it implemented in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What is polymorphism and how is it implemented in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?"
    ]
  },
  {
    "question": "Explain the concept of binary search and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: Explain the concept of binary search and its time complexity.",
    "incorrect_answers": [
      "Sample answer 3 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 3 for: What are Python's magic methods and how would you use them?",
      "Sample answer 3 for: What are Python context managers and how do they work?"
    ]
  },
  {
    "question": "Explain the asyncio module in Python and how it works.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: Explain the asyncio module in Python and how it works.",
    "incorrect_answers": [
      "Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 2 for: Explain the concept of duck typing in Python.",
      "Sample answer 1 for: What are Python decorators and how do they work?"
    ]
  },
  {
    "question": "How would you find the longest common subsequence of two strings?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: How would you find the longest common subsequence of two strings?",
    "incorrect_answers": [
      "Sample answer 2 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 3 for: What is method overriding and how does it work in Python?",
      "Sample answer 2 for: How would you implement a linked list in Python?"
    ]
  },
  {
    "question": "How would you implement a linked list in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: How would you implement a linked list in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: What is the difference between a stack and a queue?",
      "Sample answer 1 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 2 for: What are Python's data model and how does it relate to special methods?"
    ]
  },
  {
    "question": "What are abstract classes and interfaces in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What are abstract classes and interfaces in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 3 for: What are Python context managers and how do they work?"
    ]
  },
  {
    "question": "Explain the concept of dynamic programming with an example.",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: Explain the concept of dynamic programming with an example.",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python context managers and how do they work?",
      "Sample answer 3 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 2 for: What is polymorphism and how is it implemented in Python?"
    ]
  },
  {
    "question": "What are Python generators and how do they differ from regular functions?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: What are Python generators and how do they differ from regular functions?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 1 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 1 for: Explain the concept of list comprehensions in Python."
    ]
  },
  {
    "question": "What is the difference between multiprocessing and multithreading in Python?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: What are abstract classes and interfaces in Python?",
      "Sample answer 3 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 2 for: What is a heap data structure and when would you use it?"
    ]
  },
  {
    "question": "What is the difference between a greedy algorithm and dynamic programming?",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: What is the difference between a greedy algorithm and dynamic programming?",
    "incorrect_answers": [
      "Sample answer 2 for: How would you implement a linked list in Python?",
      "Sample answer 2 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 3 for: Explain the asyncio module in Python and how it works."
    ]
  },
  {
    "question": "Explain the concept of hash tables and their implementation in Python.",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: Explain the concept of hash tables and their implementation in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python decorators and how do they work?",
      "Sample answer 1 for: Explain the concept of closures in Python with an example.",
      "Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?"
    ]
  },
  {
    "question": "What is the difference between a stack and a queue?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: What is the difference between a stack and a queue?",
    "incorrect_answers": [
      "Sample answer 1 for: How would you implement a linked list in Python?",
      "Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 2 for: Explain the concept of hash tables and their implementation in Python."
    ]
  },
  {
    "question": "What is the Global Interpreter Lock (GIL) in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 1 for: What are Python decorators and how do they work?",
      "Sample answer 2 for: Explain the concept of backtracking with an example."
    ]
  },
  {
    "question": "How does exception handling work in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: How does exception handling work in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: What is the difference between a stack and a queue?",
      "Sample answer 1 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 1 for: Explain the time complexity of common operations in Python dictionaries."
    ]
  },
  {
    "question": "Explain the concept of closures in Python with an example.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: Explain the concept of closures in Python with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: How does exception handling work in Python?",
      "Sample answer 3 for: What is a heap data structure and when would you use it?",
      "Sample answer 2 for: Explain the concept of binary search and its time complexity."
    ]
  },
  {
    "question": "What are Python context managers and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: What are Python context managers and how do they work?",
    "incorrect_answers": [
      "Sample answer 3 for: How would you detect a cycle in a linked list?",
      "Sample answer 3 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?"
    ]
  },
  {
    "question": "Explain the concept of closures in Python with an example.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: Explain the concept of closures in Python with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 1 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 1 for: What is polymorphism and how is it implemented in Python?"
    ]
  },
  {
    "question": "Explain the concept of duck typing in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: Explain the concept of duck typing in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 1 for: Explain the quicksort algorithm and its time complexity."
    ]
  },
  {
    "question": "Explain the concept of hash tables and their implementation in Python.",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: Explain the concept of hash tables and their implementation in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python context managers and how do they work?",
      "Sample answer 2 for: What is method overriding and how does it work in Python?",
      "Sample answer 2 for: Explain the time complexity of common operations in Python dictionaries."
    ]
  },
  {
    "question": "What are Python decorators and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: What are Python decorators and how do they work?",
    "incorrect_answers": [
      "Python uses automatic memory management with a private heap to store objects and data structures. It has a built-in garbage collector that reclaims memory from objects that are no longer referenced. Python uses reference counting as its primary memory management technique, along with cycle-detecting garbage collection to handle circular references.",
      "Sample answer 1 for: Explain the concept of closures in Python with an example.",
      "Sample answer 2 for: Explain the difference between depth-first search and breadth-first search."
    ]
  },
  {
    "question": "What are Python's data model and how does it relate to special methods?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: What are Python's data model and how does it relate to special methods?",
    "incorrect_answers": [
      "Sample answer 3 for: What is method overriding and how does it work in Python?",
      "Sample answer 2 for: What is method overriding and how does it work in Python?",
      "Sample answer 2 for: Explain the concept of coroutines in Python."
    ]
  },
  {
    "question": "Explain the concept of binary search and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: Explain the concept of binary search and its time complexity.",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python context managers and how do they work?",
      "Sample answer 2 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries."
    ]
  },
  {
    "question": "What are Python context managers and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What are Python context managers and how do they work?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 1 for: What are abstract classes and interfaces in Python?",
      "Sample answer 2 for: Explain the concept of composition vs inheritance with examples."
    ]
  },
  {
    "question": "Explain the difference between class methods, static methods, and instance methods.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: Explain the difference between class methods, static methods, and instance methods.",
    "incorrect_answers": [
      "Sample answer 2 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?"
    ]
  },
  {
    "question": "Explain the concept of multiple inheritance and the method resolution order in Python.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the difference between class methods, static methods, and instance methods.",
      "Sample answer 3 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 3 for: How would you find the kth largest element in an unsorted array?"
    ]
  },
  {
    "question": "What are binary trees and how would you implement one in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: What are binary trees and how would you implement one in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 1 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 1 for: How would you find the kth largest element in an unsorted array?"
    ]
  },
  {
    "question": "Explain the concept of monkey patching in Python and when it might be useful.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful.",
    "incorrect_answers": [
      "Sample answer 2 for: How would you detect a cycle in a linked list?",
      "Sample answer 1 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 1 for: What is the __init__ method in Python and how is it used?"
    ]
  },
  {
    "question": "How would you implement a graph data structure in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: How would you implement a graph data structure in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 2 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 3 for: What are Python's data model and how does it relate to special methods?"
    ]
  },
  {
    "question": "What is the difference between a list and a tuple in Python?",
    "category": "python_basics",
    "correct_answer": "The main difference is mutability: lists can be changed after creation (mutable) while tuples cannot (immutable). Lists use square brackets and support operations like append() and extend(), while tuples use parentheses and don't allow modification after creation. Tuples are more memory efficient and slightly faster than lists.",
    "incorrect_answers": [
      "Sample answer 1 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 1 for: Explain the difference between '==' and 'is' operators in Python.",
      "Sample answer 3 for: How would you find the longest common subsequence of two strings?"
    ]
  },
  {
    "question": "What are binary trees and how would you implement one in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: What are binary trees and how would you implement one in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: What is a heap data structure and when would you use it?",
      "Sample answer 1 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 2 for: Explain the concept of metaprogramming in Python."
    ]
  },
  {
    "question": "Explain the concept of binary search and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: Explain the concept of binary search and its time complexity.",
    "incorrect_answers": [
      "Python uses automatic memory management with a private heap to store objects and data structures. It has a built-in garbage collector that reclaims memory from objects that are no longer referenced. Python uses reference counting as its primary memory management technique, along with cycle-detecting garbage collection to handle circular references.",
      "Sample answer 2 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 3 for: What are abstract classes and interfaces in Python?"
    ]
  },
  {
    "question": "What are the advantages and disadvantages of using arrays vs linked lists?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 3 for: How would you implement a graph data structure in Python?",
      "Sample answer 1 for: Explain the concept of backtracking with an example."
    ]
  },
  {
    "question": "What is method overriding and how does it work in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: What is method overriding and how does it work in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 2 for: Explain the concept of coroutines in Python.",
      "Sample answer 3 for: How would you implement a breadth-first search algorithm?"
    ]
  },
  {
    "question": "Explain the concept of backtracking with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: Explain the concept of backtracking with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 1 for: What is a heap data structure and when would you use it?",
      "Sample answer 1 for: What are Python decorators and how do they work?"
    ]
  },
  {
    "question": "What are Python's magic methods and how would you use them?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: What are Python's magic methods and how would you use them?",
    "incorrect_answers": [
      "Sample answer 2 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 3 for: What are Python context managers and how do they work?",
      "Sample answer 3 for: Explain the quicksort algorithm and its time complexity."
    ]
  },
  {
    "question": "Explain the concept of metaprogramming in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: Explain the concept of metaprogramming in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: What are abstract classes and interfaces in Python?",
      "Sample answer 1 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 2 for: Explain the difference between '==' and 'is' operators in Python."
    ]
  },
  {
    "question": "Explain the concept of hash tables and their implementation in Python.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the concept of hash tables and their implementation in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: What is method overriding and how does it work in Python?",
      "Sample answer 3 for: Explain the concept of recursion with an example.",
      "Sample answer 2 for: How would you implement a graph data structure in Python?"
    ]
  },
  {
    "question": "Explain the concept of coroutines in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the concept of coroutines in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of backtracking with an example.",
      "Sample answer 1 for: Explain the concept of duck typing in Python.",
      "Sample answer 2 for: Explain the concept of list comprehensions in Python."
    ]
  },
  {
    "question": "What are Python context managers and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: What are Python context managers and how do they work?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 2 for: How would you detect a cycle in a linked list?",
      "Python uses automatic memory management through reference counting and garbage collection. When objects are created, Python allocates memory from a private heap. It tracks references to objects, and when an object's reference count drops to zero, the memory is reclaimed. Python also has a cyclic garbage collector to detect and collect objects in reference cycles that would otherwise not be collected."
    ]
  },
  {
    "question": "What are the advantages and disadvantages of using arrays vs linked lists?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?",
    "incorrect_answers": [
      "Sample answer 3 for: What is a heap data structure and when would you use it?",
      "Sample answer 2 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 3 for: Explain the concept of hash tables and their implementation in Python."
    ]
  },
  {
    "question": "Explain the concept of duck typing in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: Explain the concept of duck typing in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 2 for: Explain the concept of backtracking with an example.",
      "Sample answer 1 for: How would you find the longest common subsequence of two strings?"
    ]
  },
  {
    "question": "How does exception handling work in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: How does exception handling work in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 3 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 2 for: Explain the difference between '==' and 'is' operators in Python."
    ]
  },
  {
    "question": "Explain the concept of coroutines in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the concept of coroutines in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: What is the difference between a stack and a queue?",
      "Sample answer 3 for: What are Python decorators and how do they work?",
      "Sample answer 1 for: What are Python decorators and how do they work?"
    ]
  },
  {
    "question": "What are metaclasses in Python and how would you use them?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What are metaclasses in Python and how would you use them?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of closures in Python with an example.",
      "Sample answer 3 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 1 for: Explain the concept of hash tables and their implementation in Python."
    ]
  },
  {
    "question": "Explain the concept of duck typing in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: Explain the concept of duck typing in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 3 for: What are Python descriptors and how do they work?",
      "Sample answer 1 for: Explain the concept of hash tables and their implementation in Python."
    ]
  },
  {
    "question": "Explain the concept of duck typing in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: Explain the concept of duck typing in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of closures in Python with an example.",
      "Sample answer 2 for: How would you detect a cycle in a linked list?",
      "Sample answer 2 for: What are Python generators and how do they differ from regular functions?"
    ]
  },
  {
    "question": "How does exception handling work in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: How does exception handling work in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 3 for: Explain the difference between '==' and 'is' operators in Python.",
      "Sample answer 1 for: What are Python descriptors and how do they work?"
    ]
  },
  {
    "question": "What is polymorphism and how is it implemented in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What is polymorphism and how is it implemented in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 2 for: Explain the difference between depth-first search and breadth-first search.",
      "Sample answer 1 for: What is a heap data structure and when would you use it?"
    ]
  },
  {
    "question": "What are the advantages and disadvantages of using arrays vs linked lists?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: What are the advantages and disadvantages of using arrays vs linked lists?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of dynamic programming with an example.",
      "Sample answer 2 for: Explain the concept of dynamic programming with an example.",
      "Sample answer 2 for: Explain the concept of multiple inheritance and the method resolution order in Python."
    ]
  },
  {
    "question": "How would you find the kth largest element in an unsorted array?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: How would you find the kth largest element in an unsorted array?",
    "incorrect_answers": [
      "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 1 for: What is a heap data structure and when would you use it?",
      "Sample answer 3 for: Explain the concept of monkey patching in Python and when it might be useful."
    ]
  },
  {
    "question": "What are the advantages and disadvantages of using arrays vs linked lists?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python decorators and how do they work?",
      "Sample answer 1 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 1 for: How would you implement a breadth-first search algorithm?"
    ]
  },
  {
    "question": "Explain the quicksort algorithm and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: Explain the quicksort algorithm and its time complexity.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 3 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries."
    ]
  },
  {
    "question": "How would you find the kth largest element in an unsorted array?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you find the kth largest element in an unsorted array?",
    "incorrect_answers": [
      "Sample answer 2 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 3 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 1 for: What is the difference between a greedy algorithm and dynamic programming?"
    ]
  },
  {
    "question": "Explain the concept of list comprehensions in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: Explain the concept of list comprehensions in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of dynamic programming with an example.",
      "Sample answer 1 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 2 for: What is polymorphism and how is it implemented in Python?"
    ]
  },
  {
    "question": "What is a heap data structure and when would you use it?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: What is a heap data structure and when would you use it?",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python's magic methods and how would you use them?",
      "Sample answer 2 for: Explain the concept of backtracking with an example.",
      "Sample answer 2 for: Explain the concept of composition vs inheritance with examples."
    ]
  },
  {
    "question": "What is the __init__ method in Python and how is it used?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What is the __init__ method in Python and how is it used?",
    "incorrect_answers": [
      "Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 2 for: Explain the concept of coroutines in Python.",
      "Sample answer 3 for: Explain the concept of closures in Python with an example."
    ]
  },
  {
    "question": "How would you implement a graph data structure in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: How would you implement a graph data structure in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 2 for: What are Python decorators and how do they work?",
      "Sample answer 3 for: Explain the concept of metaprogramming in Python."
    ]
  },
  {
    "question": "What is the difference between a stack and a queue?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: What is the difference between a stack and a queue?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the asyncio module in Python and how it works.",
      "Sample answer 3 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 1 for: Explain the concept of composition vs inheritance with examples."
    ]
  },
  {
    "question": "Explain the concept of list comprehensions in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: Explain the concept of list comprehensions in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 1 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 3 for: What are abstract classes and interfaces in Python?"
    ]
  },
  {
    "question": "What are metaclasses in Python and how would you use them?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What are metaclasses in Python and how would you use them?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the difference between class methods, static methods, and instance methods.",
      "Sample answer 3 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 2 for: Explain the concept of inheritance in Python with an example."
    ]
  },
  {
    "question": "What is the difference between a list and a tuple in Python?",
    "category": "python_basics",
    "correct_answer": "Lists are mutable, meaning they can be modified after creation, while tuples are immutable. Lists use square brackets [] and tuples use parentheses (). Lists generally consume more memory than tuples and are slower for iteration.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the asyncio module in Python and how it works.",
      "Sample answer 2 for: What are abstract classes and interfaces in Python?",
      "Sample answer 2 for: Explain the asyncio module in Python and how it works."
    ]
  },
  {
    "question": "Explain the concept of metaprogramming in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the concept of metaprogramming in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 1 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 3 for: What are Python generators and how do they differ from regular functions?"
    ]
  },
  {
    "question": "Explain the concept of binary search and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: Explain the concept of binary search and its time complexity.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the difference between '==' and 'is' operators in Python.",
      "Sample answer 2 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 1 for: What are Python context managers and how do they work?"
    ]
  },
  {
    "question": "How would you find the longest common subsequence of two strings?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you find the longest common subsequence of two strings?",
    "incorrect_answers": [
      "Sample answer 3 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 2 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 3 for: Explain the concept of encapsulation in Python."
    ]
  },
  {
    "question": "Explain the difference between class methods, static methods, and instance methods.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the difference between class methods, static methods, and instance methods.",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python context managers and how do they work?",
      "Sample answer 1 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 2 for: What is the __init__ method in Python and how is it used?"
    ]
  },
  {
    "question": "Explain the concept of backtracking with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: Explain the concept of backtracking with an example.",
    "incorrect_answers": [
      "Sample answer 2 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 2 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?"
    ]
  },
  {
    "question": "What are Python descriptors and how do they work?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: What are Python descriptors and how do they work?",
    "incorrect_answers": [
      "Sample answer 1 for: How would you detect a cycle in a linked list?",
      "Sample answer 2 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 1 for: What is polymorphism and how is it implemented in Python?"
    ]
  },
  {
    "question": "What are Python generators and how do they differ from regular functions?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What are Python generators and how do they differ from regular functions?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 2 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 3 for: Explain the concept of composition vs inheritance with examples."
    ]
  },
  {
    "question": "What is polymorphism and how is it implemented in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: What is polymorphism and how is it implemented in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of coroutines in Python.",
      "Sample answer 3 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 1 for: What are Python decorators and how do they work?"
    ]
  },
  {
    "question": "Explain the concept of dynamic programming with an example.",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: Explain the concept of dynamic programming with an example.",
    "incorrect_answers": [
      "Sample answer 2 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 1 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 2 for: Explain the quicksort algorithm and its time complexity."
    ]
  },
  {
    "question": "Explain the difference between depth-first search and breadth-first search.",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the asyncio module in Python and how it works.",
      "Sample answer 2 for: Explain the concept of dynamic programming with an example.",
      "Sample answer 1 for: How does exception handling work in Python?"
    ]
  },
  {
    "question": "Explain the concept of backtracking with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: Explain the concept of backtracking with an example.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the difference between class methods, static methods, and instance methods.",
      "Sample answer 2 for: How would you implement a linked list in Python?",
      "Sample answer 3 for: What are metaclasses in Python and how would you use them?"
    ]
  },
  {
    "question": "How would you find the longest common subsequence of two strings?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: How would you find the longest common subsequence of two strings?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 2 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 1 for: What are Python decorators and how do they work?"
    ]
  },
  {
    "question": "Explain the concept of duck typing in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: Explain the concept of duck typing in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 3 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 1 for: How would you implement a graph data structure in Python?"
    ]
  },
  {
    "question": "What are Python's magic methods and how would you use them?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: What are Python's magic methods and how would you use them?",
    "incorrect_answers": [
      "Sample answer 3 for: What is polymorphism and how is it implemented in Python?",
      "Python manages memory through automatic garbage collection. It uses reference counting to track how many references point to an object, and when the count reaches zero, the memory is freed. Python also has a cycle detector to handle circular references. All Python objects are stored in a private heap, and the memory manager allocates heap space for objects.",
      "Sample answer 1 for: How would you detect a cycle in a linked list?"
    ]
  },
  {
    "question": "Explain the concept of duck typing in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: Explain the concept of duck typing in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the asyncio module in Python and how it works.",
      "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 2 for: What are Python's data model and how does it relate to special methods?"
    ]
  },
  {
    "question": "How would you find the kth largest element in an unsorted array?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you find the kth largest element in an unsorted array?",
    "incorrect_answers": [
      "Sample answer 1 for: What are abstract classes and interfaces in Python?",
      "Sample answer 2 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 1 for: Explain the concept of multiple inheritance and the method resolution order in Python."
    ]
  },
  {
    "question": "Explain the difference between depth-first search and breadth-first search.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the difference between depth-first search and breadth-first search.",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python decorators and how do they work?",
      "Sample answer 2 for: How would you implement a linked list in Python?",
      "Sample answer 1 for: What are Python type hints and how do they improve code quality?"
    ]
  },
  {
    "question": "How would you implement a graph data structure in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: How would you implement a graph data structure in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python context managers and how do they work?",
      "Python uses automatic memory management through reference counting and garbage collection. When objects are created, Python allocates memory from a private heap. It tracks references to objects, and when an object's reference count drops to zero, the memory is reclaimed. Python also has a cyclic garbage collector to detect and collect objects in reference cycles that would otherwise not be collected.",
      "Sample answer 3 for: Explain the concept of encapsulation in Python."
    ]
  },
  {
    "question": "What are Python's data model and how does it relate to special methods?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What are Python's data model and how does it relate to special methods?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 3 for: What are Python context managers and how do they work?",
      "Sample answer 1 for: Explain the concept of closures in Python with an example."
    ]
  },
  {
    "question": "Explain the concept of coroutines in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the concept of coroutines in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: What is the difference between a stack and a queue?",
      "Sample answer 1 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 3 for: What is method overriding and how does it work in Python?"
    ]
  },
  {
    "question": "Explain the concept of duck typing in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: Explain the concept of duck typing in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 2 for: How would you detect a cycle in a linked list?",
      "Sample answer 3 for: Explain the concept of monkey patching in Python and when it might be useful."
    ]
  },
  {
    "question": "How would you implement a breadth-first search algorithm?",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: How would you implement a breadth-first search algorithm?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 2 for: How would you detect a cycle in a linked list?",
      "Sample answer 1 for: How would you implement a graph data structure in Python?"
    ]
  },
  {
    "question": "What are Python descriptors and how do they work?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What are Python descriptors and how do they work?",
    "incorrect_answers": [
      "Sample answer 2 for: How would you implement a graph data structure in Python?",
      "Sample answer 2 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 2 for: What is polymorphism and how is it implemented in Python?"
    ]
  },
  {
    "question": "What are Python's data model and how does it relate to special methods?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: What are Python's data model and how does it relate to special methods?",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python type hints and how do they improve code quality?",
      "Python uses automatic memory management with a private heap to store objects and data structures. It has a built-in garbage collector that reclaims memory from objects that are no longer referenced. Python uses reference counting as its primary memory management technique, along with cycle-detecting garbage collection to handle circular references.",
      "Sample answer 3 for: Explain the concept of coroutines in Python."
    ]
  },
  {
    "question": "What are Python's magic methods and how would you use them?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What are Python's magic methods and how would you use them?",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python descriptors and how do they work?",
      "Sample answer 2 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 3 for: Explain the concept of binary search and its time complexity."
    ]
  },
  {
    "question": "What are Python's magic methods and how would you use them?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: What are Python's magic methods and how would you use them?",
    "incorrect_answers": [
      "Sample answer 3 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 2 for: Explain the concept of coroutines in Python.",
      "Sample answer 1 for: What is polymorphism and how is it implemented in Python?"
    ]
  },
  {
    "question": "What are Python type hints and how do they improve code quality?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: What are Python type hints and how do they improve code quality?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 2 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 2 for: What are Python decorators and how do they work?"
    ]
  },
  {
    "question": "What is the __init__ method in Python and how is it used?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: What is the __init__ method in Python and how is it used?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of closures in Python with an example.",
      "Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?"
    ]
  },
  {
    "question": "How would you find the longest common subsequence of two strings?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: How would you find the longest common subsequence of two strings?",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 2 for: What are Python context managers and how do they work?"
    ]
  },
  {
    "question": "Explain the concept of monkey patching in Python and when it might be useful.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the concept of monkey patching in Python and when it might be useful.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of coroutines in Python.",
      "Sample answer 2 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 3 for: What is a heap data structure and when would you use it?"
    ]
  },
  {
    "question": "How would you implement a breadth-first search algorithm?",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: How would you implement a breadth-first search algorithm?",
    "incorrect_answers": [
      "Sample answer 1 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 2 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?"
    ]
  },
  {
    "question": "What are Python descriptors and how do they work?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: What are Python descriptors and how do they work?",
    "incorrect_answers": [
      "Sample answer 3 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 1 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 2 for: What are Python generators and how do they differ from regular functions?"
    ]
  },
  {
    "question": "Explain the concept of inheritance in Python with an example.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the concept of inheritance in Python with an example.",
    "incorrect_answers": [
      "Python uses automatic memory management with a private heap to store objects and data structures. It has a built-in garbage collector that reclaims memory from objects that are no longer referenced. Python uses reference counting as its primary memory management technique, along with cycle-detecting garbage collection to handle circular references.",
      "Sample answer 3 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?"
    ]
  },
  {
    "question": "What is the Global Interpreter Lock (GIL) in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 1 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 2 for: What is the __init__ method in Python and how is it used?"
    ]
  },
  {
    "question": "What is the Global Interpreter Lock (GIL) in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 1 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 2 for: What are Python context managers and how do they work?"
    ]
  },
  {
    "question": "How would you detect a cycle in a linked list?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you detect a cycle in a linked list?",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python context managers and how do they work?",
      "Sample answer 1 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 1 for: Explain the asyncio module in Python and how it works."
    ]
  },
  {
    "question": "Explain the concept of dynamic programming with an example.",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: Explain the concept of dynamic programming with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 3 for: Explain the concept of closures in Python with an example.",
      "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries."
    ]
  },
  {
    "question": "What are Python's magic methods and how would you use them?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: What are Python's magic methods and how would you use them?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 3 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 1 for: What are the advantages and disadvantages of using arrays vs linked lists?"
    ]
  },
  {
    "question": "Explain the concept of closures in Python with an example.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the concept of closures in Python with an example.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of backtracking with an example.",
      "Sample answer 2 for: What are Python descriptors and how do they work?",
      "Sample answer 3 for: How would you find the longest common subsequence of two strings?"
    ]
  },
  {
    "question": "Explain how Python handles memory management.",
    "category": "python_basics",
    "correct_answer": "Python manages memory through automatic garbage collection. It uses reference counting to track how many references point to an object, and when the count reaches zero, the memory is freed. Python also has a cycle detector to handle circular references. All Python objects are stored in a private heap, and the memory manager allocates heap space for objects.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of backtracking with an example.",
      "Sample answer 1 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 3 for: Explain the concept of closures in Python with an example."
    ]
  },
  {
    "question": "What is the difference between a greedy algorithm and dynamic programming?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: What is the difference between a greedy algorithm and dynamic programming?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 3 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 2 for: Explain the concept of monkey patching in Python and when it might be useful."
    ]
  },
  {
    "question": "Explain the concept of encapsulation in Python.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the concept of encapsulation in Python.",
    "incorrect_answers": [
      "Python manages memory through automatic garbage collection. It uses reference counting to track how many references point to an object, and when the count reaches zero, the memory is freed. Python also has a cycle detector to handle circular references. All Python objects are stored in a private heap, and the memory manager allocates heap space for objects.",
      "Sample answer 3 for: Explain the concept of closures in Python with an example.",
      "Sample answer 3 for: Explain the concept of recursion with an example."
    ]
  },
  {
    "question": "Explain the concept of recursion with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: Explain the concept of recursion with an example.",
    "incorrect_answers": [
      "Sample answer 3 for: What is the difference between a stack and a queue?",
      "Sample answer 2 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 1 for: What is the traveling salesman problem and how would you approach it?"
    ]
  },
  {
    "question": "Explain the time complexity of common operations in Python dictionaries.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of recursion with an example.",
      "Sample answer 3 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 3 for: Explain the quicksort algorithm and its time complexity."
    ]
  },
  {
    "question": "Explain the concept of hash tables and their implementation in Python.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the concept of hash tables and their implementation in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 1 for: What is the difference between a stack and a queue?",
      "Sample answer 1 for: What is the difference between a stack and a queue?"
    ]
  },
  {
    "question": "What are Python type hints and how do they improve code quality?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: What are Python type hints and how do they improve code quality?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Python uses automatic memory management with a private heap to store objects and data structures. It has a built-in garbage collector that reclaims memory from objects that are no longer referenced. Python uses reference counting as its primary memory management technique, along with cycle-detecting garbage collection to handle circular references.",
      "Sample answer 1 for: How would you implement a graph data structure in Python?"
    ]
  },
  {
    "question": "Explain the concept of closures in Python with an example.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the concept of closures in Python with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python descriptors and how do they work?",
      "Lists are mutable, meaning they can be modified after creation, while tuples are immutable. Lists use square brackets [] and tuples use parentheses (). Lists generally consume more memory than tuples and are slower for iteration.",
      "Sample answer 2 for: Explain the concept of coroutines in Python."
    ]
  },
  {
    "question": "Explain the concept of composition vs inheritance with examples.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: Explain the concept of composition vs inheritance with examples.",
    "incorrect_answers": [
      "Sample answer 1 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 3 for: Explain the concept of backtracking with an example.",
      "Sample answer 2 for: Explain the difference between depth-first search and breadth-first search."
    ]
  },
  {
    "question": "What are metaclasses in Python and how would you use them?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: What are metaclasses in Python and how would you use them?",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python context managers and how do they work?",
      "Sample answer 3 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 1 for: Explain the concept of recursion with an example."
    ]
  },
  {
    "question": "Explain the time complexity of common operations in Python dictionaries.",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: Explain the time complexity of common operations in Python dictionaries.",
    "incorrect_answers": [
      "Lists are mutable collections that can be modified after creation, while tuples are immutable. Lists are defined using square brackets [], while tuples use parentheses (). Tuples are more memory-efficient and can be used as dictionary keys (since they're immutable), which lists cannot.",
      "Sample answer 1 for: What is method overriding and how does it work in Python?",
      "Sample answer 2 for: What is a heap data structure and when would you use it?"
    ]
  },
  {
    "question": "Explain the difference between '==' and 'is' operators in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: Explain the difference between '==' and 'is' operators in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: How would you implement a graph data structure in Python?",
      "Sample answer 1 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 1 for: Explain the concept of list comprehensions in Python."
    ]
  },
  {
    "question": "Explain the concept of hash tables and their implementation in Python.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the concept of hash tables and their implementation in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of recursion with an example.",
      "Sample answer 3 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 3 for: How would you find the longest common subsequence of two strings?"
    ]
  },
  {
    "question": "Explain the concept of list comprehensions in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: Explain the concept of list comprehensions in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: How would you implement a linked list in Python?",
      "Sample answer 1 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 3 for: What are metaclasses in Python and how would you use them?"
    ]
  },
  {
    "question": "What are the advantages and disadvantages of using arrays vs linked lists?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: What are the advantages and disadvantages of using arrays vs linked lists?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the asyncio module in Python and how it works.",
      "Sample answer 3 for: What are Python context managers and how do they work?",
      "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries."
    ]
  },
  {
    "question": "Explain the concept of recursion with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: Explain the concept of recursion with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the asyncio module in Python and how it works.",
      "Sample answer 2 for: Explain the concept of dynamic programming with an example.",
      "Sample answer 3 for: What is the difference between a stack and a queue?"
    ]
  },
  {
    "question": "Explain the quicksort algorithm and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: Explain the quicksort algorithm and its time complexity.",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python decorators and how do they work?",
      "Sample answer 3 for: Explain the concept of recursion with an example.",
      "Sample answer 1 for: Explain the concept of duck typing in Python."
    ]
  },
  {
    "question": "How would you find the longest common subsequence of two strings?",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: How would you find the longest common subsequence of two strings?",
    "incorrect_answers": [
      "Sample answer 3 for: What are abstract classes and interfaces in Python?",
      "Sample answer 1 for: What are Python's magic methods and how would you use them?",
      "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries."
    ]
  },
  {
    "question": "Explain the concept of hash tables and their implementation in Python.",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: Explain the concept of hash tables and their implementation in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python's magic methods and how would you use them?",
      "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 1 for: Explain the concept of encapsulation in Python."
    ]
  },
  {
    "question": "How would you implement a linked list in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: How would you implement a linked list in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: What are abstract classes and interfaces in Python?",
      "Sample answer 1 for: What are abstract classes and interfaces in Python?",
      "Sample answer 2 for: What is polymorphism and how is it implemented in Python?"
    ]
  },
  {
    "question": "Explain the concept of backtracking with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: Explain the concept of backtracking with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 1 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 1 for: What is the difference between multiprocessing and multithreading in Python?"
    ]
  },
  {
    "question": "What are Python generators and how do they differ from regular functions?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: What are Python generators and how do they differ from regular functions?",
    "incorrect_answers": [
      "Sample answer 1 for: What are abstract classes and interfaces in Python?",
      "Sample answer 1 for: Explain the concept of encapsulation in Python.",
      "Sample answer 3 for: Explain the concept of dynamic programming with an example."
    ]
  },
  {
    "question": "How does exception handling work in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: How does exception handling work in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 2 for: What is the __init__ method in Python and how is it used?"
    ]
  },
  {
    "question": "What is the difference between a list and a tuple in Python?",
    "category": "python_basics",
    "correct_answer": "Lists are mutable, meaning they can be modified after creation, while tuples are immutable. Lists use square brackets [] and tuples use parentheses (). Lists generally consume more memory than tuples and are slower for iteration.",
    "incorrect_answers": [
      "Sample answer 2 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 3 for: What is the difference between a stack and a queue?",
      "Sample answer 3 for: What is method overriding and how does it work in Python?"
    ]
  },
  {
    "question": "What are Python generators and how do they differ from regular functions?",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: What are Python generators and how do they differ from regular functions?",
    "incorrect_answers": [
      "Sample answer 3 for: What is the difference between a stack and a queue?",
      "Sample answer 2 for: Explain the concept of recursion with an example.",
      "Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?"
    ]
  },
  {
    "question": "What is a heap data structure and when would you use it?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: What is a heap data structure and when would you use it?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of coroutines in Python.",
      "Sample answer 2 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 1 for: Explain the difference between class methods, static methods, and instance methods."
    ]
  },
  {
    "question": "Explain the concept of metaprogramming in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: Explain the concept of metaprogramming in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: What is method overriding and how does it work in Python?",
      "Sample answer 3 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 2 for: Explain the concept of list comprehensions in Python."
    ]
  },
  {
    "question": "What is a heap data structure and when would you use it?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: What is a heap data structure and when would you use it?",
    "incorrect_answers": [
      "Sample answer 1 for: What is the difference between a stack and a queue?",
      "Sample answer 1 for: Explain the concept of closures in Python with an example.",
      "Sample answer 1 for: What is polymorphism and how is it implemented in Python?"
    ]
  },
  {
    "question": "Explain the concept of closures in Python with an example.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: Explain the concept of closures in Python with an example.",
    "incorrect_answers": [
      "Sample answer 2 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 2 for: How would you detect a cycle in a linked list?",
      "Sample answer 1 for: How would you implement a graph data structure in Python?"
    ]
  },
  {
    "question": "What are Python type hints and how do they improve code quality?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What are Python type hints and how do they improve code quality?",
    "incorrect_answers": [
      "Sample answer 3 for: What is method overriding and how does it work in Python?",
      "Sample answer 3 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 3 for: How would you implement a linked list in Python?"
    ]
  },
  {
    "question": "Explain the concept of dynamic programming with an example.",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: Explain the concept of dynamic programming with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of recursion with an example.",
      "Sample answer 3 for: Explain the difference between class methods, static methods, and instance methods.",
      "Sample answer 2 for: What is a heap data structure and when would you use it?"
    ]
  },
  {
    "question": "Explain the concept of binary search and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: Explain the concept of binary search and its time complexity.",
    "incorrect_answers": [
      "Sample answer 3 for: How would you detect a cycle in a linked list?",
      "Sample answer 3 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 2 for: What are Python type hints and how do they improve code quality?"
    ]
  },
  {
    "question": "Explain the concept of closures in Python with an example.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the concept of closures in Python with an example.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 3 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 1 for: What are Python's magic methods and how would you use them?"
    ]
  },
  {
    "question": "Explain the asyncio module in Python and how it works.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: Explain the asyncio module in Python and how it works.",
    "incorrect_answers": [
      "Python uses automatic memory management through reference counting and garbage collection. When objects are created, Python allocates memory from a private heap. It tracks references to objects, and when an object's reference count drops to zero, the memory is reclaimed. Python also has a cyclic garbage collector to detect and collect objects in reference cycles that would otherwise not be collected.",
      "Sample answer 2 for: How does exception handling work in Python?",
      "Sample answer 1 for: What are Python descriptors and how do they work?"
    ]
  },
  {
    "question": "Explain the concept of hash tables and their implementation in Python.",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: Explain the concept of hash tables and their implementation in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of closures in Python with an example.",
      "Sample answer 3 for: What are Python context managers and how do they work?",
      "Sample answer 3 for: What are binary trees and how would you implement one in Python?"
    ]
  },
  {
    "question": "Explain the concept of duck typing in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: Explain the concept of duck typing in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python descriptors and how do they work?",
      "Sample answer 1 for: What are abstract classes and interfaces in Python?",
      "Sample answer 3 for: Explain the concept of metaprogramming in Python."
    ]
  },
  {
    "question": "Explain the concept of backtracking with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: Explain the concept of backtracking with an example.",
    "incorrect_answers": [
      "Sample answer 3 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 2 for: What is a heap data structure and when would you use it?",
      "Sample answer 3 for: What are Python decorators and how do they work?"
    ]
  },
  {
    "question": "Explain how Python handles memory management.",
    "category": "python_basics",
    "correct_answer": "Python manages memory through automatic garbage collection. It uses reference counting to track how many references point to an object, and when the count reaches zero, the memory is freed. Python also has a cycle detector to handle circular references. All Python objects are stored in a private heap, and the memory manager allocates heap space for objects.",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 1 for: What is the difference between a stack and a queue?",
      "Sample answer 2 for: What are Python generators and how do they differ from regular functions?"
    ]
  },
  {
    "question": "What is method overriding and how does it work in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What is method overriding and how does it work in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of dynamic programming with an example.",
      "Sample answer 2 for: Explain the concept of closures in Python with an example.",
      "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?"
    ]
  },
  {
    "question": "Explain the concept of duck typing in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: Explain the concept of duck typing in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 1 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 1 for: Explain the difference between '==' and 'is' operators in Python."
    ]
  },
  {
    "question": "What is the Global Interpreter Lock (GIL) in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: How does exception handling work in Python?",
      "Sample answer 2 for: How does exception handling work in Python?",
      "Sample answer 1 for: What is the difference between a greedy algorithm and dynamic programming?"
    ]
  },
  {
    "question": "What are Python descriptors and how do they work?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: What are Python descriptors and how do they work?",
    "incorrect_answers": [
      "Sample answer 3 for: What are binary trees and how would you implement one in Python?",
      "Python uses automatic memory management with a private heap to store objects and data structures. It has a built-in garbage collector that reclaims memory from objects that are no longer referenced. Python uses reference counting as its primary memory management technique, along with cycle-detecting garbage collection to handle circular references.",
      "Sample answer 1 for: How would you implement a graph data structure in Python?"
    ]
  },
  {
    "question": "Explain the time complexity of common operations in Python dictionaries.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries.",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python context managers and how do they work?",
      "Sample answer 3 for: Explain the concept of backtracking with an example.",
      "Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful."
    ]
  },
  {
    "question": "Explain the concept of binary search and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: Explain the concept of binary search and its time complexity.",
    "incorrect_answers": [
      "Sample answer 1 for: What are abstract classes and interfaces in Python?",
      "Sample answer 1 for: What is a heap data structure and when would you use it?",
      "Sample answer 1 for: Explain the difference between '==' and 'is' operators in Python."
    ]
  },
  {
    "question": "Explain the concept of multiple inheritance and the method resolution order in Python.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 2 for: What are Python's magic methods and how would you use them?",
      "Sample answer 3 for: Explain the asyncio module in Python and how it works."
    ]
  },
  {
    "question": "What are abstract classes and interfaces in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What are abstract classes and interfaces in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: What is a heap data structure and when would you use it?",
      "Sample answer 2 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 1 for: What are Python descriptors and how do they work?"
    ]
  },
  {
    "question": "Explain the concept of coroutines in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the concept of coroutines in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 3 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?"
    ]
  },
  {
    "question": "Explain the concept of inheritance in Python with an example.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: Explain the concept of inheritance in Python with an example.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the difference between depth-first search and breadth-first search.",
      "Sample answer 2 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 2 for: Explain the concept of list comprehensions in Python."
    ]
  },
  {
    "question": "What is the __init__ method in Python and how is it used?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What is the __init__ method in Python and how is it used?",
    "incorrect_answers": [
      "Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 2 for: How does exception handling work in Python?",
      "Sample answer 3 for: What are Python's data model and how does it relate to special methods?"
    ]
  },
  {
    "question": "How would you implement a graph data structure in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: How would you implement a graph data structure in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 1 for: Explain the concept of encapsulation in Python.",
      "Sample answer 1 for: What are Python's magic methods and how would you use them?"
    ]
  },
  {
    "question": "Explain the concept of coroutines in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: Explain the concept of coroutines in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: What is method overriding and how does it work in Python?",
      "Sample answer 2 for: What is the difference between a stack and a queue?",
      "Sample answer 3 for: Explain the concept of closures in Python with an example."
    ]
  },
  {
    "question": "What are Python generators and how do they differ from regular functions?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What are Python generators and how do they differ from regular functions?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 3 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?"
    ]
  },
  {
    "question": "Explain the concept of composition vs inheritance with examples.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: Explain the concept of composition vs inheritance with examples.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 1 for: What are Python context managers and how do they work?",
      "Sample answer 3 for: Explain the concept of backtracking with an example."
    ]
  },
  {
    "question": "Explain the concept of encapsulation in Python.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: Explain the concept of encapsulation in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 2 for: Explain the concept of closures in Python with an example.",
      "Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?"
    ]
  },
  {
    "question": "How would you implement a breadth-first search algorithm?",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: How would you implement a breadth-first search algorithm?",
    "incorrect_answers": [
      "Python uses automatic memory management with a private heap to store objects and data structures. It has a built-in garbage collector that reclaims memory from objects that are no longer referenced. Python uses reference counting as its primary memory management technique, along with cycle-detecting garbage collection to handle circular references.",
      "Sample answer 3 for: What are Python decorators and how do they work?",
      "Sample answer 1 for: Explain the concept of hash tables and their implementation in Python."
    ]
  },
  {
    "question": "Explain the concept of hash tables and their implementation in Python.",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: Explain the concept of hash tables and their implementation in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of recursion with an example.",
      "Sample answer 2 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 3 for: Explain the concept of recursion with an example."
    ]
  },
  {
    "question": "How would you implement a graph data structure in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: How would you implement a graph data structure in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: How would you implement a linked list in Python?",
      "Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 1 for: Explain the concept of closures in Python with an example."
    ]
  },
  {
    "question": "Explain the concept of duck typing in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: Explain the concept of duck typing in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 2 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 2 for: Explain the concept of list comprehensions in Python."
    ]
  },
  {
    "question": "Explain the difference between '==' and 'is' operators in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: Explain the difference between '==' and 'is' operators in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 1 for: What is the difference between a greedy algorithm and dynamic programming?"
    ]
  },
  {
    "question": "How would you find the longest common subsequence of two strings?",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: How would you find the longest common subsequence of two strings?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search.",
      "Sample answer 3 for: How does exception handling work in Python?",
      "Sample answer 2 for: How would you implement a linked list in Python?"
    ]
  },
  {
    "question": "What are Python generators and how do they differ from regular functions?",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: What are Python generators and how do they differ from regular functions?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 3 for: Explain the asyncio module in Python and how it works.",
      "Sample answer 2 for: Explain the concept of binary search and its time complexity."
    ]
  },
  {
    "question": "How would you detect a cycle in a linked list?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: How would you detect a cycle in a linked list?",
    "incorrect_answers": [
      "Sample answer 3 for: How would you implement a linked list in Python?",
      "Sample answer 2 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?"
    ]
  },
  {
    "question": "What is the difference between a greedy algorithm and dynamic programming?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?",
    "incorrect_answers": [
      "Sample answer 2 for: What is the difference between a stack and a queue?",
      "Sample answer 3 for: Explain the asyncio module in Python and how it works.",
      "Sample answer 1 for: Explain the concept of duck typing in Python."
    ]
  },
  {
    "question": "What is the __init__ method in Python and how is it used?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What is the __init__ method in Python and how is it used?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of coroutines in Python.",
      "Lists are mutable collections that can be modified after creation, while tuples are immutable. Lists are defined using square brackets [], while tuples use parentheses (). Tuples are more memory-efficient and can be used as dictionary keys (since they're immutable), which lists cannot.",
      "Sample answer 1 for: What is method overriding and how does it work in Python?"
    ]
  },
  {
    "question": "How would you find the longest common subsequence of two strings?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: How would you find the longest common subsequence of two strings?",
    "incorrect_answers": [
      "Sample answer 3 for: What is a heap data structure and when would you use it?",
      "Sample answer 3 for: Explain the concept of backtracking with an example.",
      "Sample answer 1 for: Explain the concept of composition vs inheritance with examples."
    ]
  },
  {
    "question": "What are Python context managers and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: What are Python context managers and how do they work?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the asyncio module in Python and how it works.",
      "Sample answer 1 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 3 for: Explain the concept of hash tables and their implementation in Python."
    ]
  },
  {
    "question": "Explain the quicksort algorithm and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: Explain the quicksort algorithm and its time complexity.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 1 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search."
    ]
  },
  {
    "question": "What are Python generators and how do they differ from regular functions?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: What are Python generators and how do they differ from regular functions?",
    "incorrect_answers": [
      "Sample answer 3 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 1 for: What are abstract classes and interfaces in Python?",
      "Sample answer 2 for: What is polymorphism and how is it implemented in Python?"
    ]
  },
  {
    "question": "Explain the concept of list comprehensions in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: Explain the concept of list comprehensions in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: How does exception handling work in Python?",
      "Sample answer 3 for: Explain the asyncio module in Python and how it works.",
      "Sample answer 2 for: What is method overriding and how does it work in Python?"
    ]
  },
  {
    "question": "What is the traveling salesman problem and how would you approach it?",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: What is the traveling salesman problem and how would you approach it?",
    "incorrect_answers": [
      "Sample answer 1 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 1 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 3 for: Explain the concept of hash tables and their implementation in Python."
    ]
  },
  {
    "question": "Explain the concept of list comprehensions in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: Explain the concept of list comprehensions in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 3 for: What is a heap data structure and when would you use it?",
      "Sample answer 3 for: Explain the concept of inheritance in Python with an example."
    ]
  },
  {
    "question": "How would you implement a breadth-first search algorithm?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you implement a breadth-first search algorithm?",
    "incorrect_answers": [
      "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 2 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 2 for: Explain the concept of encapsulation in Python."
    ]
  },
  {
    "question": "What is method overriding and how does it work in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What is method overriding and how does it work in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of dynamic programming with an example.",
      "Sample answer 1 for: Explain the concept of backtracking with an example.",
      "Sample answer 3 for: Explain the concept of monkey patching in Python and when it might be useful."
    ]
  },
  {
    "question": "How would you find the longest common subsequence of two strings?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: How would you find the longest common subsequence of two strings?",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 1 for: Explain the concept of coroutines in Python.",
      "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python."
    ]
  },
  {
    "question": "How would you implement a linked list in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: How would you implement a linked list in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 1 for: Explain the concept of dynamic programming with an example.",
      "Sample answer 3 for: Explain the difference between class methods, static methods, and instance methods."
    ]
  },
  {
    "question": "How would you find the longest common subsequence of two strings?",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: How would you find the longest common subsequence of two strings?",
    "incorrect_answers": [
      "Python uses automatic memory management with a private heap to store objects and data structures. It has a built-in garbage collector that reclaims memory from objects that are no longer referenced. Python uses reference counting as its primary memory management technique, along with cycle-detecting garbage collection to handle circular references.",
      "Sample answer 1 for: Explain the concept of coroutines in Python.",
      "Sample answer 3 for: What are metaclasses in Python and how would you use them?"
    ]
  },
  {
    "question": "Explain the difference between '==' and 'is' operators in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: Explain the difference between '==' and 'is' operators in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 1 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 1 for: What are binary trees and how would you implement one in Python?"
    ]
  },
  {
    "question": "What is the traveling salesman problem and how would you approach it?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: What is the traveling salesman problem and how would you approach it?",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python decorators and how do they work?",
      "Sample answer 2 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 2 for: What are Python decorators and how do they work?"
    ]
  },
  {
    "question": "Explain the concept of backtracking with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: Explain the concept of backtracking with an example.",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python's magic methods and how would you use them?",
      "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 3 for: What are Python decorators and how do they work?"
    ]
  },
  {
    "question": "Explain the concept of backtracking with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: Explain the concept of backtracking with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python context managers and how do they work?",
      "Sample answer 2 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 1 for: What is method overriding and how does it work in Python?"
    ]
  },
  {
    "question": "How does exception handling work in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: How does exception handling work in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python decorators and how do they work?",
      "Sample answer 3 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 1 for: What are Python's magic methods and how would you use them?"
    ]
  },
  {
    "question": "What is a heap data structure and when would you use it?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: What is a heap data structure and when would you use it?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 2 for: Explain the difference between depth-first search and breadth-first search.",
      "Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?"
    ]
  },
  {
    "question": "What is the Global Interpreter Lock (GIL) in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 3 for: What are abstract classes and interfaces in Python?",
      "Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?"
    ]
  },
  {
    "question": "What are binary trees and how would you implement one in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: What are binary trees and how would you implement one in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 1 for: Explain the difference between class methods, static methods, and instance methods.",
      "Sample answer 1 for: Explain the concept of closures in Python with an example."
    ]
  },
  {
    "question": "What are Python decorators and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What are Python decorators and how do they work?",
    "incorrect_answers": [
      "Lists are mutable collections that can be modified after creation, while tuples are immutable. Lists are defined using square brackets [], while tuples use parentheses (). Tuples are more memory-efficient and can be used as dictionary keys (since they're immutable), which lists cannot.",
      "Sample answer 2 for: Explain the asyncio module in Python and how it works.",
      "Sample answer 1 for: What are binary trees and how would you implement one in Python?"
    ]
  },
  {
    "question": "Explain the difference between depth-first search and breadth-first search.",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search.",
    "incorrect_answers": [
      "Sample answer 1 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 1 for: What is method overriding and how does it work in Python?",
      "Sample answer 3 for: Explain the concept of backtracking with an example."
    ]
  },
  {
    "question": "Explain the difference between '==' and 'is' operators in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: Explain the difference between '==' and 'is' operators in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 3 for: What is the traveling salesman problem and how would you approach it?",
      "Python uses automatic memory management with a private heap to store objects and data structures. It has a built-in garbage collector that reclaims memory from objects that are no longer referenced. Python uses reference counting as its primary memory management technique, along with cycle-detecting garbage collection to handle circular references."
    ]
  },
  {
    "question": "Explain the concept of binary search and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: Explain the concept of binary search and its time complexity.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of recursion with an example.",
      "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 3 for: What are Python's data model and how does it relate to special methods?"
    ]
  },
  {
    "question": "Explain the concept of backtracking with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: Explain the concept of backtracking with an example.",
    "incorrect_answers": [
      "Sample answer 3 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 2 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 1 for: Explain the concept of coroutines in Python."
    ]
  },
  {
    "question": "What is the difference between a list and a tuple in Python?",
    "category": "python_basics",
    "correct_answer": "Lists are mutable collections that can be modified after creation, while tuples are immutable. Lists are defined using square brackets [], while tuples use parentheses (). Tuples are more memory-efficient and can be used as dictionary keys (since they're immutable), which lists cannot.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 2 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?"
    ]
  },
  {
    "question": "Explain the concept of backtracking with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: Explain the concept of backtracking with an example.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 2 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?"
    ]
  },
  {
    "question": "What are binary trees and how would you implement one in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: What are binary trees and how would you implement one in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of backtracking with an example.",
      "Sample answer 3 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 1 for: What are Python type hints and how do they improve code quality?"
    ]
  },
  {
    "question": "What is the __init__ method in Python and how is it used?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What is the __init__ method in Python and how is it used?",
    "incorrect_answers": [
      "Sample answer 3 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 3 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?"
    ]
  },
  {
    "question": "What is the difference between multiprocessing and multithreading in Python?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 3 for: Explain the concept of backtracking with an example.",
      "Python uses automatic memory management with a private heap to store objects and data structures. It has a built-in garbage collector that reclaims memory from objects that are no longer referenced. Python uses reference counting as its primary memory management technique, along with cycle-detecting garbage collection to handle circular references."
    ]
  },
  {
    "question": "Explain the concept of list comprehensions in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: Explain the concept of list comprehensions in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 1 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 2 for: What are abstract classes and interfaces in Python?"
    ]
  },
  {
    "question": "What is the Global Interpreter Lock (GIL) in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 3 for: Explain the concept of backtracking with an example.",
      "Sample answer 2 for: How would you implement a linked list in Python?"
    ]
  },
  {
    "question": "What are Python type hints and how do they improve code quality?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What are Python type hints and how do they improve code quality?",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python context managers and how do they work?",
      "Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 3 for: Explain the concept of binary search and its time complexity."
    ]
  },
  {
    "question": "What is the difference between a stack and a queue?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: What is the difference between a stack and a queue?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 1 for: Explain the difference between class methods, static methods, and instance methods.",
      "Sample answer 3 for: Explain the asyncio module in Python and how it works."
    ]
  },
  {
    "question": "What are Python descriptors and how do they work?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: What are Python descriptors and how do they work?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 3 for: Explain the concept of backtracking with an example.",
      "Sample answer 3 for: What are Python decorators and how do they work?"
    ]
  },
  {
    "question": "How does exception handling work in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: How does exception handling work in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 1 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 2 for: What is polymorphism and how is it implemented in Python?"
    ]
  },
  {
    "question": "How would you implement a linked list in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: How would you implement a linked list in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 3 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 2 for: How would you find the longest common subsequence of two strings?"
    ]
  },
  {
    "question": "Explain the concept of metaprogramming in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the concept of metaprogramming in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search.",
      "Sample answer 3 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 3 for: Explain the concept of composition vs inheritance with examples."
    ]
  },
  {
    "question": "Explain the difference between class methods, static methods, and instance methods.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: Explain the difference between class methods, static methods, and instance methods.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 3 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 3 for: Explain the concept of closures in Python with an example."
    ]
  },
  {
    "question": "How would you detect a cycle in a linked list?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you detect a cycle in a linked list?",
    "incorrect_answers": [
      "Sample answer 2 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 3 for: How would you implement a linked list in Python?"
    ]
  },
  {
    "question": "Explain the concept of coroutines in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the concept of coroutines in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of dynamic programming with an example.",
      "Sample answer 2 for: What are Python decorators and how do they work?",
      "Sample answer 3 for: Explain the concept of duck typing in Python."
    ]
  },
  {
    "question": "Explain the concept of inheritance in Python with an example.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the concept of inheritance in Python with an example.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of dynamic programming with an example.",
      "Sample answer 1 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 2 for: Explain the concept of monkey patching in Python and when it might be useful."
    ]
  },
  {
    "question": "Explain the concept of binary search and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: Explain the concept of binary search and its time complexity.",
    "incorrect_answers": [
      "Sample answer 1 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 3 for: Explain the asyncio module in Python and how it works.",
      "Sample answer 1 for: What are binary trees and how would you implement one in Python?"
    ]
  },
  {
    "question": "What is the __init__ method in Python and how is it used?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What is the __init__ method in Python and how is it used?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of encapsulation in Python.",
      "Sample answer 3 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 1 for: What are Python generators and how do they differ from regular functions?"
    ]
  },
  {
    "question": "Explain the quicksort algorithm and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: Explain the quicksort algorithm and its time complexity.",
    "incorrect_answers": [
      "Sample answer 3 for: How would you detect a cycle in a linked list?",
      "Sample answer 3 for: What are Python decorators and how do they work?",
      "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?"
    ]
  },
  {
    "question": "How does exception handling work in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: How does exception handling work in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the quicksort algorithm and its time complexity.",
      "The main difference is mutability: lists can be changed after creation (mutable) while tuples cannot (immutable). Lists use square brackets and support operations like append() and extend(), while tuples use parentheses and don't allow modification after creation. Tuples are more memory efficient and slightly faster than lists.",
      "Sample answer 2 for: How would you find the longest common subsequence of two strings?"
    ]
  },
  {
    "question": "How would you implement a breadth-first search algorithm?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you implement a breadth-first search algorithm?",
    "incorrect_answers": [
      "Sample answer 2 for: How does exception handling work in Python?",
      "Sample answer 2 for: How would you implement a linked list in Python?",
      "Sample answer 3 for: What are abstract classes and interfaces in Python?"
    ]
  },
  {
    "question": "What is method overriding and how does it work in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: What is method overriding and how does it work in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 3 for: Explain the difference between depth-first search and breadth-first search.",
      "Sample answer 2 for: How would you detect a cycle in a linked list?"
    ]
  },
  {
    "question": "Explain the concept of duck typing in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: Explain the concept of duck typing in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 1 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries."
    ]
  },
  {
    "question": "How would you implement a breadth-first search algorithm?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you implement a breadth-first search algorithm?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of duck typing in Python.",
      "Sample answer 3 for: Explain the difference between class methods, static methods, and instance methods.",
      "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?"
    ]
  },
  {
    "question": "What are abstract classes and interfaces in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What are abstract classes and interfaces in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of backtracking with an example.",
      "Sample answer 2 for: How does exception handling work in Python?",
      "Sample answer 2 for: What is the traveling salesman problem and how would you approach it?"
    ]
  },
  {
    "question": "Explain the concept of recursion with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: Explain the concept of recursion with an example.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 3 for: What are Python descriptors and how do they work?",
      "Sample answer 2 for: What are Python decorators and how do they work?"
    ]
  },
  {
    "question": "How would you implement a graph data structure in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: How would you implement a graph data structure in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 3 for: Explain the concept of recursion with an example.",
      "Sample answer 2 for: What are Python context managers and how do they work?"
    ]
  },
  {
    "question": "What is polymorphism and how is it implemented in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What is polymorphism and how is it implemented in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of encapsulation in Python.",
      "Sample answer 1 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 3 for: What is method overriding and how does it work in Python?"
    ]
  },
  {
    "question": "What are the advantages and disadvantages of using arrays vs linked lists?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 1 for: What is the difference between a stack and a queue?",
      "Sample answer 2 for: How would you find the longest common subsequence of two strings?"
    ]
  },
  {
    "question": "What are Python generators and how do they differ from regular functions?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: What are Python generators and how do they differ from regular functions?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of coroutines in Python.",
      "Sample answer 2 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?"
    ]
  },
  {
    "question": "How would you detect a cycle in a linked list?",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: How would you detect a cycle in a linked list?",
    "incorrect_answers": [
      "Sample answer 3 for: What is a heap data structure and when would you use it?",
      "Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 1 for: Explain the concept of metaprogramming in Python."
    ]
  },
  {
    "question": "Explain the concept of inheritance in Python with an example.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: Explain the concept of inheritance in Python with an example.",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 2 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 3 for: How would you find the longest common subsequence of two strings?"
    ]
  },
  {
    "question": "Explain the concept of duck typing in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: Explain the concept of duck typing in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the asyncio module in Python and how it works.",
      "Sample answer 1 for: How would you detect a cycle in a linked list?",
      "Sample answer 2 for: Explain the difference between depth-first search and breadth-first search."
    ]
  },
  {
    "question": "Explain the asyncio module in Python and how it works.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: Explain the asyncio module in Python and how it works.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 2 for: Explain the difference between class methods, static methods, and instance methods.",
      "Sample answer 2 for: What is the traveling salesman problem and how would you approach it?"
    ]
  },
  {
    "question": "What is the difference between multiprocessing and multithreading in Python?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 2 for: Explain the difference between '==' and 'is' operators in Python.",
      "Sample answer 1 for: Explain the concept of encapsulation in Python."
    ]
  },
  {
    "question": "How would you detect a cycle in a linked list?",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: How would you detect a cycle in a linked list?",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 2 for: What is a heap data structure and when would you use it?",
      "Sample answer 1 for: What are metaclasses in Python and how would you use them?"
    ]
  },
  {
    "question": "What are binary trees and how would you implement one in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: What are binary trees and how would you implement one in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of closures in Python with an example.",
      "Sample answer 3 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 1 for: What is the difference between a stack and a queue?"
    ]
  },
  {
    "question": "Explain the difference between class methods, static methods, and instance methods.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: Explain the difference between class methods, static methods, and instance methods.",
    "incorrect_answers": [
      "Sample answer 3 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 1 for: Explain the concept of backtracking with an example.",
      "Sample answer 2 for: Explain the concept of hash tables and their implementation in Python."
    ]
  },
  {
    "question": "What is polymorphism and how is it implemented in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What is polymorphism and how is it implemented in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 3 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 3 for: How would you implement a graph data structure in Python?"
    ]
  },
  {
    "question": "Explain the time complexity of common operations in Python dictionaries.",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: Explain the time complexity of common operations in Python dictionaries.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of backtracking with an example.",
      "Sample answer 3 for: How would you implement a graph data structure in Python?",
      "Sample answer 1 for: Explain the concept of closures in Python with an example."
    ]
  },
  {
    "question": "What is the difference between a greedy algorithm and dynamic programming?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?",
    "incorrect_answers": [
      "Sample answer 3 for: How would you detect a cycle in a linked list?",
      "Sample answer 3 for: How would you detect a cycle in a linked list?",
      "Sample answer 3 for: How would you detect a cycle in a linked list?"
    ]
  },
  {
    "question": "What are metaclasses in Python and how would you use them?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What are metaclasses in Python and how would you use them?",
    "incorrect_answers": [
      "Sample answer 3 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 1 for: How would you implement a graph data structure in Python?",
      "Sample answer 1 for: Explain the concept of binary search and its time complexity."
    ]
  },
  {
    "question": "Explain the difference between depth-first search and breadth-first search.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the difference between depth-first search and breadth-first search.",
    "incorrect_answers": [
      "Sample answer 3 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 1 for: What are Python descriptors and how do they work?",
      "Sample answer 3 for: Explain the concept of inheritance in Python with an example."
    ]
  },
  {
    "question": "Explain the time complexity of common operations in Python dictionaries.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 1 for: What are Python context managers and how do they work?",
      "Sample answer 3 for: What is method overriding and how does it work in Python?"
    ]
  },
  {
    "question": "What are metaclasses in Python and how would you use them?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: What are metaclasses in Python and how would you use them?",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python's magic methods and how would you use them?",
      "Sample answer 1 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 2 for: What is the __init__ method in Python and how is it used?"
    ]
  },
  {
    "question": "Explain the concept of hash tables and their implementation in Python.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the concept of hash tables and their implementation in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 1 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?"
    ]
  },
  {
    "question": "Explain how Python handles memory management.",
    "category": "python_basics",
    "correct_answer": "Python uses automatic memory management with a private heap to store objects and data structures. It has a built-in garbage collector that reclaims memory from objects that are no longer referenced. Python uses reference counting as its primary memory management technique, along with cycle-detecting garbage collection to handle circular references.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 2 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 2 for: Explain the concept of coroutines in Python."
    ]
  },
  {
    "question": "What is the difference between a stack and a queue?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: What is the difference between a stack and a queue?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the asyncio module in Python and how it works.",
      "Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 3 for: What is the difference between a greedy algorithm and dynamic programming?"
    ]
  },
  {
    "question": "What is polymorphism and how is it implemented in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: What is polymorphism and how is it implemented in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of recursion with an example.",
      "Sample answer 2 for: What is method overriding and how does it work in Python?",
      "Sample answer 1 for: Explain the concept of binary search and its time complexity."
    ]
  },
  {
    "question": "Explain the concept of duck typing in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: Explain the concept of duck typing in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the difference between '==' and 'is' operators in Python.",
      "Sample answer 3 for: What is method overriding and how does it work in Python?",
      "Sample answer 3 for: Explain the concept of closures in Python with an example."
    ]
  },
  {
    "question": "What is the difference between a stack and a queue?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: What is the difference between a stack and a queue?",
    "incorrect_answers": [
      "Sample answer 3 for: What are abstract classes and interfaces in Python?",
      "Sample answer 3 for: What are Python descriptors and how do they work?",
      "Sample answer 2 for: How would you implement a graph data structure in Python?"
    ]
  },
  {
    "question": "What are Python's data model and how does it relate to special methods?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: What are Python's data model and how does it relate to special methods?",
    "incorrect_answers": [
      "Sample answer 3 for: How would you implement a linked list in Python?",
      "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search.",
      "Sample answer 3 for: Explain the difference between '==' and 'is' operators in Python."
    ]
  },
  {
    "question": "Explain the concept of monkey patching in Python and when it might be useful.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the concept of monkey patching in Python and when it might be useful.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of coroutines in Python.",
      "Sample answer 2 for: Explain the concept of inheritance in Python with an example.",
      "The main difference is mutability: lists can be changed after creation (mutable) while tuples cannot (immutable). Lists use square brackets and support operations like append() and extend(), while tuples use parentheses and don't allow modification after creation. Tuples are more memory efficient and slightly faster than lists."
    ]
  },
  {
    "question": "Explain the concept of binary search and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: Explain the concept of binary search and its time complexity.",
    "incorrect_answers": [
      "Sample answer 2 for: What is the difference between a stack and a queue?",
      "The main difference is mutability: lists can be changed after creation (mutable) while tuples cannot (immutable). Lists use square brackets and support operations like append() and extend(), while tuples use parentheses and don't allow modification after creation. Tuples are more memory efficient and slightly faster than lists.",
      "Sample answer 3 for: What is a heap data structure and when would you use it?"
    ]
  },
  {
    "question": "What are binary trees and how would you implement one in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: What are binary trees and how would you implement one in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: What are metaclasses in Python and how would you use them?",
      "Python manages memory through automatic garbage collection. It uses reference counting to track how many references point to an object, and when the count reaches zero, the memory is freed. Python also has a cycle detector to handle circular references. All Python objects are stored in a private heap, and the memory manager allocates heap space for objects.",
      "Sample answer 3 for: Explain the concept of inheritance in Python with an example."
    ]
  },
  {
    "question": "Explain the difference between depth-first search and breadth-first search.",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search.",
    "incorrect_answers": [
      "Sample answer 1 for: What are abstract classes and interfaces in Python?",
      "Sample answer 1 for: How does exception handling work in Python?",
      "Sample answer 1 for: Explain the difference between class methods, static methods, and instance methods."
    ]
  },
  {
    "question": "What are Python's data model and how does it relate to special methods?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What are Python's data model and how does it relate to special methods?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of coroutines in Python.",
      "Sample answer 2 for: Explain the concept of recursion with an example.",
      "Sample answer 2 for: What is the __init__ method in Python and how is it used?"
    ]
  },
  {
    "question": "What are abstract classes and interfaces in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What are abstract classes and interfaces in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python context managers and how do they work?",
      "Sample answer 1 for: What are Python context managers and how do they work?",
      "Sample answer 2 for: What is polymorphism and how is it implemented in Python?"
    ]
  },
  {
    "question": "Explain the concept of monkey patching in Python and when it might be useful.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful.",
    "incorrect_answers": [
      "Python uses automatic memory management through reference counting and garbage collection. When objects are created, Python allocates memory from a private heap. It tracks references to objects, and when an object's reference count drops to zero, the memory is reclaimed. Python also has a cyclic garbage collector to detect and collect objects in reference cycles that would otherwise not be collected.",
      "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 3 for: Explain the concept of list comprehensions in Python."
    ]
  },
  {
    "question": "How would you find the kth largest element in an unsorted array?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you find the kth largest element in an unsorted array?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 1 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 2 for: What are Python type hints and how do they improve code quality?"
    ]
  },
  {
    "question": "What is polymorphism and how is it implemented in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What is polymorphism and how is it implemented in Python?",
    "incorrect_answers": [
      "Python uses automatic memory management through reference counting and garbage collection. When objects are created, Python allocates memory from a private heap. It tracks references to objects, and when an object's reference count drops to zero, the memory is reclaimed. Python also has a cyclic garbage collector to detect and collect objects in reference cycles that would otherwise not be collected.",
      "Sample answer 2 for: Explain the concept of coroutines in Python.",
      "Sample answer 1 for: Explain the concept of binary search and its time complexity."
    ]
  },
  {
    "question": "What are Python descriptors and how do they work?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: What are Python descriptors and how do they work?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the difference between '==' and 'is' operators in Python.",
      "Sample answer 3 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 3 for: What are Python context managers and how do they work?"
    ]
  },
  {
    "question": "How would you implement a graph data structure in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: How would you implement a graph data structure in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Python uses automatic memory management through reference counting and garbage collection. When objects are created, Python allocates memory from a private heap. It tracks references to objects, and when an object's reference count drops to zero, the memory is reclaimed. Python also has a cyclic garbage collector to detect and collect objects in reference cycles that would otherwise not be collected."
    ]
  },
  {
    "question": "How does exception handling work in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: How does exception handling work in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 1 for: What is polymorphism and how is it implemented in Python?"
    ]
  },
  {
    "question": "Explain the concept of composition vs inheritance with examples.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: Explain the concept of composition vs inheritance with examples.",
    "incorrect_answers": [
      "Sample answer 3 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 1 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 2 for: Explain the concept of inheritance in Python with an example."
    ]
  },
  {
    "question": "What is polymorphism and how is it implemented in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: What is polymorphism and how is it implemented in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 3 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 2 for: How would you implement a graph data structure in Python?"
    ]
  },
  {
    "question": "How would you implement a breadth-first search algorithm?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you implement a breadth-first search algorithm?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of recursion with an example.",
      "Sample answer 1 for: Explain the concept of closures in Python with an example.",
      "Sample answer 3 for: Explain the concept of composition vs inheritance with examples."
    ]
  },
  {
    "question": "How does exception handling work in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: How does exception handling work in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: What are abstract classes and interfaces in Python?",
      "Sample answer 3 for: What are abstract classes and interfaces in Python?",
      "Sample answer 2 for: Explain the concept of coroutines in Python."
    ]
  },
  {
    "question": "What is a heap data structure and when would you use it?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: What is a heap data structure and when would you use it?",
    "incorrect_answers": [
      "Sample answer 1 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 3 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 1 for: How would you implement a breadth-first search algorithm?"
    ]
  },
  {
    "question": "What is method overriding and how does it work in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What is method overriding and how does it work in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 2 for: How does exception handling work in Python?",
      "Sample answer 2 for: What are abstract classes and interfaces in Python?"
    ]
  },
  {
    "question": "How would you implement a breadth-first search algorithm?",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: How would you implement a breadth-first search algorithm?",
    "incorrect_answers": [
      "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 3 for: How does exception handling work in Python?",
      "Sample answer 2 for: What are the advantages and disadvantages of using arrays vs linked lists?"
    ]
  },
  {
    "question": "How would you implement a graph data structure in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: How would you implement a graph data structure in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python's magic methods and how would you use them?",
      "Sample answer 1 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 1 for: Explain the concept of duck typing in Python."
    ]
  },
  {
    "question": "Explain the concept of recursion with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: Explain the concept of recursion with an example.",
    "incorrect_answers": [
      "Python uses automatic memory management with a private heap to store objects and data structures. It has a built-in garbage collector that reclaims memory from objects that are no longer referenced. Python uses reference counting as its primary memory management technique, along with cycle-detecting garbage collection to handle circular references.",
      "Sample answer 3 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 1 for: How would you detect a cycle in a linked list?"
    ]
  },
  {
    "question": "What are Python context managers and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: What are Python context managers and how do they work?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 2 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 3 for: What is method overriding and how does it work in Python?"
    ]
  },
  {
    "question": "What are Python descriptors and how do they work?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: What are Python descriptors and how do they work?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of closures in Python with an example.",
      "Sample answer 1 for: Explain the concept of dynamic programming with an example.",
      "Sample answer 1 for: What are Python decorators and how do they work?"
    ]
  },
  {
    "question": "Explain the concept of multiple inheritance and the method resolution order in Python.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
    "incorrect_answers": [
      "Python manages memory through automatic garbage collection. It uses reference counting to track how many references point to an object, and when the count reaches zero, the memory is freed. Python also has a cycle detector to handle circular references. All Python objects are stored in a private heap, and the memory manager allocates heap space for objects.",
      "Sample answer 3 for: Explain the concept of encapsulation in Python.",
      "Sample answer 1 for: Explain the concept of recursion with an example."
    ]
  },
  {
    "question": "Explain the concept of metaprogramming in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the concept of metaprogramming in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: What is the difference between a stack and a queue?",
      "Sample answer 3 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 2 for: Explain the concept of inheritance in Python with an example."
    ]
  },
  {
    "question": "Explain the concept of multiple inheritance and the method resolution order in Python.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 1 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 2 for: Explain the quicksort algorithm and its time complexity."
    ]
  },
  {
    "question": "Explain the concept of inheritance in Python with an example.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: Explain the concept of inheritance in Python with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 1 for: Explain the difference between class methods, static methods, and instance methods.",
      "Sample answer 2 for: Explain the concept of dynamic programming with an example."
    ]
  },
  {
    "question": "What is the __init__ method in Python and how is it used?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: What is the __init__ method in Python and how is it used?",
    "incorrect_answers": [
      "Python manages memory through automatic garbage collection. It uses reference counting to track how many references point to an object, and when the count reaches zero, the memory is freed. Python also has a cycle detector to handle circular references. All Python objects are stored in a private heap, and the memory manager allocates heap space for objects.",
      "Sample answer 1 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 2 for: Explain the concept of duck typing in Python."
    ]
  },
  {
    "question": "Explain the asyncio module in Python and how it works.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the asyncio module in Python and how it works.",
    "incorrect_answers": [
      "Sample answer 3 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 3 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 2 for: What are binary trees and how would you implement one in Python?"
    ]
  },
  {
    "question": "What is the difference between a stack and a queue?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: What is the difference between a stack and a queue?",
    "incorrect_answers": [
      "The main difference is mutability: lists can be changed after creation (mutable) while tuples cannot (immutable). Lists use square brackets and support operations like append() and extend(), while tuples use parentheses and don't allow modification after creation. Tuples are more memory efficient and slightly faster than lists.",
      "Sample answer 3 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 2 for: Explain the quicksort algorithm and its time complexity."
    ]
  },
  {
    "question": "Explain the concept of recursion with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: Explain the concept of recursion with an example.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 3 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 1 for: How would you find the longest common subsequence of two strings?"
    ]
  },
  {
    "question": "How would you find the longest common subsequence of two strings?",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: How would you find the longest common subsequence of two strings?",
    "incorrect_answers": [
      "Sample answer 3 for: What are abstract classes and interfaces in Python?",
      "Sample answer 2 for: What are Python context managers and how do they work?",
      "Sample answer 2 for: How would you find the kth largest element in an unsorted array?"
    ]
  },
  {
    "question": "Explain the concept of list comprehensions in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: Explain the concept of list comprehensions in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 2 for: What are Python context managers and how do they work?",
      "Sample answer 1 for: Explain the concept of duck typing in Python."
    ]
  },
  {
    "question": "Explain how Python handles memory management.",
    "category": "python_basics",
    "correct_answer": "Python uses automatic memory management with a private heap to store objects and data structures. It has a built-in garbage collector that reclaims memory from objects that are no longer referenced. Python uses reference counting as its primary memory management technique, along with cycle-detecting garbage collection to handle circular references.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the difference between depth-first search and breadth-first search.",
      "Sample answer 2 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 2 for: Explain the concept of closures in Python with an example."
    ]
  },
  {
    "question": "How would you implement a graph data structure in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: How would you implement a graph data structure in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 3 for: What are abstract classes and interfaces in Python?",
      "Sample answer 3 for: What are Python context managers and how do they work?"
    ]
  },
  {
    "question": "What are Python's magic methods and how would you use them?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: What are Python's magic methods and how would you use them?",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 2 for: Explain the concept of recursion with an example.",
      "Sample answer 2 for: Explain the concept of recursion with an example."
    ]
  },
  {
    "question": "What are Python generators and how do they differ from regular functions?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What are Python generators and how do they differ from regular functions?",
    "incorrect_answers": [
      "Sample answer 2 for: How would you detect a cycle in a linked list?",
      "Sample answer 3 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 1 for: Explain the concept of inheritance in Python with an example."
    ]
  },
  {
    "question": "How does exception handling work in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: How does exception handling work in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search.",
      "Sample answer 1 for: Explain the concept of backtracking with an example."
    ]
  },
  {
    "question": "Explain the concept of closures in Python with an example.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: Explain the concept of closures in Python with an example.",
    "incorrect_answers": [
      "Sample answer 3 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 1 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 3 for: What are Python descriptors and how do they work?"
    ]
  },
  {
    "question": "What is the __init__ method in Python and how is it used?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What is the __init__ method in Python and how is it used?",
    "incorrect_answers": [
      "Sample answer 1 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 1 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 1 for: Explain the concept of closures in Python with an example."
    ]
  },
  {
    "question": "Explain the concept of monkey patching in Python and when it might be useful.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful.",
    "incorrect_answers": [
      "Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 1 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 2 for: How would you find the kth largest element in an unsorted array?"
    ]
  },
  {
    "question": "How does exception handling work in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: How does exception handling work in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: What is a heap data structure and when would you use it?",
      "Sample answer 2 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 3 for: What are Python generators and how do they differ from regular functions?"
    ]
  },
  {
    "question": "What are Python descriptors and how do they work?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What are Python descriptors and how do they work?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 2 for: What are abstract classes and interfaces in Python?",
      "Python uses automatic memory management with a private heap to store objects and data structures. It has a built-in garbage collector that reclaims memory from objects that are no longer referenced. Python uses reference counting as its primary memory management technique, along with cycle-detecting garbage collection to handle circular references."
    ]
  },
  {
    "question": "Explain the concept of multiple inheritance and the method resolution order in Python.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: How does exception handling work in Python?",
      "Sample answer 3 for: Explain the difference between depth-first search and breadth-first search.",
      "Sample answer 1 for: Explain the difference between class methods, static methods, and instance methods."
    ]
  },
  {
    "question": "How would you detect a cycle in a linked list?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: How would you detect a cycle in a linked list?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of backtracking with an example.",
      "Sample answer 3 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 3 for: What are abstract classes and interfaces in Python?"
    ]
  },
  {
    "question": "Explain the concept of duck typing in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: Explain the concept of duck typing in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of closures in Python with an example.",
      "Sample answer 3 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 1 for: What is the Global Interpreter Lock (GIL) in Python?"
    ]
  },
  {
    "question": "What are Python decorators and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What are Python decorators and how do they work?",
    "incorrect_answers": [
      "Sample answer 3 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 1 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 3 for: Explain the difference between depth-first search and breadth-first search."
    ]
  },
  {
    "question": "What is method overriding and how does it work in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: What is method overriding and how does it work in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python's magic methods and how would you use them?",
      "Sample answer 1 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 3 for: Explain the concept of closures in Python with an example."
    ]
  },
  {
    "question": "What are binary trees and how would you implement one in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: What are binary trees and how would you implement one in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of closures in Python with an example.",
      "Sample answer 1 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 1 for: How would you implement a graph data structure in Python?"
    ]
  },
  {
    "question": "Explain the quicksort algorithm and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: Explain the quicksort algorithm and its time complexity.",
    "incorrect_answers": [
      "Sample answer 2 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 3 for: Explain the concept of inheritance in Python with an example.",
      "Python manages memory through automatic garbage collection. It uses reference counting to track how many references point to an object, and when the count reaches zero, the memory is freed. Python also has a cycle detector to handle circular references. All Python objects are stored in a private heap, and the memory manager allocates heap space for objects."
    ]
  },
  {
    "question": "What are Python's magic methods and how would you use them?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What are Python's magic methods and how would you use them?",
    "incorrect_answers": [
      "Sample answer 1 for: How would you implement a graph data structure in Python?",
      "Sample answer 1 for: Explain the concept of encapsulation in Python.",
      "Sample answer 2 for: What is a heap data structure and when would you use it?"
    ]
  },
  {
    "question": "What is method overriding and how does it work in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What is method overriding and how does it work in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python's magic methods and how would you use them?",
      "Sample answer 2 for: How would you implement a graph data structure in Python?",
      "Sample answer 2 for: How would you implement a linked list in Python?"
    ]
  },
  {
    "question": "Explain the difference between class methods, static methods, and instance methods.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: Explain the difference between class methods, static methods, and instance methods.",
    "incorrect_answers": [
      "Sample answer 1 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 1 for: Explain the concept of recursion with an example.",
      "Sample answer 3 for: Explain the concept of coroutines in Python."
    ]
  },
  {
    "question": "What are Python context managers and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What are Python context managers and how do they work?",
    "incorrect_answers": [
      "Sample answer 2 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 1 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 1 for: Explain the concept of metaprogramming in Python."
    ]
  },
  {
    "question": "How does exception handling work in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: How does exception handling work in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Lists are mutable, meaning they can be modified after creation, while tuples are immutable. Lists use square brackets [] and tuples use parentheses (). Lists generally consume more memory than tuples and are slower for iteration.",
      "Sample answer 1 for: What are abstract classes and interfaces in Python?"
    ]
  },
  {
    "question": "Explain the concept of coroutines in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the concept of coroutines in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 1 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 3 for: What are binary trees and how would you implement one in Python?"
    ]
  },
  {
    "question": "Explain the concept of metaprogramming in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the concept of metaprogramming in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 1 for: Explain the concept of closures in Python with an example.",
      "Sample answer 2 for: Explain the concept of monkey patching in Python and when it might be useful."
    ]
  },
  {
    "question": "Explain the difference between depth-first search and breadth-first search.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the difference between depth-first search and breadth-first search.",
    "incorrect_answers": [
      "The main difference is mutability: lists can be changed after creation (mutable) while tuples cannot (immutable). Lists use square brackets and support operations like append() and extend(), while tuples use parentheses and don't allow modification after creation. Tuples are more memory efficient and slightly faster than lists.",
      "The main difference is mutability: lists can be changed after creation (mutable) while tuples cannot (immutable). Lists use square brackets and support operations like append() and extend(), while tuples use parentheses and don't allow modification after creation. Tuples are more memory efficient and slightly faster than lists.",
      "Sample answer 2 for: What is the __init__ method in Python and how is it used?"
    ]
  },
  {
    "question": "Explain the concept of metaprogramming in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: Explain the concept of metaprogramming in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python's magic methods and how would you use them?",
      "Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 2 for: What is polymorphism and how is it implemented in Python?"
    ]
  },
  {
    "question": "How would you find the kth largest element in an unsorted array?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: How would you find the kth largest element in an unsorted array?",
    "incorrect_answers": [
      "Sample answer 3 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 1 for: What are abstract classes and interfaces in Python?",
      "Sample answer 1 for: How would you implement a breadth-first search algorithm?"
    ]
  },
  {
    "question": "Explain the concept of multiple inheritance and the method resolution order in Python.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 1 for: Explain the concept of backtracking with an example.",
      "Sample answer 2 for: Explain the time complexity of common operations in Python dictionaries."
    ]
  },
  {
    "question": "Explain the time complexity of common operations in Python dictionaries.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries.",
    "incorrect_answers": [
      "Sample answer 2 for: How would you detect a cycle in a linked list?",
      "Sample answer 1 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 1 for: Explain the concept of recursion with an example."
    ]
  },
  {
    "question": "Explain the concept of encapsulation in Python.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: Explain the concept of encapsulation in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: How does exception handling work in Python?",
      "Sample answer 2 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 2 for: What are Python's data model and how does it relate to special methods?"
    ]
  },
  {
    "question": "What is the __init__ method in Python and how is it used?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What is the __init__ method in Python and how is it used?",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python."
    ]
  },
  {
    "question": "Explain the concept of composition vs inheritance with examples.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: Explain the concept of composition vs inheritance with examples.",
    "incorrect_answers": [
      "Sample answer 3 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 1 for: Explain the concept of dynamic programming with an example.",
      "Sample answer 1 for: How would you find the longest common subsequence of two strings?"
    ]
  },
  {
    "question": "How would you find the kth largest element in an unsorted array?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you find the kth largest element in an unsorted array?",
    "incorrect_answers": [
      "Sample answer 1 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 2 for: Explain the concept of encapsulation in Python.",
      "Sample answer 3 for: Explain the asyncio module in Python and how it works."
    ]
  },
  {
    "question": "What are abstract classes and interfaces in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: What are abstract classes and interfaces in Python?",
    "incorrect_answers": [
      "Python manages memory through automatic garbage collection. It uses reference counting to track how many references point to an object, and when the count reaches zero, the memory is freed. Python also has a cycle detector to handle circular references. All Python objects are stored in a private heap, and the memory manager allocates heap space for objects.",
      "Sample answer 2 for: How would you implement a linked list in Python?",
      "Sample answer 2 for: Explain the concept of monkey patching in Python and when it might be useful."
    ]
  },
  {
    "question": "What are Python generators and how do they differ from regular functions?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What are Python generators and how do they differ from regular functions?",
    "incorrect_answers": [
      "Sample answer 1 for: What is method overriding and how does it work in Python?",
      "Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 2 for: What is the __init__ method in Python and how is it used?"
    ]
  },
  {
    "question": "What are Python context managers and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: What are Python context managers and how do they work?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of duck typing in Python.",
      "Sample answer 2 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 3 for: Explain the difference between '==' and 'is' operators in Python."
    ]
  },
  {
    "question": "What is the difference between multiprocessing and multithreading in Python?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 2 for: Explain the difference between class methods, static methods, and instance methods.",
      "Sample answer 2 for: What are abstract classes and interfaces in Python?"
    ]
  },
  {
    "question": "What are Python's data model and how does it relate to special methods?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: What are Python's data model and how does it relate to special methods?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of duck typing in Python.",
      "Sample answer 2 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 3 for: Explain the concept of closures in Python with an example."
    ]
  },
  {
    "question": "Explain the concept of backtracking with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: Explain the concept of backtracking with an example.",
    "incorrect_answers": [
      "Python uses automatic memory management with a private heap to store objects and data structures. It has a built-in garbage collector that reclaims memory from objects that are no longer referenced. Python uses reference counting as its primary memory management technique, along with cycle-detecting garbage collection to handle circular references.",
      "Sample answer 1 for: What are Python's magic methods and how would you use them?",
      "Sample answer 1 for: How would you find the longest common subsequence of two strings?"
    ]
  },
  {
    "question": "What is the __init__ method in Python and how is it used?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What is the __init__ method in Python and how is it used?",
    "incorrect_answers": [
      "Sample answer 1 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 1 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 1 for: What is the Global Interpreter Lock (GIL) in Python?"
    ]
  },
  {
    "question": "Explain the concept of composition vs inheritance with examples.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: Explain the concept of composition vs inheritance with examples.",
    "incorrect_answers": [
      "Sample answer 3 for: How would you implement a linked list in Python?",
      "Sample answer 1 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 1 for: How does exception handling work in Python?"
    ]
  },
  {
    "question": "Explain the concept of backtracking with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: Explain the concept of backtracking with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: What is the difference between a stack and a queue?",
      "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search.",
      "Sample answer 3 for: Explain the concept of encapsulation in Python."
    ]
  },
  {
    "question": "What are Python's magic methods and how would you use them?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: What are Python's magic methods and how would you use them?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 1 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 3 for: Explain the concept of backtracking with an example."
    ]
  },
  {
    "question": "Explain the difference between depth-first search and breadth-first search.",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: Explain the difference between depth-first search and breadth-first search.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the asyncio module in Python and how it works.",
      "Sample answer 1 for: Explain the difference between '==' and 'is' operators in Python.",
      "Sample answer 3 for: Explain the concept of recursion with an example."
    ]
  },
  {
    "question": "Explain the concept of list comprehensions in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: Explain the concept of list comprehensions in Python.",
    "incorrect_answers": [
      "Python manages memory through automatic garbage collection. It uses reference counting to track how many references point to an object, and when the count reaches zero, the memory is freed. Python also has a cycle detector to handle circular references. All Python objects are stored in a private heap, and the memory manager allocates heap space for objects.",
      "Sample answer 3 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 1 for: How would you detect a cycle in a linked list?"
    ]
  },
  {
    "question": "What are Python decorators and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What are Python decorators and how do they work?",
    "incorrect_answers": [
      "Sample answer 2 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 2 for: What is the difference between a stack and a queue?",
      "Sample answer 2 for: How would you detect a cycle in a linked list?"
    ]
  },
  {
    "question": "Explain the concept of metaprogramming in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the concept of metaprogramming in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: What are abstract classes and interfaces in Python?",
      "Sample answer 1 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 3 for: Explain the concept of dynamic programming with an example."
    ]
  },
  {
    "question": "Explain the concept of encapsulation in Python.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the concept of encapsulation in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the difference between class methods, static methods, and instance methods.",
      "Sample answer 2 for: Explain the concept of coroutines in Python.",
      "Sample answer 2 for: Explain the concept of closures in Python with an example."
    ]
  },
  {
    "question": "What are the advantages and disadvantages of using arrays vs linked lists?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?",
    "incorrect_answers": [
      "Sample answer 1 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 1 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 1 for: What are binary trees and how would you implement one in Python?"
    ]
  },
  {
    "question": "What is the traveling salesman problem and how would you approach it?",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: What is the traveling salesman problem and how would you approach it?",
    "incorrect_answers": [
      "Lists are mutable collections that can be modified after creation, while tuples are immutable. Lists are defined using square brackets [], while tuples use parentheses (). Tuples are more memory-efficient and can be used as dictionary keys (since they're immutable), which lists cannot.",
      "Sample answer 1 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 2 for: What are Python's data model and how does it relate to special methods?"
    ]
  },
  {
    "question": "What are the advantages and disadvantages of using arrays vs linked lists?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: What are the advantages and disadvantages of using arrays vs linked lists?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of closures in Python with an example.",
      "Sample answer 1 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 3 for: How would you find the longest common subsequence of two strings?"
    ]
  },
  {
    "question": "Explain the concept of backtracking with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: Explain the concept of backtracking with an example.",
    "incorrect_answers": [
      "Sample answer 2 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 3 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?"
    ]
  },
  {
    "question": "Explain the concept of list comprehensions in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: Explain the concept of list comprehensions in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of coroutines in Python.",
      "Sample answer 3 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 2 for: Explain the concept of composition vs inheritance with examples."
    ]
  },
  {
    "question": "Explain how Python handles memory management.",
    "category": "python_basics",
    "correct_answer": "Python manages memory through automatic garbage collection. It uses reference counting to track how many references point to an object, and when the count reaches zero, the memory is freed. Python also has a cycle detector to handle circular references. All Python objects are stored in a private heap, and the memory manager allocates heap space for objects.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of backtracking with an example.",
      "Sample answer 2 for: Explain the concept of closures in Python with an example.",
      "Sample answer 2 for: What are Python type hints and how do they improve code quality?"
    ]
  },
  {
    "question": "Explain the quicksort algorithm and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: Explain the quicksort algorithm and its time complexity.",
    "incorrect_answers": [
      "Sample answer 1 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 3 for: Explain the asyncio module in Python and how it works.",
      "Sample answer 2 for: What are Python descriptors and how do they work?"
    ]
  },
  {
    "question": "Explain the concept of composition vs inheritance with examples.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the concept of composition vs inheritance with examples.",
    "incorrect_answers": [
      "Sample answer 3 for: How does exception handling work in Python?",
      "Sample answer 1 for: What is method overriding and how does it work in Python?",
      "Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?"
    ]
  },
  {
    "question": "What are Python decorators and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What are Python decorators and how do they work?",
    "incorrect_answers": [
      "Sample answer 3 for: What is a heap data structure and when would you use it?",
      "Sample answer 2 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 1 for: What is the difference between a stack and a queue?"
    ]
  },
  {
    "question": "What are the advantages and disadvantages of using arrays vs linked lists?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: What are the advantages and disadvantages of using arrays vs linked lists?",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 1 for: Explain the concept of backtracking with an example."
    ]
  },
  {
    "question": "How does exception handling work in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: How does exception handling work in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 3 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 2 for: Explain the concept of closures in Python with an example."
    ]
  },
  {
    "question": "What are Python's magic methods and how would you use them?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What are Python's magic methods and how would you use them?",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python descriptors and how do they work?",
      "Sample answer 3 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 2 for: Explain the concept of inheritance in Python with an example."
    ]
  },
  {
    "question": "Explain the concept of list comprehensions in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: Explain the concept of list comprehensions in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 1 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 1 for: What is polymorphism and how is it implemented in Python?"
    ]
  },
  {
    "question": "Explain the difference between depth-first search and breadth-first search.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the difference between depth-first search and breadth-first search.",
    "incorrect_answers": [
      "Sample answer 3 for: What is the difference between a stack and a queue?",
      "Sample answer 3 for: Explain the concept of closures in Python with an example.",
      "Sample answer 2 for: What is polymorphism and how is it implemented in Python?"
    ]
  },
  {
    "question": "Explain the concept of encapsulation in Python.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the concept of encapsulation in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search.",
      "Sample answer 2 for: What are Python's magic methods and how would you use them?",
      "Sample answer 2 for: What is polymorphism and how is it implemented in Python?"
    ]
  },
  {
    "question": "What is the Global Interpreter Lock (GIL) in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: What is the Global Interpreter Lock (GIL) in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: How would you implement a graph data structure in Python?",
      "Sample answer 1 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 3 for: What is method overriding and how does it work in Python?"
    ]
  },
  {
    "question": "Explain the concept of recursion with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: Explain the concept of recursion with an example.",
    "incorrect_answers": [
      "Sample answer 2 for: How would you implement a graph data structure in Python?",
      "Sample answer 3 for: Explain the concept of closures in Python with an example.",
      "Sample answer 3 for: What are Python context managers and how do they work?"
    ]
  },
  {
    "question": "What are Python's data model and how does it relate to special methods?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: What are Python's data model and how does it relate to special methods?",
    "incorrect_answers": [
      "The main difference is mutability: lists can be changed after creation (mutable) while tuples cannot (immutable). Lists use square brackets and support operations like append() and extend(), while tuples use parentheses and don't allow modification after creation. Tuples are more memory efficient and slightly faster than lists.",
      "Sample answer 1 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 3 for: What are Python context managers and how do they work?"
    ]
  },
  {
    "question": "What is the traveling salesman problem and how would you approach it?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: What is the traveling salesman problem and how would you approach it?",
    "incorrect_answers": [
      "Sample answer 3 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 3 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 1 for: Explain the concept of closures in Python with an example."
    ]
  },
  {
    "question": "What are Python decorators and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: What are Python decorators and how do they work?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of closures in Python with an example.",
      "Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 1 for: Explain the concept of list comprehensions in Python."
    ]
  },
  {
    "question": "Explain the concept of inheritance in Python with an example.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: Explain the concept of inheritance in Python with an example.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the asyncio module in Python and how it works.",
      "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 2 for: Explain the concept of coroutines in Python."
    ]
  },
  {
    "question": "What are Python generators and how do they differ from regular functions?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: What are Python generators and how do they differ from regular functions?",
    "incorrect_answers": [
      "Sample answer 3 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 1 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 2 for: What are Python's magic methods and how would you use them?"
    ]
  },
  {
    "question": "How would you find the longest common subsequence of two strings?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: How would you find the longest common subsequence of two strings?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the asyncio module in Python and how it works.",
      "Sample answer 3 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 3 for: Explain the concept of closures in Python with an example."
    ]
  },
  {
    "question": "What are Python generators and how do they differ from regular functions?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What are Python generators and how do they differ from regular functions?",
    "incorrect_answers": [
      "Sample answer 1 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 2 for: What are abstract classes and interfaces in Python?",
      "Sample answer 2 for: What are Python context managers and how do they work?"
    ]
  },
  {
    "question": "What are Python descriptors and how do they work?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: What are Python descriptors and how do they work?",
    "incorrect_answers": [
      "Sample answer 2 for: What is a heap data structure and when would you use it?",
      "Sample answer 3 for: What are abstract classes and interfaces in Python?",
      "Sample answer 3 for: Explain the concept of list comprehensions in Python."
    ]
  },
  {
    "question": "Explain the concept of list comprehensions in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: Explain the concept of list comprehensions in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python decorators and how do they work?",
      "Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 3 for: Explain the concept of dynamic programming with an example."
    ]
  },
  {
    "question": "What are the advantages and disadvantages of using arrays vs linked lists?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: What are the advantages and disadvantages of using arrays vs linked lists?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the asyncio module in Python and how it works.",
      "Sample answer 3 for: Explain the concept of duck typing in Python.",
      "Sample answer 3 for: What are binary trees and how would you implement one in Python?"
    ]
  },
  {
    "question": "Explain the difference between class methods, static methods, and instance methods.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the difference between class methods, static methods, and instance methods.",
    "incorrect_answers": [
      "Sample answer 1 for: How would you detect a cycle in a linked list?",
      "Sample answer 3 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?"
    ]
  },
  {
    "question": "How would you find the longest common subsequence of two strings?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: How would you find the longest common subsequence of two strings?",
    "incorrect_answers": [
      "Sample answer 1 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Lists are mutable collections that can be modified after creation, while tuples are immutable. Lists are defined using square brackets [], while tuples use parentheses (). Tuples are more memory-efficient and can be used as dictionary keys (since they're immutable), which lists cannot.",
      "Sample answer 3 for: What are abstract classes and interfaces in Python?"
    ]
  },
  {
    "question": "What are Python context managers and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What are Python context managers and how do they work?",
    "incorrect_answers": [
      "Sample answer 2 for: How would you detect a cycle in a linked list?",
      "Sample answer 3 for: What are Python's magic methods and how would you use them?",
      "Sample answer 2 for: How would you implement a linked list in Python?"
    ]
  },
  {
    "question": "How would you detect a cycle in a linked list?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you detect a cycle in a linked list?",
    "incorrect_answers": [
      "Sample answer 1 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 1 for: How would you implement a linked list in Python?",
      "Sample answer 1 for: Explain the concept of coroutines in Python."
    ]
  },
  {
    "question": "How would you detect a cycle in a linked list?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: How would you detect a cycle in a linked list?",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 1 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 2 for: What are Python context managers and how do they work?"
    ]
  },
  {
    "question": "What are Python generators and how do they differ from regular functions?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: What are Python generators and how do they differ from regular functions?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 2 for: What are abstract classes and interfaces in Python?",
      "Sample answer 2 for: Explain the concept of recursion with an example."
    ]
  },
  {
    "question": "Explain the concept of metaprogramming in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the concept of metaprogramming in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of recursion with an example.",
      "Sample answer 2 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?"
    ]
  },
  {
    "question": "What are abstract classes and interfaces in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What are abstract classes and interfaces in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 1 for: What is method overriding and how does it work in Python?",
      "Sample answer 2 for: Explain the time complexity of common operations in Python dictionaries."
    ]
  },
  {
    "question": "How would you implement a linked list in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: How would you implement a linked list in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 1 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 2 for: Explain the concept of encapsulation in Python."
    ]
  },
  {
    "question": "How would you find the kth largest element in an unsorted array?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: How would you find the kth largest element in an unsorted array?",
    "incorrect_answers": [
      "Sample answer 1 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 1 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 3 for: What is the difference between a greedy algorithm and dynamic programming?"
    ]
  },
  {
    "question": "What is the difference between multiprocessing and multithreading in Python?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: How would you implement a linked list in Python?",
      "Sample answer 2 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 2 for: Explain the concept of hash tables and their implementation in Python."
    ]
  },
  {
    "question": "Explain the concept of encapsulation in Python.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: Explain the concept of encapsulation in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the difference between class methods, static methods, and instance methods.",
      "Sample answer 1 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Python uses automatic memory management through reference counting and garbage collection. When objects are created, Python allocates memory from a private heap. It tracks references to objects, and when an object's reference count drops to zero, the memory is reclaimed. Python also has a cyclic garbage collector to detect and collect objects in reference cycles that would otherwise not be collected."
    ]
  },
  {
    "question": "What is the traveling salesman problem and how would you approach it?",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: What is the traveling salesman problem and how would you approach it?",
    "incorrect_answers": [
      "Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 1 for: What is the difference between a stack and a queue?",
      "Sample answer 2 for: Explain the concept of composition vs inheritance with examples."
    ]
  },
  {
    "question": "What is a heap data structure and when would you use it?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: What is a heap data structure and when would you use it?",
    "incorrect_answers": [
      "Sample answer 3 for: How would you implement a linked list in Python?",
      "Sample answer 2 for: What are Python context managers and how do they work?",
      "Sample answer 1 for: Explain the concept of binary search and its time complexity."
    ]
  },
  {
    "question": "Explain the concept of recursion with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: Explain the concept of recursion with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 2 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 1 for: What is the difference between multiprocessing and multithreading in Python?"
    ]
  },
  {
    "question": "Explain the concept of monkey patching in Python and when it might be useful.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the concept of monkey patching in Python and when it might be useful.",
    "incorrect_answers": [
      "Sample answer 1 for: How does exception handling work in Python?",
      "Sample answer 1 for: Explain the concept of dynamic programming with an example.",
      "Sample answer 3 for: What are Python context managers and how do they work?"
    ]
  },
  {
    "question": "How does exception handling work in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: How does exception handling work in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python context managers and how do they work?",
      "Sample answer 1 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 2 for: What is the difference between a stack and a queue?"
    ]
  },
  {
    "question": "What is the Global Interpreter Lock (GIL) in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?",
    "incorrect_answers": [
      "Lists are mutable, meaning they can be modified after creation, while tuples are immutable. Lists use square brackets [] and tuples use parentheses (). Lists generally consume more memory than tuples and are slower for iteration.",
      "Sample answer 1 for: Explain the concept of coroutines in Python.",
      "The main difference is mutability: lists can be changed after creation (mutable) while tuples cannot (immutable). Lists use square brackets and support operations like append() and extend(), while tuples use parentheses and don't allow modification after creation. Tuples are more memory efficient and slightly faster than lists."
    ]
  },
  {
    "question": "What are Python decorators and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What are Python decorators and how do they work?",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python's magic methods and how would you use them?",
      "Sample answer 3 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 1 for: Explain the concept of metaprogramming in Python."
    ]
  },
  {
    "question": "Explain the concept of metaprogramming in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the concept of metaprogramming in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 1 for: Explain the concept of encapsulation in Python.",
      "Sample answer 3 for: What are Python generators and how do they differ from regular functions?"
    ]
  },
  {
    "question": "What is the Global Interpreter Lock (GIL) in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: What is the Global Interpreter Lock (GIL) in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python generators and how do they differ from regular functions?",
      "Python manages memory through automatic garbage collection. It uses reference counting to track how many references point to an object, and when the count reaches zero, the memory is freed. Python also has a cycle detector to handle circular references. All Python objects are stored in a private heap, and the memory manager allocates heap space for objects.",
      "Sample answer 3 for: Explain the difference between depth-first search and breadth-first search."
    ]
  },
  {
    "question": "What are the advantages and disadvantages of using arrays vs linked lists?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?",
    "incorrect_answers": [
      "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 2 for: Explain the asyncio module in Python and how it works.",
      "Sample answer 2 for: What is a heap data structure and when would you use it?"
    ]
  },
  {
    "question": "Explain the difference between class methods, static methods, and instance methods.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: Explain the difference between class methods, static methods, and instance methods.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of closures in Python with an example.",
      "Sample answer 1 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 2 for: How would you implement a breadth-first search algorithm?"
    ]
  },
  {
    "question": "How would you implement a breadth-first search algorithm?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you implement a breadth-first search algorithm?",
    "incorrect_answers": [
      "Sample answer 1 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 2 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 2 for: How does exception handling work in Python?"
    ]
  },
  {
    "question": "Explain the difference between '==' and 'is' operators in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: Explain the difference between '==' and 'is' operators in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of duck typing in Python.",
      "Sample answer 2 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 1 for: What is the traveling salesman problem and how would you approach it?"
    ]
  },
  {
    "question": "What are Python's magic methods and how would you use them?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What are Python's magic methods and how would you use them?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 2 for: What is the difference between a stack and a queue?",
      "Sample answer 1 for: What are Python context managers and how do they work?"
    ]
  },
  {
    "question": "What are abstract classes and interfaces in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What are abstract classes and interfaces in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: How would you implement a linked list in Python?",
      "Sample answer 1 for: Explain the concept of metaprogramming in Python.",
      "Lists are mutable collections that can be modified after creation, while tuples are immutable. Lists are defined using square brackets [], while tuples use parentheses (). Tuples are more memory-efficient and can be used as dictionary keys (since they're immutable), which lists cannot."
    ]
  },
  {
    "question": "What is the difference between a list and a tuple in Python?",
    "category": "python_basics",
    "correct_answer": "Lists are mutable collections that can be modified after creation, while tuples are immutable. Lists are defined using square brackets [], while tuples use parentheses (). Tuples are more memory-efficient and can be used as dictionary keys (since they're immutable), which lists cannot.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of encapsulation in Python.",
      "Sample answer 2 for: What are Python descriptors and how do they work?",
      "Sample answer 3 for: What are metaclasses in Python and how would you use them?"
    ]
  },
  {
    "question": "What is polymorphism and how is it implemented in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What is polymorphism and how is it implemented in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of backtracking with an example.",
      "Sample answer 3 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 3 for: Explain the concept of duck typing in Python."
    ]
  },
  {
    "question": "What is the traveling salesman problem and how would you approach it?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: What is the traveling salesman problem and how would you approach it?",
    "incorrect_answers": [
      "Sample answer 2 for: How would you implement a graph data structure in Python?",
      "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 3 for: Explain the difference between class methods, static methods, and instance methods."
    ]
  },
  {
    "question": "How does exception handling work in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: How does exception handling work in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 2 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 2 for: What is a heap data structure and when would you use it?"
    ]
  },
  {
    "question": "What are abstract classes and interfaces in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What are abstract classes and interfaces in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 3 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 2 for: Explain the time complexity of common operations in Python dictionaries."
    ]
  },
  {
    "question": "What are binary trees and how would you implement one in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: What are binary trees and how would you implement one in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 1 for: How would you implement a linked list in Python?",
      "Sample answer 3 for: Explain the difference between depth-first search and breadth-first search."
    ]
  },
  {
    "question": "Explain the concept of binary search and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: Explain the concept of binary search and its time complexity.",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python decorators and how do they work?",
      "Sample answer 2 for: Explain the difference between depth-first search and breadth-first search.",
      "Sample answer 1 for: Explain the concept of duck typing in Python."
    ]
  },
  {
    "question": "How would you detect a cycle in a linked list?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you detect a cycle in a linked list?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 3 for: What are Python descriptors and how do they work?",
      "Sample answer 3 for: How does exception handling work in Python?"
    ]
  },
  {
    "question": "Explain the time complexity of common operations in Python dictionaries.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries.",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 3 for: What are Python's magic methods and how would you use them?",
      "Sample answer 2 for: Explain the quicksort algorithm and its time complexity."
    ]
  },
  {
    "question": "How would you implement a breadth-first search algorithm?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you implement a breadth-first search algorithm?",
    "incorrect_answers": [
      "Sample answer 1 for: How would you detect a cycle in a linked list?",
      "Sample answer 1 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 1 for: Explain the concept of encapsulation in Python."
    ]
  },
  {
    "question": "What are binary trees and how would you implement one in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: What are binary trees and how would you implement one in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the difference between class methods, static methods, and instance methods.",
      "Lists are mutable, meaning they can be modified after creation, while tuples are immutable. Lists use square brackets [] and tuples use parentheses (). Lists generally consume more memory than tuples and are slower for iteration.",
      "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?"
    ]
  },
  {
    "question": "What is the difference between a stack and a queue?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: What is the difference between a stack and a queue?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 2 for: Explain the concept of recursion with an example.",
      "Sample answer 2 for: Explain the quicksort algorithm and its time complexity."
    ]
  },
  {
    "question": "Explain the concept of composition vs inheritance with examples.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the concept of composition vs inheritance with examples.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of coroutines in Python.",
      "Sample answer 1 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 1 for: What are Python generators and how do they differ from regular functions?"
    ]
  },
  {
    "question": "Explain the concept of metaprogramming in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the concept of metaprogramming in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python type hints and how do they improve code quality?",
      "Python manages memory through automatic garbage collection. It uses reference counting to track how many references point to an object, and when the count reaches zero, the memory is freed. Python also has a cycle detector to handle circular references. All Python objects are stored in a private heap, and the memory manager allocates heap space for objects.",
      "Sample answer 2 for: How does exception handling work in Python?"
    ]
  },
  {
    "question": "What is polymorphism and how is it implemented in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What is polymorphism and how is it implemented in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 3 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 2 for: Explain the concept of backtracking with an example."
    ]
  },
  {
    "question": "Explain the difference between '==' and 'is' operators in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: Explain the difference between '==' and 'is' operators in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of closures in Python with an example.",
      "Sample answer 1 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 3 for: Explain the concept of list comprehensions in Python."
    ]
  },
  {
    "question": "How would you find the longest common subsequence of two strings?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you find the longest common subsequence of two strings?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 2 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 1 for: Explain the concept of inheritance in Python with an example."
    ]
  },
  {
    "question": "How would you find the longest common subsequence of two strings?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you find the longest common subsequence of two strings?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 1 for: What is the difference between a stack and a queue?",
      "Python uses automatic memory management with a private heap to store objects and data structures. It has a built-in garbage collector that reclaims memory from objects that are no longer referenced. Python uses reference counting as its primary memory management technique, along with cycle-detecting garbage collection to handle circular references."
    ]
  },
  {
    "question": "Explain the concept of duck typing in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: Explain the concept of duck typing in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 2 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 1 for: What are Python's data model and how does it relate to special methods?"
    ]
  },
  {
    "question": "How would you find the kth largest element in an unsorted array?",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: How would you find the kth largest element in an unsorted array?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of encapsulation in Python.",
      "Sample answer 1 for: How would you implement a graph data structure in Python?",
      "Sample answer 1 for: How would you implement a linked list in Python?"
    ]
  },
  {
    "question": "Explain how Python handles memory management.",
    "category": "python_basics",
    "correct_answer": "Python uses automatic memory management with a private heap to store objects and data structures. It has a built-in garbage collector that reclaims memory from objects that are no longer referenced. Python uses reference counting as its primary memory management technique, along with cycle-detecting garbage collection to handle circular references.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of encapsulation in Python.",
      "Sample answer 3 for: What are abstract classes and interfaces in Python?",
      "Sample answer 2 for: Explain the concept of metaprogramming in Python."
    ]
  },
  {
    "question": "Explain the concept of inheritance in Python with an example.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: Explain the concept of inheritance in Python with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python decorators and how do they work?",
      "Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 2 for: What is the __init__ method in Python and how is it used?"
    ]
  },
  {
    "question": "Explain the difference between '==' and 'is' operators in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: Explain the difference between '==' and 'is' operators in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 3 for: How would you detect a cycle in a linked list?",
      "Sample answer 3 for: How would you implement a linked list in Python?"
    ]
  },
  {
    "question": "How would you find the longest common subsequence of two strings?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: How would you find the longest common subsequence of two strings?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of duck typing in Python.",
      "Sample answer 2 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 2 for: Explain the difference between '==' and 'is' operators in Python."
    ]
  },
  {
    "question": "What is the difference between a list and a tuple in Python?",
    "category": "python_basics",
    "correct_answer": "Lists are mutable, meaning they can be modified after creation, while tuples are immutable. Lists use square brackets [] and tuples use parentheses (). Lists generally consume more memory than tuples and are slower for iteration.",
    "incorrect_answers": [
      "Sample answer 3 for: What is method overriding and how does it work in Python?",
      "Sample answer 3 for: What is the difference between a stack and a queue?",
      "Sample answer 2 for: What is polymorphism and how is it implemented in Python?"
    ]
  },
  {
    "question": "Explain the asyncio module in Python and how it works.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: Explain the asyncio module in Python and how it works.",
    "incorrect_answers": [
      "Sample answer 3 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 1 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 3 for: Explain the concept of composition vs inheritance with examples."
    ]
  },
  {
    "question": "Explain the concept of duck typing in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: Explain the concept of duck typing in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of coroutines in Python.",
      "Sample answer 3 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 2 for: What are Python generators and how do they differ from regular functions?"
    ]
  },
  {
    "question": "Explain the concept of hash tables and their implementation in Python.",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: Explain the concept of hash tables and their implementation in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of dynamic programming with an example.",
      "Sample answer 2 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 1 for: What is the difference between a greedy algorithm and dynamic programming?"
    ]
  },
  {
    "question": "What is the __init__ method in Python and how is it used?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: What is the __init__ method in Python and how is it used?",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 3 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 1 for: Explain the concept of list comprehensions in Python."
    ]
  },
  {
    "question": "Explain the concept of closures in Python with an example.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the concept of closures in Python with an example.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 3 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search."
    ]
  },
  {
    "question": "What are Python's data model and how does it relate to special methods?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What are Python's data model and how does it relate to special methods?",
    "incorrect_answers": [
      "Lists are mutable, meaning they can be modified after creation, while tuples are immutable. Lists use square brackets [] and tuples use parentheses (). Lists generally consume more memory than tuples and are slower for iteration.",
      "Sample answer 1 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 2 for: What are Python generators and how do they differ from regular functions?"
    ]
  },
  {
    "question": "Explain the difference between depth-first search and breadth-first search.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the difference between depth-first search and breadth-first search.",
    "incorrect_answers": [
      "Sample answer 2 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 2 for: How would you detect a cycle in a linked list?",
      "Sample answer 2 for: What are the advantages and disadvantages of using arrays vs linked lists?"
    ]
  },
  {
    "question": "What are the advantages and disadvantages of using arrays vs linked lists?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 1 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 1 for: Explain the concept of duck typing in Python."
    ]
  },
  {
    "question": "What is the __init__ method in Python and how is it used?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What is the __init__ method in Python and how is it used?",
    "incorrect_answers": [
      "Sample answer 1 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 2 for: How would you implement a linked list in Python?",
      "Sample answer 3 for: Explain the concept of backtracking with an example."
    ]
  },
  {
    "question": "What are Python generators and how do they differ from regular functions?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: What are Python generators and how do they differ from regular functions?",
    "incorrect_answers": [
      "Sample answer 2 for: How would you implement a graph data structure in Python?",
      "Sample answer 2 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 2 for: Explain the difference between '==' and 'is' operators in Python."
    ]
  },
  {
    "question": "Explain the concept of coroutines in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the concept of coroutines in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 3 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?"
    ]
  },
  {
    "question": "What are Python's magic methods and how would you use them?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: What are Python's magic methods and how would you use them?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Python uses automatic memory management through reference counting and garbage collection. When objects are created, Python allocates memory from a private heap. It tracks references to objects, and when an object's reference count drops to zero, the memory is reclaimed. Python also has a cyclic garbage collector to detect and collect objects in reference cycles that would otherwise not be collected.",
      "Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?"
    ]
  },
  {
    "question": "What is a heap data structure and when would you use it?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: What is a heap data structure and when would you use it?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 3 for: What are Python decorators and how do they work?",
      "Sample answer 1 for: Explain the concept of backtracking with an example."
    ]
  },
  {
    "question": "Explain the difference between '==' and 'is' operators in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: Explain the difference between '==' and 'is' operators in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search.",
      "Sample answer 2 for: Explain the concept of inheritance in Python with an example."
    ]
  },
  {
    "question": "Explain the time complexity of common operations in Python dictionaries.",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: Explain the time complexity of common operations in Python dictionaries.",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python context managers and how do they work?",
      "Sample answer 1 for: What are Python descriptors and how do they work?",
      "Sample answer 1 for: What are Python descriptors and how do they work?"
    ]
  },
  {
    "question": "What are Python generators and how do they differ from regular functions?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: What are Python generators and how do they differ from regular functions?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of closures in Python with an example.",
      "Sample answer 2 for: Explain the concept of coroutines in Python.",
      "Sample answer 2 for: What are Python's data model and how does it relate to special methods?"
    ]
  },
  {
    "question": "How would you detect a cycle in a linked list?",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: How would you detect a cycle in a linked list?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the difference between class methods, static methods, and instance methods.",
      "Sample answer 1 for: What are Python descriptors and how do they work?",
      "Sample answer 3 for: What are binary trees and how would you implement one in Python?"
    ]
  },
  {
    "question": "What is a heap data structure and when would you use it?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: What is a heap data structure and when would you use it?",
    "incorrect_answers": [
      "Sample answer 3 for: How would you implement a graph data structure in Python?",
      "Sample answer 2 for: What are Python descriptors and how do they work?",
      "Sample answer 1 for: Explain the concept of encapsulation in Python."
    ]
  },
  {
    "question": "Explain the asyncio module in Python and how it works.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: Explain the asyncio module in Python and how it works.",
    "incorrect_answers": [
      "Sample answer 2 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search.",
      "Sample answer 1 for: Explain the difference between '==' and 'is' operators in Python."
    ]
  },
  {
    "question": "Explain the concept of closures in Python with an example.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: Explain the concept of closures in Python with an example.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the difference between '==' and 'is' operators in Python.",
      "Sample answer 1 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 3 for: How would you find the kth largest element in an unsorted array?"
    ]
  },
  {
    "question": "Explain the concept of metaprogramming in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the concept of metaprogramming in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 2 for: What are the advantages and disadvantages of using arrays vs linked lists?"
    ]
  },
  {
    "question": "What are metaclasses in Python and how would you use them?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What are metaclasses in Python and how would you use them?",
    "incorrect_answers": [
      "Sample answer 2 for: What is a heap data structure and when would you use it?",
      "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search.",
      "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?"
    ]
  },
  {
    "question": "Explain the concept of list comprehensions in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: Explain the concept of list comprehensions in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 2 for: Explain the concept of dynamic programming with an example.",
      "Sample answer 3 for: What is the difference between a stack and a queue?"
    ]
  },
  {
    "question": "What are Python type hints and how do they improve code quality?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: What are Python type hints and how do they improve code quality?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search.",
      "Sample answer 1 for: What are Python descriptors and how do they work?",
      "Sample answer 3 for: Explain the asyncio module in Python and how it works."
    ]
  },
  {
    "question": "How does exception handling work in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: How does exception handling work in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 3 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?"
    ]
  },
  {
    "question": "Explain the concept of dynamic programming with an example.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the concept of dynamic programming with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the difference between class methods, static methods, and instance methods.",
      "Sample answer 2 for: What is the difference between a stack and a queue?",
      "Sample answer 1 for: How does exception handling work in Python?"
    ]
  },
  {
    "question": "How would you detect a cycle in a linked list?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you detect a cycle in a linked list?",
    "incorrect_answers": [
      "Sample answer 1 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 1 for: What is a heap data structure and when would you use it?",
      "Sample answer 2 for: Explain the concept of composition vs inheritance with examples."
    ]
  },
  {
    "question": "How would you implement a graph data structure in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: How would you implement a graph data structure in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of backtracking with an example.",
      "Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 2 for: What are Python descriptors and how do they work?"
    ]
  },
  {
    "question": "What are Python type hints and how do they improve code quality?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What are Python type hints and how do they improve code quality?",
    "incorrect_answers": [
      "Sample answer 2 for: What is method overriding and how does it work in Python?",
      "Sample answer 2 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful."
    ]
  },
  {
    "question": "What is the difference between a list and a tuple in Python?",
    "category": "python_basics",
    "correct_answer": "Lists are mutable, meaning they can be modified after creation, while tuples are immutable. Lists use square brackets [] and tuples use parentheses (). Lists generally consume more memory than tuples and are slower for iteration.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of backtracking with an example.",
      "Sample answer 2 for: What are Python context managers and how do they work?",
      "Sample answer 1 for: What are Python type hints and how do they improve code quality?"
    ]
  },
  {
    "question": "What is method overriding and how does it work in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What is method overriding and how does it work in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of recursion with an example.",
      "Sample answer 3 for: What are Python's magic methods and how would you use them?",
      "Sample answer 3 for: Explain the difference between depth-first search and breadth-first search."
    ]
  },
  {
    "question": "What is the __init__ method in Python and how is it used?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What is the __init__ method in Python and how is it used?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 2 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 2 for: What are binary trees and how would you implement one in Python?"
    ]
  },
  {
    "question": "Explain the concept of multiple inheritance and the method resolution order in Python.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 3 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 3 for: Explain the difference between class methods, static methods, and instance methods."
    ]
  },
  {
    "question": "What are the advantages and disadvantages of using arrays vs linked lists?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: What are the advantages and disadvantages of using arrays vs linked lists?",
    "incorrect_answers": [
      "Sample answer 2 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 3 for: How would you detect a cycle in a linked list?",
      "Sample answer 1 for: What is the Global Interpreter Lock (GIL) in Python?"
    ]
  },
  {
    "question": "What is polymorphism and how is it implemented in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What is polymorphism and how is it implemented in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 3 for: What is method overriding and how does it work in Python?",
      "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?"
    ]
  },
  {
    "question": "Explain the concept of metaprogramming in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the concept of metaprogramming in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: What is the difference between a stack and a queue?",
      "Sample answer 2 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 3 for: How does exception handling work in Python?"
    ]
  },
  {
    "question": "Explain the quicksort algorithm and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: Explain the quicksort algorithm and its time complexity.",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 3 for: What are abstract classes and interfaces in Python?",
      "Sample answer 2 for: How would you implement a graph data structure in Python?"
    ]
  },
  {
    "question": "Explain the asyncio module in Python and how it works.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: Explain the asyncio module in Python and how it works.",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python decorators and how do they work?",
      "Sample answer 1 for: What are Python decorators and how do they work?",
      "Sample answer 3 for: What is the difference between a greedy algorithm and dynamic programming?"
    ]
  },
  {
    "question": "Explain the quicksort algorithm and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: Explain the quicksort algorithm and its time complexity.",
    "incorrect_answers": [
      "Sample answer 2 for: What is method overriding and how does it work in Python?",
      "Sample answer 1 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 1 for: What are abstract classes and interfaces in Python?"
    ]
  },
  {
    "question": "What are Python context managers and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: What are Python context managers and how do they work?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of encapsulation in Python.",
      "Sample answer 1 for: Explain the concept of encapsulation in Python.",
      "Sample answer 1 for: Explain the concept of binary search and its time complexity."
    ]
  },
  {
    "question": "Explain the concept of hash tables and their implementation in Python.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the concept of hash tables and their implementation in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of recursion with an example.",
      "Sample answer 2 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 2 for: What are metaclasses in Python and how would you use them?"
    ]
  },
  {
    "question": "Explain the concept of binary search and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: Explain the concept of binary search and its time complexity.",
    "incorrect_answers": [
      "Sample answer 3 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 2 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 1 for: Explain the concept of coroutines in Python."
    ]
  },
  {
    "question": "How would you find the kth largest element in an unsorted array?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you find the kth largest element in an unsorted array?",
    "incorrect_answers": [
      "Sample answer 1 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 1 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 2 for: Explain the difference between class methods, static methods, and instance methods."
    ]
  },
  {
    "question": "What are Python type hints and how do they improve code quality?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: What are Python type hints and how do they improve code quality?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of backtracking with an example.",
      "Sample answer 2 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 1 for: Explain the concept of binary search and its time complexity."
    ]
  },
  {
    "question": "Explain the concept of recursion with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: Explain the concept of recursion with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 1 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 1 for: How would you detect a cycle in a linked list?"
    ]
  },
  {
    "question": "What is the __init__ method in Python and how is it used?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What is the __init__ method in Python and how is it used?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 3 for: Explain the concept of duck typing in Python.",
      "Sample answer 3 for: How would you find the longest common subsequence of two strings?"
    ]
  },
  {
    "question": "What is the traveling salesman problem and how would you approach it?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: What is the traveling salesman problem and how would you approach it?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of dynamic programming with an example.",
      "Sample answer 1 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 3 for: Explain the concept of backtracking with an example."
    ]
  },
  {
    "question": "What are binary trees and how would you implement one in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: What are binary trees and how would you implement one in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 3 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 1 for: Explain the difference between class methods, static methods, and instance methods."
    ]
  },
  {
    "question": "What are the advantages and disadvantages of using arrays vs linked lists?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 2 for: How would you detect a cycle in a linked list?",
      "Sample answer 2 for: What is polymorphism and how is it implemented in Python?"
    ]
  },
  {
    "question": "What are the advantages and disadvantages of using arrays vs linked lists?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 2 for: What are Python decorators and how do they work?",
      "Sample answer 1 for: Explain the concept of metaprogramming in Python."
    ]
  },
  {
    "question": "Explain how Python handles memory management.",
    "category": "python_basics",
    "correct_answer": "Python manages memory through automatic garbage collection. It uses reference counting to track how many references point to an object, and when the count reaches zero, the memory is freed. Python also has a cycle detector to handle circular references. All Python objects are stored in a private heap, and the memory manager allocates heap space for objects.",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python context managers and how do they work?",
      "Sample answer 1 for: What are Python decorators and how do they work?",
      "Sample answer 1 for: What is method overriding and how does it work in Python?"
    ]
  },
  {
    "question": "What is polymorphism and how is it implemented in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What is polymorphism and how is it implemented in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 3 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 1 for: What is the difference between a greedy algorithm and dynamic programming?"
    ]
  },
  {
    "question": "Explain the difference between depth-first search and breadth-first search.",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search.",
    "incorrect_answers": [
      "Sample answer 3 for: What is the difference between a stack and a queue?",
      "Sample answer 2 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 2 for: How does exception handling work in Python?"
    ]
  },
  {
    "question": "What is the __init__ method in Python and how is it used?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What is the __init__ method in Python and how is it used?",
    "incorrect_answers": [
      "Sample answer 2 for: What is a heap data structure and when would you use it?",
      "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful."
    ]
  },
  {
    "question": "Explain the concept of multiple inheritance and the method resolution order in Python.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the asyncio module in Python and how it works.",
      "Sample answer 3 for: What are abstract classes and interfaces in Python?",
      "Sample answer 1 for: Explain the concept of backtracking with an example."
    ]
  },
  {
    "question": "How would you implement a graph data structure in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: How would you implement a graph data structure in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 1 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 2 for: Explain the concept of inheritance in Python with an example."
    ]
  },
  {
    "question": "Explain the concept of backtracking with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: Explain the concept of backtracking with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 1 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 1 for: Explain the concept of encapsulation in Python."
    ]
  },
  {
    "question": "Explain the asyncio module in Python and how it works.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the asyncio module in Python and how it works.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 3 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 3 for: How would you implement a breadth-first search algorithm?"
    ]
  },
  {
    "question": "What are binary trees and how would you implement one in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: What are binary trees and how would you implement one in Python?",
    "incorrect_answers": [
      "The main difference is mutability: lists can be changed after creation (mutable) while tuples cannot (immutable). Lists use square brackets and support operations like append() and extend(), while tuples use parentheses and don't allow modification after creation. Tuples are more memory efficient and slightly faster than lists.",
      "Sample answer 1 for: How would you implement a graph data structure in Python?",
      "Sample answer 1 for: What is the traveling salesman problem and how would you approach it?"
    ]
  },
  {
    "question": "What are abstract classes and interfaces in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What are abstract classes and interfaces in Python?",
    "incorrect_answers": [
      "Python uses automatic memory management with a private heap to store objects and data structures. It has a built-in garbage collector that reclaims memory from objects that are no longer referenced. Python uses reference counting as its primary memory management technique, along with cycle-detecting garbage collection to handle circular references.",
      "Sample answer 3 for: How would you detect a cycle in a linked list?",
      "Sample answer 3 for: What is the traveling salesman problem and how would you approach it?"
    ]
  },
  {
    "question": "Explain the quicksort algorithm and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: Explain the quicksort algorithm and its time complexity.",
    "incorrect_answers": [
      "Sample answer 1 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 1 for: How does exception handling work in Python?",
      "Sample answer 3 for: How would you detect a cycle in a linked list?"
    ]
  },
  {
    "question": "How would you find the kth largest element in an unsorted array?",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: How would you find the kth largest element in an unsorted array?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of duck typing in Python.",
      "Sample answer 1 for: Explain the concept of recursion with an example.",
      "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search."
    ]
  },
  {
    "question": "What are Python generators and how do they differ from regular functions?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: What are Python generators and how do they differ from regular functions?",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python's magic methods and how would you use them?",
      "Lists are mutable, meaning they can be modified after creation, while tuples are immutable. Lists use square brackets [] and tuples use parentheses (). Lists generally consume more memory than tuples and are slower for iteration.",
      "Sample answer 3 for: Explain the concept of inheritance in Python with an example."
    ]
  },
  {
    "question": "How does exception handling work in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: How does exception handling work in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the difference between '==' and 'is' operators in Python.",
      "Sample answer 2 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 2 for: How would you implement a linked list in Python?"
    ]
  },
  {
    "question": "Explain the concept of inheritance in Python with an example.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the concept of inheritance in Python with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 3 for: What is method overriding and how does it work in Python?",
      "Sample answer 1 for: Explain the concept of backtracking with an example."
    ]
  },
  {
    "question": "Explain the concept of backtracking with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: Explain the concept of backtracking with an example.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of closures in Python with an example.",
      "Sample answer 3 for: What are Python's magic methods and how would you use them?",
      "Sample answer 1 for: Explain the concept of dynamic programming with an example."
    ]
  },
  {
    "question": "What is polymorphism and how is it implemented in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What is polymorphism and how is it implemented in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of duck typing in Python.",
      "Sample answer 1 for: What are Python decorators and how do they work?",
      "Sample answer 3 for: What are Python generators and how do they differ from regular functions?"
    ]
  },
  {
    "question": "Explain the concept of hash tables and their implementation in Python.",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: Explain the concept of hash tables and their implementation in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 1 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful."
    ]
  },
  {
    "question": "What is the difference between a list and a tuple in Python?",
    "category": "python_basics",
    "correct_answer": "Lists are mutable collections that can be modified after creation, while tuples are immutable. Lists are defined using square brackets [], while tuples use parentheses (). Tuples are more memory-efficient and can be used as dictionary keys (since they're immutable), which lists cannot.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 2 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 2 for: Explain the difference between depth-first search and breadth-first search."
    ]
  },
  {
    "question": "Explain how Python handles memory management.",
    "category": "python_basics",
    "correct_answer": "Python manages memory through automatic garbage collection. It uses reference counting to track how many references point to an object, and when the count reaches zero, the memory is freed. Python also has a cycle detector to handle circular references. All Python objects are stored in a private heap, and the memory manager allocates heap space for objects.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of encapsulation in Python.",
      "Sample answer 3 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 3 for: What are Python generators and how do they differ from regular functions?"
    ]
  },
  {
    "question": "What are Python generators and how do they differ from regular functions?",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: What are Python generators and how do they differ from regular functions?",
    "incorrect_answers": [
      "Lists are mutable, meaning they can be modified after creation, while tuples are immutable. Lists use square brackets [] and tuples use parentheses (). Lists generally consume more memory than tuples and are slower for iteration.",
      "Sample answer 3 for: Explain the concept of recursion with an example.",
      "Sample answer 3 for: What are Python context managers and how do they work?"
    ]
  },
  {
    "question": "What are Python context managers and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What are Python context managers and how do they work?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 1 for: What are Python generators and how do they differ from regular functions?",
      "Lists are mutable, meaning they can be modified after creation, while tuples are immutable. Lists use square brackets [] and tuples use parentheses (). Lists generally consume more memory than tuples and are slower for iteration."
    ]
  },
  {
    "question": "Explain how Python handles memory management.",
    "category": "python_basics",
    "correct_answer": "Python uses automatic memory management through reference counting and garbage collection. When objects are created, Python allocates memory from a private heap. It tracks references to objects, and when an object's reference count drops to zero, the memory is reclaimed. Python also has a cyclic garbage collector to detect and collect objects in reference cycles that would otherwise not be collected.",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python context managers and how do they work?",
      "Sample answer 2 for: Explain the concept of recursion with an example.",
      "Sample answer 1 for: Explain the concept of composition vs inheritance with examples."
    ]
  },
  {
    "question": "Explain the concept of inheritance in Python with an example.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: Explain the concept of inheritance in Python with an example.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 3 for: How would you implement a graph data structure in Python?",
      "Sample answer 1 for: What are abstract classes and interfaces in Python?"
    ]
  },
  {
    "question": "Explain how Python handles memory management.",
    "category": "python_basics",
    "correct_answer": "Python manages memory through automatic garbage collection. It uses reference counting to track how many references point to an object, and when the count reaches zero, the memory is freed. Python also has a cycle detector to handle circular references. All Python objects are stored in a private heap, and the memory manager allocates heap space for objects.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of dynamic programming with an example.",
      "Sample answer 1 for: What are Python decorators and how do they work?",
      "Sample answer 1 for: What are Python's magic methods and how would you use them?"
    ]
  },
  {
    "question": "Explain the concept of dynamic programming with an example.",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: Explain the concept of dynamic programming with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of backtracking with an example.",
      "Sample answer 2 for: What are Python's magic methods and how would you use them?",
      "Sample answer 2 for: What is the __init__ method in Python and how is it used?"
    ]
  },
  {
    "question": "What is the Global Interpreter Lock (GIL) in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 3 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 3 for: What is method overriding and how does it work in Python?"
    ]
  },
  {
    "question": "Explain how Python handles memory management.",
    "category": "python_basics",
    "correct_answer": "Python uses automatic memory management with a private heap to store objects and data structures. It has a built-in garbage collector that reclaims memory from objects that are no longer referenced. Python uses reference counting as its primary memory management technique, along with cycle-detecting garbage collection to handle circular references.",
    "incorrect_answers": [
      "Sample answer 3 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 1 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 3 for: Explain the concept of hash tables and their implementation in Python."
    ]
  },
  {
    "question": "Explain the quicksort algorithm and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: Explain the quicksort algorithm and its time complexity.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of duck typing in Python.",
      "Sample answer 2 for: Explain the concept of coroutines in Python.",
      "Sample answer 2 for: What are Python context managers and how do they work?"
    ]
  },
  {
    "question": "Explain the concept of hash tables and their implementation in Python.",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: Explain the concept of hash tables and their implementation in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 2 for: Explain the concept of duck typing in Python.",
      "Sample answer 1 for: What are Python descriptors and how do they work?"
    ]
  },
  {
    "question": "What is the difference between a list and a tuple in Python?",
    "category": "python_basics",
    "correct_answer": "Lists are mutable collections that can be modified after creation, while tuples are immutable. Lists are defined using square brackets [], while tuples use parentheses (). Tuples are more memory-efficient and can be used as dictionary keys (since they're immutable), which lists cannot.",
    "incorrect_answers": [
      "Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 2 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 1 for: Explain the concept of binary search and its time complexity."
    ]
  },
  {
    "question": "What are Python decorators and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: What are Python decorators and how do they work?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 1 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 1 for: What is the difference between multiprocessing and multithreading in Python?"
    ]
  },
  {
    "question": "How would you implement a graph data structure in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: How would you implement a graph data structure in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of duck typing in Python.",
      "Sample answer 2 for: Explain the concept of recursion with an example.",
      "Sample answer 1 for: How would you find the kth largest element in an unsorted array?"
    ]
  },
  {
    "question": "How would you implement a graph data structure in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: How would you implement a graph data structure in Python?",
    "incorrect_answers": [
      "Lists are mutable collections that can be modified after creation, while tuples are immutable. Lists are defined using square brackets [], while tuples use parentheses (). Tuples are more memory-efficient and can be used as dictionary keys (since they're immutable), which lists cannot.",
      "Sample answer 2 for: How would you implement a linked list in Python?",
      "Sample answer 2 for: Explain the quicksort algorithm and its time complexity."
    ]
  },
  {
    "question": "What are Python descriptors and how do they work?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: What are Python descriptors and how do they work?",
    "incorrect_answers": [
      "Sample answer 1 for: What is a heap data structure and when would you use it?",
      "Sample answer 3 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 1 for: What is method overriding and how does it work in Python?"
    ]
  },
  {
    "question": "Explain the concept of binary search and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: Explain the concept of binary search and its time complexity.",
    "incorrect_answers": [
      "Sample answer 2 for: What is the difference between a stack and a queue?",
      "Sample answer 2 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 3 for: Explain the difference between depth-first search and breadth-first search."
    ]
  },
  {
    "question": "What is the traveling salesman problem and how would you approach it?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: What is the traveling salesman problem and how would you approach it?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of closures in Python with an example.",
      "Sample answer 3 for: What are Python's magic methods and how would you use them?",
      "Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?"
    ]
  },
  {
    "question": "What are Python decorators and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: What are Python decorators and how do they work?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of recursion with an example.",
      "Sample answer 1 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 1 for: What are Python's magic methods and how would you use them?"
    ]
  },
  {
    "question": "Explain the concept of closures in Python with an example.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the concept of closures in Python with an example.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 1 for: What is the __init__ method in Python and how is it used?"
    ]
  },
  {
    "question": "Explain the concept of metaprogramming in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the concept of metaprogramming in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 2 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 2 for: Explain the concept of coroutines in Python."
    ]
  },
  {
    "question": "What are Python descriptors and how do they work?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: What are Python descriptors and how do they work?",
    "incorrect_answers": [
      "Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 3 for: Explain the concept of dynamic programming with an example.",
      "Sample answer 2 for: Explain the concept of inheritance in Python with an example."
    ]
  },
  {
    "question": "Explain the difference between '==' and 'is' operators in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: Explain the difference between '==' and 'is' operators in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python context managers and how do they work?",
      "Sample answer 1 for: Explain the concept of encapsulation in Python.",
      "Python manages memory through automatic garbage collection. It uses reference counting to track how many references point to an object, and when the count reaches zero, the memory is freed. Python also has a cycle detector to handle circular references. All Python objects are stored in a private heap, and the memory manager allocates heap space for objects."
    ]
  },
  {
    "question": "What are Python descriptors and how do they work?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: What are Python descriptors and how do they work?",
    "incorrect_answers": [
      "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 1 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 3 for: Explain the quicksort algorithm and its time complexity."
    ]
  },
  {
    "question": "Explain the concept of inheritance in Python with an example.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the concept of inheritance in Python with an example.",
    "incorrect_answers": [
      "Sample answer 3 for: How does exception handling work in Python?",
      "Sample answer 2 for: Explain the concept of recursion with an example.",
      "Sample answer 2 for: How would you find the kth largest element in an unsorted array?"
    ]
  },
  {
    "question": "Explain the concept of backtracking with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: Explain the concept of backtracking with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of duck typing in Python.",
      "Sample answer 3 for: What is method overriding and how does it work in Python?",
      "Sample answer 3 for: Explain the concept of coroutines in Python."
    ]
  },
  {
    "question": "Explain the concept of backtracking with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: Explain the concept of backtracking with an example.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 1 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 3 for: What is the difference between a greedy algorithm and dynamic programming?"
    ]
  },
  {
    "question": "What are metaclasses in Python and how would you use them?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What are metaclasses in Python and how would you use them?",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python context managers and how do they work?",
      "Sample answer 1 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 3 for: Explain the difference between depth-first search and breadth-first search."
    ]
  },
  {
    "question": "Explain how Python handles memory management.",
    "category": "python_basics",
    "correct_answer": "Python uses automatic memory management with a private heap to store objects and data structures. It has a built-in garbage collector that reclaims memory from objects that are no longer referenced. Python uses reference counting as its primary memory management technique, along with cycle-detecting garbage collection to handle circular references.",
    "incorrect_answers": [
      "Sample answer 1 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 1 for: Explain the difference between class methods, static methods, and instance methods.",
      "Sample answer 1 for: Explain the concept of duck typing in Python."
    ]
  },
  {
    "question": "What is the __init__ method in Python and how is it used?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: What is the __init__ method in Python and how is it used?",
    "incorrect_answers": [
      "Sample answer 2 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 2 for: What are Python descriptors and how do they work?"
    ]
  },
  {
    "question": "Explain the concept of backtracking with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: Explain the concept of backtracking with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: How does exception handling work in Python?",
      "Sample answer 1 for: Explain the difference between class methods, static methods, and instance methods.",
      "Sample answer 2 for: Explain the concept of metaprogramming in Python."
    ]
  },
  {
    "question": "Explain the time complexity of common operations in Python dictionaries.",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: Explain the time complexity of common operations in Python dictionaries.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of recursion with an example.",
      "Sample answer 2 for: What are Python context managers and how do they work?",
      "Sample answer 2 for: What are Python's magic methods and how would you use them?"
    ]
  },
  {
    "question": "What are Python type hints and how do they improve code quality?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: What are Python type hints and how do they improve code quality?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 2 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 1 for: What is the traveling salesman problem and how would you approach it?"
    ]
  },
  {
    "question": "How would you implement a breadth-first search algorithm?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: How would you implement a breadth-first search algorithm?",
    "incorrect_answers": [
      "Sample answer 1 for: How would you implement a linked list in Python?",
      "Lists are mutable collections that can be modified after creation, while tuples are immutable. Lists are defined using square brackets [], while tuples use parentheses (). Tuples are more memory-efficient and can be used as dictionary keys (since they're immutable), which lists cannot.",
      "Sample answer 3 for: Explain the concept of backtracking with an example."
    ]
  },
  {
    "question": "What are Python's data model and how does it relate to special methods?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: What are Python's data model and how does it relate to special methods?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 2 for: Explain the concept of backtracking with an example.",
      "Sample answer 2 for: What is the traveling salesman problem and how would you approach it?"
    ]
  },
  {
    "question": "Explain the time complexity of common operations in Python dictionaries.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries.",
    "incorrect_answers": [
      "Sample answer 1 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 2 for: How would you implement a linked list in Python?",
      "Sample answer 2 for: What is a heap data structure and when would you use it?"
    ]
  },
  {
    "question": "Explain the time complexity of common operations in Python dictionaries.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries.",
    "incorrect_answers": [
      "Sample answer 3 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 1 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 1 for: Explain the concept of dynamic programming with an example."
    ]
  },
  {
    "question": "Explain the concept of monkey patching in Python and when it might be useful.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the concept of monkey patching in Python and when it might be useful.",
    "incorrect_answers": [
      "Sample answer 1 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 3 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 3 for: How would you implement a breadth-first search algorithm?"
    ]
  },
  {
    "question": "What is the difference between a list and a tuple in Python?",
    "category": "python_basics",
    "correct_answer": "The main difference is mutability: lists can be changed after creation (mutable) while tuples cannot (immutable). Lists use square brackets and support operations like append() and extend(), while tuples use parentheses and don't allow modification after creation. Tuples are more memory efficient and slightly faster than lists.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of hash tables and their implementation in Python.",
      "Python uses automatic memory management through reference counting and garbage collection. When objects are created, Python allocates memory from a private heap. It tracks references to objects, and when an object's reference count drops to zero, the memory is reclaimed. Python also has a cyclic garbage collector to detect and collect objects in reference cycles that would otherwise not be collected.",
      "Sample answer 1 for: Explain the concept of composition vs inheritance with examples."
    ]
  },
  {
    "question": "What are Python's magic methods and how would you use them?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What are Python's magic methods and how would you use them?",
    "incorrect_answers": [
      "Sample answer 1 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 3 for: Explain the concept of duck typing in Python.",
      "Sample answer 2 for: Explain the concept of multiple inheritance and the method resolution order in Python."
    ]
  },
  {
    "question": "Explain the concept of encapsulation in Python.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the concept of encapsulation in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 1 for: How would you implement a linked list in Python?",
      "Sample answer 3 for: Explain the difference between class methods, static methods, and instance methods."
    ]
  },
  {
    "question": "What is the difference between a greedy algorithm and dynamic programming?",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: What is the difference between a greedy algorithm and dynamic programming?",
    "incorrect_answers": [
      "Sample answer 2 for: What is the difference between a stack and a queue?",
      "Sample answer 2 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 2 for: What are metaclasses in Python and how would you use them?"
    ]
  },
  {
    "question": "What is method overriding and how does it work in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What is method overriding and how does it work in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 1 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 2 for: What are Python's data model and how does it relate to special methods?"
    ]
  },
  {
    "question": "Explain the time complexity of common operations in Python dictionaries.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 3 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 2 for: What are abstract classes and interfaces in Python?"
    ]
  },
  {
    "question": "Explain the concept of dynamic programming with an example.",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: Explain the concept of dynamic programming with an example.",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python descriptors and how do they work?",
      "Sample answer 2 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python."
    ]
  },
  {
    "question": "Explain the concept of hash tables and their implementation in Python.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the concept of hash tables and their implementation in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of recursion with an example.",
      "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search."
    ]
  },
  {
    "question": "What are Python context managers and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What are Python context managers and how do they work?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 3 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 1 for: What are Python decorators and how do they work?"
    ]
  },
  {
    "question": "Explain the difference between depth-first search and breadth-first search.",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: Explain the difference between depth-first search and breadth-first search.",
    "incorrect_answers": [
      "Sample answer 1 for: What are abstract classes and interfaces in Python?",
      "Sample answer 1 for: How would you implement a graph data structure in Python?",
      "Sample answer 3 for: What is the traveling salesman problem and how would you approach it?"
    ]
  },
  {
    "question": "Explain the time complexity of common operations in Python dictionaries.",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: Explain the time complexity of common operations in Python dictionaries.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the difference between class methods, static methods, and instance methods.",
      "Sample answer 3 for: How would you implement a graph data structure in Python?",
      "Sample answer 3 for: Explain the concept of recursion with an example."
    ]
  },
  {
    "question": "What is polymorphism and how is it implemented in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What is polymorphism and how is it implemented in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries.",
      "Lists are mutable, meaning they can be modified after creation, while tuples are immutable. Lists use square brackets [] and tuples use parentheses (). Lists generally consume more memory than tuples and are slower for iteration."
    ]
  },
  {
    "question": "What is the difference between a list and a tuple in Python?",
    "category": "python_basics",
    "correct_answer": "Lists are mutable collections that can be modified after creation, while tuples are immutable. Lists are defined using square brackets [], while tuples use parentheses (). Tuples are more memory-efficient and can be used as dictionary keys (since they're immutable), which lists cannot.",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python decorators and how do they work?",
      "Sample answer 2 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 3 for: What is the traveling salesman problem and how would you approach it?"
    ]
  },
  {
    "question": "How would you implement a linked list in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: How would you implement a linked list in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: What are abstract classes and interfaces in Python?",
      "Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Lists are mutable collections that can be modified after creation, while tuples are immutable. Lists are defined using square brackets [], while tuples use parentheses (). Tuples are more memory-efficient and can be used as dictionary keys (since they're immutable), which lists cannot."
    ]
  },
  {
    "question": "What is the Global Interpreter Lock (GIL) in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 3 for: Explain the asyncio module in Python and how it works.",
      "Sample answer 3 for: How would you implement a breadth-first search algorithm?"
    ]
  },
  {
    "question": "How would you find the longest common subsequence of two strings?",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: How would you find the longest common subsequence of two strings?",
    "incorrect_answers": [
      "Sample answer 1 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 3 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 3 for: Explain the concept of dynamic programming with an example."
    ]
  },
  {
    "question": "How would you find the kth largest element in an unsorted array?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you find the kth largest element in an unsorted array?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 3 for: Explain the concept of composition vs inheritance with examples."
    ]
  },
  {
    "question": "What are abstract classes and interfaces in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What are abstract classes and interfaces in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 2 for: How would you detect a cycle in a linked list?",
      "Sample answer 1 for: Explain the concept of multiple inheritance and the method resolution order in Python."
    ]
  },
  {
    "question": "Explain the concept of duck typing in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: Explain the concept of duck typing in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 3 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 1 for: What are Python's data model and how does it relate to special methods?"
    ]
  },
  {
    "question": "What are binary trees and how would you implement one in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: What are binary trees and how would you implement one in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python decorators and how do they work?",
      "Sample answer 2 for: Explain the concept of closures in Python with an example.",
      "Sample answer 2 for: Explain the concept of coroutines in Python."
    ]
  },
  {
    "question": "Explain the difference between class methods, static methods, and instance methods.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: Explain the difference between class methods, static methods, and instance methods.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 2 for: Explain the concept of backtracking with an example.",
      "Lists are mutable, meaning they can be modified after creation, while tuples are immutable. Lists use square brackets [] and tuples use parentheses (). Lists generally consume more memory than tuples and are slower for iteration."
    ]
  },
  {
    "question": "What are Python descriptors and how do they work?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: What are Python descriptors and how do they work?",
    "incorrect_answers": [
      "Sample answer 3 for: How would you implement a linked list in Python?",
      "Sample answer 2 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 3 for: Explain the concept of inheritance in Python with an example."
    ]
  },
  {
    "question": "Explain the concept of binary search and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: Explain the concept of binary search and its time complexity.",
    "incorrect_answers": [
      "Sample answer 1 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 1 for: What are Python context managers and how do they work?",
      "Sample answer 2 for: How would you implement a graph data structure in Python?"
    ]
  },
  {
    "question": "How would you find the kth largest element in an unsorted array?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you find the kth largest element in an unsorted array?",
    "incorrect_answers": [
      "Sample answer 3 for: How would you implement a graph data structure in Python?",
      "Sample answer 2 for: What is the difference between a stack and a queue?",
      "Sample answer 2 for: What are abstract classes and interfaces in Python?"
    ]
  },
  {
    "question": "Explain the concept of list comprehensions in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: Explain the concept of list comprehensions in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python context managers and how do they work?",
      "Sample answer 3 for: What are Python decorators and how do they work?",
      "Sample answer 2 for: What is a heap data structure and when would you use it?"
    ]
  },
  {
    "question": "What is the difference between a list and a tuple in Python?",
    "category": "python_basics",
    "correct_answer": "Lists are mutable collections that can be modified after creation, while tuples are immutable. Lists are defined using square brackets [], while tuples use parentheses (). Tuples are more memory-efficient and can be used as dictionary keys (since they're immutable), which lists cannot.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the difference between class methods, static methods, and instance methods.",
      "Sample answer 2 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 2 for: How would you implement a breadth-first search algorithm?"
    ]
  },
  {
    "question": "Explain the concept of monkey patching in Python and when it might be useful.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the concept of monkey patching in Python and when it might be useful.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search.",
      "Sample answer 2 for: Explain the difference between '==' and 'is' operators in Python.",
      "Sample answer 2 for: What is method overriding and how does it work in Python?"
    ]
  },
  {
    "question": "What are the advantages and disadvantages of using arrays vs linked lists?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?",
    "incorrect_answers": [
      "Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 2 for: What are Python decorators and how do they work?",
      "Sample answer 2 for: How would you implement a graph data structure in Python?"
    ]
  },
  {
    "question": "What is polymorphism and how is it implemented in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What is polymorphism and how is it implemented in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 3 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 3 for: What are metaclasses in Python and how would you use them?"
    ]
  },
  {
    "question": "How would you implement a breadth-first search algorithm?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: How would you implement a breadth-first search algorithm?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of duck typing in Python.",
      "Sample answer 1 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 3 for: Explain the quicksort algorithm and its time complexity."
    ]
  },
  {
    "question": "Explain the concept of inheritance in Python with an example.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: Explain the concept of inheritance in Python with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the difference between class methods, static methods, and instance methods.",
      "Sample answer 1 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?"
    ]
  },
  {
    "question": "What is the traveling salesman problem and how would you approach it?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: What is the traveling salesman problem and how would you approach it?",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python descriptors and how do they work?",
      "Sample answer 3 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 3 for: How would you detect a cycle in a linked list?"
    ]
  },
  {
    "question": "Explain the concept of coroutines in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the concept of coroutines in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?"
    ]
  },
  {
    "question": "How would you implement a linked list in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: How would you implement a linked list in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 3 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 3 for: What are Python context managers and how do they work?"
    ]
  },
  {
    "question": "How would you detect a cycle in a linked list?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: How would you detect a cycle in a linked list?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 3 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 3 for: Explain the concept of monkey patching in Python and when it might be useful."
    ]
  },
  {
    "question": "What are Python type hints and how do they improve code quality?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: What are Python type hints and how do they improve code quality?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 3 for: Explain the concept of encapsulation in Python.",
      "Sample answer 3 for: Explain the concept of backtracking with an example."
    ]
  },
  {
    "question": "Explain the concept of closures in Python with an example.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the concept of closures in Python with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 2 for: What are Python context managers and how do they work?",
      "Sample answer 2 for: Explain the difference between class methods, static methods, and instance methods."
    ]
  },
  {
    "question": "Explain the concept of backtracking with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: Explain the concept of backtracking with an example.",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python descriptors and how do they work?",
      "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 2 for: Explain the difference between class methods, static methods, and instance methods."
    ]
  },
  {
    "question": "Explain the asyncio module in Python and how it works.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the asyncio module in Python and how it works.",
    "incorrect_answers": [
      "Python uses automatic memory management through reference counting and garbage collection. When objects are created, Python allocates memory from a private heap. It tracks references to objects, and when an object's reference count drops to zero, the memory is reclaimed. Python also has a cyclic garbage collector to detect and collect objects in reference cycles that would otherwise not be collected.",
      "Sample answer 2 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 1 for: Explain the concept of list comprehensions in Python."
    ]
  },
  {
    "question": "How would you implement a linked list in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: How would you implement a linked list in Python?",
    "incorrect_answers": [
      "Python uses automatic memory management with a private heap to store objects and data structures. It has a built-in garbage collector that reclaims memory from objects that are no longer referenced. Python uses reference counting as its primary memory management technique, along with cycle-detecting garbage collection to handle circular references.",
      "Sample answer 1 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 1 for: Explain the concept of hash tables and their implementation in Python."
    ]
  },
  {
    "question": "What is method overriding and how does it work in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What is method overriding and how does it work in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 3 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 2 for: Explain the concept of closures in Python with an example."
    ]
  },
  {
    "question": "Explain the concept of metaprogramming in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the concept of metaprogramming in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 2 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 1 for: Explain the concept of encapsulation in Python."
    ]
  },
  {
    "question": "What is the Global Interpreter Lock (GIL) in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: What are abstract classes and interfaces in Python?",
      "Sample answer 1 for: What is method overriding and how does it work in Python?",
      "Sample answer 3 for: How would you implement a graph data structure in Python?"
    ]
  },
  {
    "question": "What are Python type hints and how do they improve code quality?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: What are Python type hints and how do they improve code quality?",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python decorators and how do they work?",
      "Sample answer 1 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 2 for: Explain the asyncio module in Python and how it works."
    ]
  },
  {
    "question": "Explain the concept of metaprogramming in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the concept of metaprogramming in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of closures in Python with an example.",
      "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 2 for: Explain the asyncio module in Python and how it works."
    ]
  },
  {
    "question": "What is the __init__ method in Python and how is it used?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What is the __init__ method in Python and how is it used?",
    "incorrect_answers": [
      "Python uses automatic memory management through reference counting and garbage collection. When objects are created, Python allocates memory from a private heap. It tracks references to objects, and when an object's reference count drops to zero, the memory is reclaimed. Python also has a cyclic garbage collector to detect and collect objects in reference cycles that would otherwise not be collected.",
      "Sample answer 2 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries."
    ]
  },
  {
    "question": "What are Python context managers and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What are Python context managers and how do they work?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 2 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 1 for: How would you implement a linked list in Python?"
    ]
  },
  {
    "question": "Explain the concept of coroutines in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the concept of coroutines in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of recursion with an example.",
      "Sample answer 2 for: What is a heap data structure and when would you use it?",
      "Sample answer 2 for: Explain the concept of dynamic programming with an example."
    ]
  },
  {
    "question": "What is method overriding and how does it work in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What is method overriding and how does it work in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 2 for: How would you detect a cycle in a linked list?",
      "Sample answer 3 for: Explain the concept of metaprogramming in Python."
    ]
  },
  {
    "question": "What is method overriding and how does it work in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What is method overriding and how does it work in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of dynamic programming with an example.",
      "Sample answer 2 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 2 for: Explain the concept of closures in Python with an example."
    ]
  },
  {
    "question": "Explain the difference between depth-first search and breadth-first search.",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: Explain the difference between depth-first search and breadth-first search.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of closures in Python with an example.",
      "Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 2 for: What is a heap data structure and when would you use it?"
    ]
  },
  {
    "question": "Explain how Python handles memory management.",
    "category": "python_basics",
    "correct_answer": "Python manages memory through automatic garbage collection. It uses reference counting to track how many references point to an object, and when the count reaches zero, the memory is freed. Python also has a cycle detector to handle circular references. All Python objects are stored in a private heap, and the memory manager allocates heap space for objects.",
    "incorrect_answers": [
      "Sample answer 1 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 3 for: How would you detect a cycle in a linked list?",
      "Sample answer 2 for: What is the difference between a stack and a queue?"
    ]
  },
  {
    "question": "What is the difference between multiprocessing and multithreading in Python?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 2 for: What are Python context managers and how do they work?",
      "Sample answer 2 for: Explain the difference between '==' and 'is' operators in Python."
    ]
  },
  {
    "question": "What are Python type hints and how do they improve code quality?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: What are Python type hints and how do they improve code quality?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 1 for: What are Python's magic methods and how would you use them?"
    ]
  },
  {
    "question": "Explain the concept of encapsulation in Python.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the concept of encapsulation in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: How does exception handling work in Python?",
      "Sample answer 2 for: Explain the concept of duck typing in Python.",
      "Sample answer 1 for: Explain the difference between class methods, static methods, and instance methods."
    ]
  },
  {
    "question": "Explain the concept of inheritance in Python with an example.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: Explain the concept of inheritance in Python with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 3 for: What are metaclasses in Python and how would you use them?"
    ]
  },
  {
    "question": "What is a heap data structure and when would you use it?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: What is a heap data structure and when would you use it?",
    "incorrect_answers": [
      "Sample answer 1 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 2 for: How does exception handling work in Python?",
      "Sample answer 1 for: What is method overriding and how does it work in Python?"
    ]
  },
  {
    "question": "What are Python's data model and how does it relate to special methods?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What are Python's data model and how does it relate to special methods?",
    "incorrect_answers": [
      "Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 3 for: What is a heap data structure and when would you use it?",
      "Sample answer 3 for: What is the traveling salesman problem and how would you approach it?"
    ]
  },
  {
    "question": "What are Python decorators and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: What are Python decorators and how do they work?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 1 for: Explain the concept of duck typing in Python.",
      "Sample answer 2 for: How would you detect a cycle in a linked list?"
    ]
  },
  {
    "question": "What are Python generators and how do they differ from regular functions?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What are Python generators and how do they differ from regular functions?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 2 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 3 for: How would you implement a linked list in Python?"
    ]
  },
  {
    "question": "How does exception handling work in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: How does exception handling work in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: How would you implement a linked list in Python?",
      "Sample answer 1 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 3 for: What is the difference between a greedy algorithm and dynamic programming?"
    ]
  },
  {
    "question": "What are binary trees and how would you implement one in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: What are binary trees and how would you implement one in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: What is the difference between a stack and a queue?",
      "Sample answer 1 for: Explain the concept of backtracking with an example.",
      "Sample answer 3 for: What are Python type hints and how do they improve code quality?"
    ]
  },
  {
    "question": "What are Python context managers and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What are Python context managers and how do they work?",
    "incorrect_answers": [
      "Sample answer 2 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 3 for: How would you find the kth largest element in an unsorted array?"
    ]
  },
  {
    "question": "Explain the difference between depth-first search and breadth-first search.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the difference between depth-first search and breadth-first search.",
    "incorrect_answers": [
      "Sample answer 2 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 1 for: Explain the concept of closures in Python with an example.",
      "Sample answer 2 for: Explain the concept of composition vs inheritance with examples."
    ]
  },
  {
    "question": "Explain the concept of composition vs inheritance with examples.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: Explain the concept of composition vs inheritance with examples.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 3 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful."
    ]
  },
  {
    "question": "Explain the concept of list comprehensions in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: Explain the concept of list comprehensions in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 1 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 3 for: Explain the asyncio module in Python and how it works."
    ]
  },
  {
    "question": "Explain the concept of recursion with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: Explain the concept of recursion with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 3 for: What are Python's magic methods and how would you use them?",
      "Sample answer 3 for: Explain the concept of duck typing in Python."
    ]
  },
  {
    "question": "Explain the concept of multiple inheritance and the method resolution order in Python.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python descriptors and how do they work?",
      "Sample answer 1 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 3 for: Explain the concept of dynamic programming with an example."
    ]
  },
  {
    "question": "Explain the time complexity of common operations in Python dictionaries.",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: Explain the time complexity of common operations in Python dictionaries.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of coroutines in Python.",
      "Sample answer 1 for: What is a heap data structure and when would you use it?",
      "Sample answer 3 for: What is the difference between a greedy algorithm and dynamic programming?"
    ]
  },
  {
    "question": "Explain the concept of monkey patching in Python and when it might be useful.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful.",
    "incorrect_answers": [
      "Sample answer 2 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 1 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 3 for: What is a heap data structure and when would you use it?"
    ]
  },
  {
    "question": "What is the __init__ method in Python and how is it used?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What is the __init__ method in Python and how is it used?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 2 for: What is the difference between a stack and a queue?"
    ]
  },
  {
    "question": "Explain the difference between depth-first search and breadth-first search.",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search.",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python context managers and how do they work?",
      "Sample answer 1 for: Explain the concept of dynamic programming with an example.",
      "Sample answer 2 for: What are metaclasses in Python and how would you use them?"
    ]
  },
  {
    "question": "Explain the concept of inheritance in Python with an example.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: Explain the concept of inheritance in Python with an example.",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 2 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 1 for: What are Python descriptors and how do they work?"
    ]
  },
  {
    "question": "What are Python context managers and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: What are Python context managers and how do they work?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 1 for: Explain the concept of binary search and its time complexity.",
      "The main difference is mutability: lists can be changed after creation (mutable) while tuples cannot (immutable). Lists use square brackets and support operations like append() and extend(), while tuples use parentheses and don't allow modification after creation. Tuples are more memory efficient and slightly faster than lists."
    ]
  },
  {
    "question": "What are the advantages and disadvantages of using arrays vs linked lists?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of encapsulation in Python.",
      "Sample answer 3 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 1 for: Explain the quicksort algorithm and its time complexity."
    ]
  },
  {
    "question": "What is the difference between a stack and a queue?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: What is the difference between a stack and a queue?",
    "incorrect_answers": [
      "Python uses automatic memory management through reference counting and garbage collection. When objects are created, Python allocates memory from a private heap. It tracks references to objects, and when an object's reference count drops to zero, the memory is reclaimed. Python also has a cyclic garbage collector to detect and collect objects in reference cycles that would otherwise not be collected.",
      "Sample answer 2 for: Explain the concept of closures in Python with an example.",
      "Sample answer 2 for: What is the traveling salesman problem and how would you approach it?"
    ]
  },
  {
    "question": "Explain the concept of encapsulation in Python.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: Explain the concept of encapsulation in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: What are abstract classes and interfaces in Python?",
      "Sample answer 3 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 3 for: Explain the asyncio module in Python and how it works."
    ]
  },
  {
    "question": "Explain the concept of coroutines in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the concept of coroutines in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 1 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 2 for: What are abstract classes and interfaces in Python?"
    ]
  },
  {
    "question": "Explain the concept of list comprehensions in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: Explain the concept of list comprehensions in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python decorators and how do they work?",
      "Sample answer 3 for: What is a heap data structure and when would you use it?",
      "Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?"
    ]
  },
  {
    "question": "Explain how Python handles memory management.",
    "category": "python_basics",
    "correct_answer": "Python uses automatic memory management through reference counting and garbage collection. When objects are created, Python allocates memory from a private heap. It tracks references to objects, and when an object's reference count drops to zero, the memory is reclaimed. Python also has a cyclic garbage collector to detect and collect objects in reference cycles that would otherwise not be collected.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of list comprehensions in Python.",
      "Lists are mutable collections that can be modified after creation, while tuples are immutable. Lists are defined using square brackets [], while tuples use parentheses (). Tuples are more memory-efficient and can be used as dictionary keys (since they're immutable), which lists cannot.",
      "Sample answer 3 for: What is the difference between a stack and a queue?"
    ]
  },
  {
    "question": "How would you implement a breadth-first search algorithm?",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: How would you implement a breadth-first search algorithm?",
    "incorrect_answers": [
      "Sample answer 2 for: How would you detect a cycle in a linked list?",
      "Sample answer 3 for: Explain the concept of encapsulation in Python.",
      "Sample answer 1 for: What is the difference between a stack and a queue?"
    ]
  },
  {
    "question": "What is polymorphism and how is it implemented in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What is polymorphism and how is it implemented in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 2 for: Explain the difference between class methods, static methods, and instance methods.",
      "Sample answer 2 for: What are Python generators and how do they differ from regular functions?"
    ]
  },
  {
    "question": "Explain the concept of encapsulation in Python.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the concept of encapsulation in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 1 for: What is the Global Interpreter Lock (GIL) in Python?"
    ]
  },
  {
    "question": "What is the difference between multiprocessing and multithreading in Python?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python decorators and how do they work?",
      "Sample answer 2 for: What is the traveling salesman problem and how would you approach it?",
      "Python uses automatic memory management with a private heap to store objects and data structures. It has a built-in garbage collector that reclaims memory from objects that are no longer referenced. Python uses reference counting as its primary memory management technique, along with cycle-detecting garbage collection to handle circular references."
    ]
  },
  {
    "question": "Explain the concept of inheritance in Python with an example.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the concept of inheritance in Python with an example.",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 1 for: What is the difference between a stack and a queue?",
      "Sample answer 3 for: Explain the concept of monkey patching in Python and when it might be useful."
    ]
  },
  {
    "question": "How would you find the longest common subsequence of two strings?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you find the longest common subsequence of two strings?",
    "incorrect_answers": [
      "Sample answer 2 for: How does exception handling work in Python?",
      "Sample answer 2 for: What are Python decorators and how do they work?",
      "Sample answer 1 for: How would you find the kth largest element in an unsorted array?"
    ]
  },
  {
    "question": "How would you find the longest common subsequence of two strings?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you find the longest common subsequence of two strings?",
    "incorrect_answers": [
      "Sample answer 3 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 2 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 1 for: What are Python decorators and how do they work?"
    ]
  },
  {
    "question": "What are Python's data model and how does it relate to special methods?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What are Python's data model and how does it relate to special methods?",
    "incorrect_answers": [
      "Sample answer 3 for: What are abstract classes and interfaces in Python?",
      "Sample answer 2 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 3 for: What is the difference between a greedy algorithm and dynamic programming?"
    ]
  },
  {
    "question": "Explain the concept of monkey patching in Python and when it might be useful.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful.",
    "incorrect_answers": [
      "Lists are mutable, meaning they can be modified after creation, while tuples are immutable. Lists use square brackets [] and tuples use parentheses (). Lists generally consume more memory than tuples and are slower for iteration.",
      "Sample answer 2 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 1 for: How would you implement a linked list in Python?"
    ]
  },
  {
    "question": "Explain the quicksort algorithm and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: Explain the quicksort algorithm and its time complexity.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the asyncio module in Python and how it works.",
      "Sample answer 1 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 1 for: Explain the concept of multiple inheritance and the method resolution order in Python."
    ]
  },
  {
    "question": "Explain the concept of backtracking with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: Explain the concept of backtracking with an example.",
    "incorrect_answers": [
      "Sample answer 3 for: What is a heap data structure and when would you use it?",
      "Sample answer 1 for: How would you implement a linked list in Python?",
      "Sample answer 2 for: Explain the time complexity of common operations in Python dictionaries."
    ]
  },
  {
    "question": "Explain the concept of list comprehensions in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: Explain the concept of list comprehensions in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of encapsulation in Python.",
      "Sample answer 3 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 3 for: What are abstract classes and interfaces in Python?"
    ]
  },
  {
    "question": "What are binary trees and how would you implement one in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: What are binary trees and how would you implement one in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 3 for: What are metaclasses in Python and how would you use them?"
    ]
  },
  {
    "question": "Explain the concept of binary search and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: Explain the concept of binary search and its time complexity.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of backtracking with an example.",
      "Sample answer 3 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 2 for: What is the __init__ method in Python and how is it used?"
    ]
  },
  {
    "question": "Explain the quicksort algorithm and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: Explain the quicksort algorithm and its time complexity.",
    "incorrect_answers": [
      "Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 1 for: What are Python type hints and how do they improve code quality?",
      "Python manages memory through automatic garbage collection. It uses reference counting to track how many references point to an object, and when the count reaches zero, the memory is freed. Python also has a cycle detector to handle circular references. All Python objects are stored in a private heap, and the memory manager allocates heap space for objects."
    ]
  },
  {
    "question": "What is polymorphism and how is it implemented in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What is polymorphism and how is it implemented in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 1 for: What are Python decorators and how do they work?",
      "Sample answer 3 for: What are binary trees and how would you implement one in Python?"
    ]
  },
  {
    "question": "Explain the concept of closures in Python with an example.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the concept of closures in Python with an example.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of encapsulation in Python.",
      "Sample answer 2 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 1 for: Explain the asyncio module in Python and how it works."
    ]
  },
  {
    "question": "Explain the concept of encapsulation in Python.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: Explain the concept of encapsulation in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 2 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 3 for: What is polymorphism and how is it implemented in Python?"
    ]
  },
  {
    "question": "Explain the concept of multiple inheritance and the method resolution order in Python.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 2 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 1 for: Explain the concept of closures in Python with an example."
    ]
  },
  {
    "question": "Explain the concept of composition vs inheritance with examples.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the concept of composition vs inheritance with examples.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 2 for: Explain the concept of backtracking with an example.",
      "Sample answer 2 for: What is polymorphism and how is it implemented in Python?"
    ]
  },
  {
    "question": "Explain the difference between '==' and 'is' operators in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: Explain the difference between '==' and 'is' operators in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of duck typing in Python.",
      "Sample answer 1 for: What are abstract classes and interfaces in Python?",
      "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries."
    ]
  },
  {
    "question": "Explain the concept of composition vs inheritance with examples.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the concept of composition vs inheritance with examples.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of recursion with an example.",
      "Lists are mutable, meaning they can be modified after creation, while tuples are immutable. Lists use square brackets [] and tuples use parentheses (). Lists generally consume more memory than tuples and are slower for iteration.",
      "Sample answer 3 for: How would you implement a breadth-first search algorithm?"
    ]
  },
  {
    "question": "Explain the difference between depth-first search and breadth-first search.",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: Explain the difference between depth-first search and breadth-first search.",
    "incorrect_answers": [
      "Sample answer 1 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 1 for: How would you implement a graph data structure in Python?",
      "Sample answer 2 for: How would you find the longest common subsequence of two strings?"
    ]
  },
  {
    "question": "Explain the quicksort algorithm and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: Explain the quicksort algorithm and its time complexity.",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python context managers and how do they work?",
      "Sample answer 2 for: What are Python descriptors and how do they work?",
      "Sample answer 2 for: What are the advantages and disadvantages of using arrays vs linked lists?"
    ]
  },
  {
    "question": "Explain the difference between depth-first search and breadth-first search.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the difference between depth-first search and breadth-first search.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 1 for: What are Python descriptors and how do they work?",
      "Sample answer 1 for: What are Python's data model and how does it relate to special methods?"
    ]
  },
  {
    "question": "What are Python's magic methods and how would you use them?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: What are Python's magic methods and how would you use them?",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python context managers and how do they work?",
      "Sample answer 1 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 1 for: What is polymorphism and how is it implemented in Python?"
    ]
  },
  {
    "question": "Explain the difference between depth-first search and breadth-first search.",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: Explain the difference between depth-first search and breadth-first search.",
    "incorrect_answers": [
      "Sample answer 1 for: How does exception handling work in Python?",
      "Sample answer 2 for: What is a heap data structure and when would you use it?",
      "Sample answer 2 for: How would you find the kth largest element in an unsorted array?"
    ]
  },
  {
    "question": "What is the __init__ method in Python and how is it used?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What is the __init__ method in Python and how is it used?",
    "incorrect_answers": [
      "Sample answer 3 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 1 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 2 for: What are Python's data model and how does it relate to special methods?"
    ]
  },
  {
    "question": "What is the Global Interpreter Lock (GIL) in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python context managers and how do they work?",
      "Sample answer 3 for: What are abstract classes and interfaces in Python?",
      "Sample answer 2 for: Explain the difference between class methods, static methods, and instance methods."
    ]
  },
  {
    "question": "What are Python type hints and how do they improve code quality?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What are Python type hints and how do they improve code quality?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 1 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 2 for: Explain the difference between depth-first search and breadth-first search."
    ]
  },
  {
    "question": "What is a heap data structure and when would you use it?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: What is a heap data structure and when would you use it?",
    "incorrect_answers": [
      "Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 1 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries."
    ]
  },
  {
    "question": "What are binary trees and how would you implement one in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: What are binary trees and how would you implement one in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python's magic methods and how would you use them?",
      "Sample answer 2 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 1 for: What is the __init__ method in Python and how is it used?"
    ]
  },
  {
    "question": "Explain the concept of hash tables and their implementation in Python.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the concept of hash tables and their implementation in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: What is method overriding and how does it work in Python?",
      "Sample answer 1 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 3 for: What are binary trees and how would you implement one in Python?"
    ]
  },
  {
    "question": "Explain the concept of backtracking with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: Explain the concept of backtracking with an example.",
    "incorrect_answers": [
      "The main difference is mutability: lists can be changed after creation (mutable) while tuples cannot (immutable). Lists use square brackets and support operations like append() and extend(), while tuples use parentheses and don't allow modification after creation. Tuples are more memory efficient and slightly faster than lists.",
      "Sample answer 1 for: How would you implement a linked list in Python?",
      "Sample answer 3 for: Explain the difference between depth-first search and breadth-first search."
    ]
  },
  {
    "question": "What is method overriding and how does it work in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What is method overriding and how does it work in Python?",
    "incorrect_answers": [
      "Lists are mutable collections that can be modified after creation, while tuples are immutable. Lists are defined using square brackets [], while tuples use parentheses (). Tuples are more memory-efficient and can be used as dictionary keys (since they're immutable), which lists cannot.",
      "Sample answer 1 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 1 for: What are metaclasses in Python and how would you use them?"
    ]
  },
  {
    "question": "What is method overriding and how does it work in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: What is method overriding and how does it work in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 2 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 1 for: How does exception handling work in Python?"
    ]
  },
  {
    "question": "What is the difference between a stack and a queue?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: What is the difference between a stack and a queue?",
    "incorrect_answers": [
      "Sample answer 3 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 1 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 1 for: Explain the concept of recursion with an example."
    ]
  },
  {
    "question": "Explain the concept of monkey patching in Python and when it might be useful.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the concept of monkey patching in Python and when it might be useful.",
    "incorrect_answers": [
      "Sample answer 3 for: How would you detect a cycle in a linked list?",
      "Sample answer 3 for: Explain the concept of backtracking with an example.",
      "Sample answer 1 for: What is the __init__ method in Python and how is it used?"
    ]
  },
  {
    "question": "What are Python descriptors and how do they work?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: What are Python descriptors and how do they work?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of encapsulation in Python.",
      "The main difference is mutability: lists can be changed after creation (mutable) while tuples cannot (immutable). Lists use square brackets and support operations like append() and extend(), while tuples use parentheses and don't allow modification after creation. Tuples are more memory efficient and slightly faster than lists.",
      "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries."
    ]
  },
  {
    "question": "How would you implement a graph data structure in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: How would you implement a graph data structure in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of recursion with an example.",
      "Sample answer 3 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 2 for: Explain the concept of recursion with an example."
    ]
  },
  {
    "question": "Explain the concept of inheritance in Python with an example.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the concept of inheritance in Python with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 1 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 2 for: Explain the concept of binary search and its time complexity."
    ]
  },
  {
    "question": "Explain the concept of closures in Python with an example.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: Explain the concept of closures in Python with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 1 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 1 for: Explain the time complexity of common operations in Python dictionaries."
    ]
  },
  {
    "question": "What is polymorphism and how is it implemented in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What is polymorphism and how is it implemented in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 1 for: What is the difference between a stack and a queue?",
      "Sample answer 2 for: Explain the quicksort algorithm and its time complexity."
    ]
  },
  {
    "question": "What are the advantages and disadvantages of using arrays vs linked lists?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: What are the advantages and disadvantages of using arrays vs linked lists?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the difference between class methods, static methods, and instance methods.",
      "Sample answer 2 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 3 for: Explain the difference between depth-first search and breadth-first search."
    ]
  },
  {
    "question": "What are Python descriptors and how do they work?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: What are Python descriptors and how do they work?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of closures in Python with an example.",
      "Sample answer 2 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 1 for: Explain the concept of binary search and its time complexity."
    ]
  },
  {
    "question": "What is the Global Interpreter Lock (GIL) in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: What is the Global Interpreter Lock (GIL) in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: How would you implement a linked list in Python?",
      "Sample answer 2 for: How would you implement a linked list in Python?",
      "The main difference is mutability: lists can be changed after creation (mutable) while tuples cannot (immutable). Lists use square brackets and support operations like append() and extend(), while tuples use parentheses and don't allow modification after creation. Tuples are more memory efficient and slightly faster than lists."
    ]
  },
  {
    "question": "Explain the concept of recursion with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: Explain the concept of recursion with an example.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 1 for: Explain the concept of closures in Python with an example.",
      "Sample answer 2 for: What is a heap data structure and when would you use it?"
    ]
  },
  {
    "question": "Explain the concept of backtracking with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: Explain the concept of backtracking with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of duck typing in Python.",
      "Sample answer 3 for: What are Python's magic methods and how would you use them?",
      "Sample answer 2 for: What are the advantages and disadvantages of using arrays vs linked lists?"
    ]
  },
  {
    "question": "How would you implement a graph data structure in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: How would you implement a graph data structure in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 1 for: Explain the concept of backtracking with an example.",
      "Sample answer 3 for: How would you find the kth largest element in an unsorted array?"
    ]
  },
  {
    "question": "What is the difference between a list and a tuple in Python?",
    "category": "python_basics",
    "correct_answer": "Lists are mutable collections that can be modified after creation, while tuples are immutable. Lists are defined using square brackets [], while tuples use parentheses (). Tuples are more memory-efficient and can be used as dictionary keys (since they're immutable), which lists cannot.",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python descriptors and how do they work?",
      "Sample answer 3 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 2 for: Explain the concept of metaprogramming in Python."
    ]
  },
  {
    "question": "Explain the difference between '==' and 'is' operators in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: Explain the difference between '==' and 'is' operators in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 1 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 1 for: What are Python's magic methods and how would you use them?"
    ]
  },
  {
    "question": "Explain the time complexity of common operations in Python dictionaries.",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: Explain the time complexity of common operations in Python dictionaries.",
    "incorrect_answers": [
      "Sample answer 2 for: What are abstract classes and interfaces in Python?",
      "Sample answer 1 for: How would you implement a linked list in Python?",
      "Sample answer 1 for: What are Python context managers and how do they work?"
    ]
  },
  {
    "question": "What is method overriding and how does it work in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What is method overriding and how does it work in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 2 for: Explain the concept of recursion with an example.",
      "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python."
    ]
  },
  {
    "question": "What are Python context managers and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What are Python context managers and how do they work?",
    "incorrect_answers": [
      "Sample answer 1 for: How would you implement a graph data structure in Python?",
      "Sample answer 2 for: Explain the difference between '==' and 'is' operators in Python.",
      "Sample answer 1 for: What is the difference between a stack and a queue?"
    ]
  },
  {
    "question": "Explain the time complexity of common operations in Python dictionaries.",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: Explain the time complexity of common operations in Python dictionaries.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 2 for: Explain the concept of recursion with an example.",
      "Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?"
    ]
  },
  {
    "question": "How would you implement a linked list in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: How would you implement a linked list in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 3 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 2 for: What are abstract classes and interfaces in Python?"
    ]
  },
  {
    "question": "What is polymorphism and how is it implemented in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What is polymorphism and how is it implemented in Python?",
    "incorrect_answers": [
      "Lists are mutable collections that can be modified after creation, while tuples are immutable. Lists are defined using square brackets [], while tuples use parentheses (). Tuples are more memory-efficient and can be used as dictionary keys (since they're immutable), which lists cannot.",
      "Lists are mutable, meaning they can be modified after creation, while tuples are immutable. Lists use square brackets [] and tuples use parentheses (). Lists generally consume more memory than tuples and are slower for iteration.",
      "Sample answer 3 for: What are Python's magic methods and how would you use them?"
    ]
  },
  {
    "question": "Explain the concept of binary search and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: Explain the concept of binary search and its time complexity.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 1 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 3 for: How would you detect a cycle in a linked list?"
    ]
  },
  {
    "question": "Explain the concept of multiple inheritance and the method resolution order in Python.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: What are abstract classes and interfaces in Python?",
      "Sample answer 2 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?"
    ]
  },
  {
    "question": "What is the difference between multiprocessing and multithreading in Python?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: What is the difference between multiprocessing and multithreading in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: How would you implement a graph data structure in Python?",
      "Sample answer 3 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 1 for: Explain the concept of coroutines in Python."
    ]
  },
  {
    "question": "Explain the concept of recursion with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: Explain the concept of recursion with an example.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 2 for: Explain the concept of closures in Python with an example."
    ]
  },
  {
    "question": "Explain the concept of dynamic programming with an example.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the concept of dynamic programming with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 3 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 3 for: What are Python generators and how do they differ from regular functions?"
    ]
  },
  {
    "question": "What are Python's magic methods and how would you use them?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: What are Python's magic methods and how would you use them?",
    "incorrect_answers": [
      "Python manages memory through automatic garbage collection. It uses reference counting to track how many references point to an object, and when the count reaches zero, the memory is freed. Python also has a cycle detector to handle circular references. All Python objects are stored in a private heap, and the memory manager allocates heap space for objects.",
      "Sample answer 3 for: How would you detect a cycle in a linked list?",
      "Sample answer 2 for: Explain the concept of metaprogramming in Python."
    ]
  },
  {
    "question": "Explain the concept of encapsulation in Python.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: Explain the concept of encapsulation in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 2 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 1 for: Explain the concept of hash tables and their implementation in Python."
    ]
  },
  {
    "question": "Explain the concept of coroutines in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the concept of coroutines in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 1 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 3 for: Explain the concept of backtracking with an example."
    ]
  },
  {
    "question": "What are Python generators and how do they differ from regular functions?",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: What are Python generators and how do they differ from regular functions?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the difference between depth-first search and breadth-first search.",
      "Sample answer 3 for: How would you implement a linked list in Python?",
      "Sample answer 2 for: How would you detect a cycle in a linked list?"
    ]
  },
  {
    "question": "What is a heap data structure and when would you use it?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: What is a heap data structure and when would you use it?",
    "incorrect_answers": [
      "Sample answer 1 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 2 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?"
    ]
  },
  {
    "question": "What are Python's data model and how does it relate to special methods?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What are Python's data model and how does it relate to special methods?",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python descriptors and how do they work?",
      "Sample answer 2 for: How would you implement a linked list in Python?",
      "Sample answer 2 for: What are Python type hints and how do they improve code quality?"
    ]
  },
  {
    "question": "What is the __init__ method in Python and how is it used?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What is the __init__ method in Python and how is it used?",
    "incorrect_answers": [
      "Sample answer 1 for: What is the difference between a stack and a queue?",
      "Sample answer 1 for: Explain the concept of duck typing in Python.",
      "Sample answer 1 for: Explain the concept of list comprehensions in Python."
    ]
  },
  {
    "question": "Explain the concept of metaprogramming in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the concept of metaprogramming in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 2 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 2 for: How would you implement a graph data structure in Python?"
    ]
  },
  {
    "question": "What are Python's magic methods and how would you use them?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What are Python's magic methods and how would you use them?",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python decorators and how do they work?",
      "Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 1 for: What is the Global Interpreter Lock (GIL) in Python?"
    ]
  },
  {
    "question": "What is method overriding and how does it work in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What is method overriding and how does it work in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 1 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 3 for: What is a heap data structure and when would you use it?"
    ]
  },
  {
    "question": "What are Python decorators and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: What are Python decorators and how do they work?",
    "incorrect_answers": [
      "Sample answer 3 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 2 for: Explain the concept of closures in Python with an example.",
      "Sample answer 2 for: Explain the concept of binary search and its time complexity."
    ]
  },
  {
    "question": "What are Python generators and how do they differ from regular functions?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What are Python generators and how do they differ from regular functions?",
    "incorrect_answers": [
      "Sample answer 1 for: What is a heap data structure and when would you use it?",
      "Sample answer 2 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 1 for: What are binary trees and how would you implement one in Python?"
    ]
  },
  {
    "question": "What are metaclasses in Python and how would you use them?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: What are metaclasses in Python and how would you use them?",
    "incorrect_answers": [
      "Python manages memory through automatic garbage collection. It uses reference counting to track how many references point to an object, and when the count reaches zero, the memory is freed. Python also has a cycle detector to handle circular references. All Python objects are stored in a private heap, and the memory manager allocates heap space for objects.",
      "Sample answer 3 for: Explain the difference between '==' and 'is' operators in Python.",
      "Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?"
    ]
  },
  {
    "question": "Explain the concept of hash tables and their implementation in Python.",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: Explain the concept of hash tables and their implementation in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 3 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 3 for: Explain the concept of dynamic programming with an example."
    ]
  },
  {
    "question": "What are Python decorators and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What are Python decorators and how do they work?",
    "incorrect_answers": [
      "Sample answer 3 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 3 for: Explain the difference between '==' and 'is' operators in Python.",
      "Sample answer 1 for: Explain the concept of coroutines in Python."
    ]
  },
  {
    "question": "How would you find the kth largest element in an unsorted array?",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: How would you find the kth largest element in an unsorted array?",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 3 for: How would you implement a graph data structure in Python?"
    ]
  },
  {
    "question": "What are binary trees and how would you implement one in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: What are binary trees and how would you implement one in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of coroutines in Python.",
      "Sample answer 1 for: Explain the concept of closures in Python with an example.",
      "Sample answer 3 for: Explain the concept of binary search and its time complexity."
    ]
  },
  {
    "question": "What is a heap data structure and when would you use it?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: What is a heap data structure and when would you use it?",
    "incorrect_answers": [
      "Sample answer 2 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 1 for: What are Python generators and how do they differ from regular functions?"
    ]
  },
  {
    "question": "Explain the concept of composition vs inheritance with examples.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: Explain the concept of composition vs inheritance with examples.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 3 for: Explain the concept of encapsulation in Python.",
      "Sample answer 2 for: What is the difference between a stack and a queue?"
    ]
  },
  {
    "question": "Explain the difference between '==' and 'is' operators in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: Explain the difference between '==' and 'is' operators in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of backtracking with an example.",
      "Sample answer 2 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 1 for: What is the difference between multiprocessing and multithreading in Python?"
    ]
  },
  {
    "question": "How would you implement a graph data structure in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: How would you implement a graph data structure in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 2 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 2 for: How would you find the longest common subsequence of two strings?"
    ]
  },
  {
    "question": "Explain the concept of closures in Python with an example.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: Explain the concept of closures in Python with an example.",
    "incorrect_answers": [
      "Sample answer 2 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 3 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 1 for: Explain the concept of binary search and its time complexity."
    ]
  },
  {
    "question": "What are Python's magic methods and how would you use them?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What are Python's magic methods and how would you use them?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 1 for: Explain the concept of inheritance in Python with an example.",
      "Python uses automatic memory management through reference counting and garbage collection. When objects are created, Python allocates memory from a private heap. It tracks references to objects, and when an object's reference count drops to zero, the memory is reclaimed. Python also has a cyclic garbage collector to detect and collect objects in reference cycles that would otherwise not be collected."
    ]
  },
  {
    "question": "Explain the concept of hash tables and their implementation in Python.",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: Explain the concept of hash tables and their implementation in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 1 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 1 for: What are binary trees and how would you implement one in Python?"
    ]
  },
  {
    "question": "Explain the concept of inheritance in Python with an example.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: Explain the concept of inheritance in Python with an example.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the difference between '==' and 'is' operators in Python.",
      "Sample answer 1 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 3 for: What are Python type hints and how do they improve code quality?"
    ]
  },
  {
    "question": "What are the advantages and disadvantages of using arrays vs linked lists?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: What are the advantages and disadvantages of using arrays vs linked lists?",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 3 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries."
    ]
  },
  {
    "question": "Explain the asyncio module in Python and how it works.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the asyncio module in Python and how it works.",
    "incorrect_answers": [
      "Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 1 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 3 for: What are metaclasses in Python and how would you use them?"
    ]
  },
  {
    "question": "Explain the quicksort algorithm and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: Explain the quicksort algorithm and its time complexity.",
    "incorrect_answers": [
      "Sample answer 1 for: How would you detect a cycle in a linked list?",
      "Sample answer 3 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 3 for: How would you find the longest common subsequence of two strings?"
    ]
  },
  {
    "question": "What are Python generators and how do they differ from regular functions?",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: What are Python generators and how do they differ from regular functions?",
    "incorrect_answers": [
      "Sample answer 3 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 2 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 3 for: Explain the difference between depth-first search and breadth-first search."
    ]
  },
  {
    "question": "How would you detect a cycle in a linked list?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you detect a cycle in a linked list?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 3 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 2 for: What is the __init__ method in Python and how is it used?"
    ]
  },
  {
    "question": "How would you detect a cycle in a linked list?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you detect a cycle in a linked list?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search.",
      "Sample answer 3 for: How would you find the longest common subsequence of two strings?",
      "Python uses automatic memory management with a private heap to store objects and data structures. It has a built-in garbage collector that reclaims memory from objects that are no longer referenced. Python uses reference counting as its primary memory management technique, along with cycle-detecting garbage collection to handle circular references."
    ]
  },
  {
    "question": "What is method overriding and how does it work in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: What is method overriding and how does it work in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 2 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 1 for: Explain the concept of recursion with an example."
    ]
  },
  {
    "question": "What are Python descriptors and how do they work?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: What are Python descriptors and how do they work?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 1 for: How would you implement a graph data structure in Python?",
      "Sample answer 2 for: Explain the asyncio module in Python and how it works."
    ]
  },
  {
    "question": "What are Python generators and how do they differ from regular functions?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What are Python generators and how do they differ from regular functions?",
    "incorrect_answers": [
      "Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?",
      "The main difference is mutability: lists can be changed after creation (mutable) while tuples cannot (immutable). Lists use square brackets and support operations like append() and extend(), while tuples use parentheses and don't allow modification after creation. Tuples are more memory efficient and slightly faster than lists.",
      "Sample answer 3 for: How would you detect a cycle in a linked list?"
    ]
  },
  {
    "question": "What are Python descriptors and how do they work?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: What are Python descriptors and how do they work?",
    "incorrect_answers": [
      "Sample answer 2 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 2 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 3 for: How would you implement a linked list in Python?"
    ]
  },
  {
    "question": "Explain the concept of dynamic programming with an example.",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: Explain the concept of dynamic programming with an example.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 3 for: What are Python decorators and how do they work?",
      "Sample answer 2 for: How would you implement a linked list in Python?"
    ]
  },
  {
    "question": "What is method overriding and how does it work in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What is method overriding and how does it work in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 3 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 1 for: Explain the concept of list comprehensions in Python."
    ]
  },
  {
    "question": "What are Python context managers and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: What are Python context managers and how do they work?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the difference between '==' and 'is' operators in Python.",
      "Sample answer 3 for: What are Python decorators and how do they work?",
      "Sample answer 3 for: Explain the quicksort algorithm and its time complexity."
    ]
  },
  {
    "question": "What are binary trees and how would you implement one in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: What are binary trees and how would you implement one in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 3 for: What are Python descriptors and how do they work?",
      "Sample answer 3 for: Explain the concept of encapsulation in Python."
    ]
  },
  {
    "question": "Explain the concept of coroutines in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: Explain the concept of coroutines in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 3 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 3 for: Explain the concept of list comprehensions in Python."
    ]
  },
  {
    "question": "Explain the concept of closures in Python with an example.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the concept of closures in Python with an example.",
    "incorrect_answers": [
      "Sample answer 2 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 1 for: What is the difference between a stack and a queue?",
      "Sample answer 1 for: What is the traveling salesman problem and how would you approach it?"
    ]
  },
  {
    "question": "What are binary trees and how would you implement one in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: What are binary trees and how would you implement one in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 1 for: What are abstract classes and interfaces in Python?"
    ]
  },
  {
    "question": "What is the __init__ method in Python and how is it used?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What is the __init__ method in Python and how is it used?",
    "incorrect_answers": [
      "Sample answer 3 for: How does exception handling work in Python?",
      "Sample answer 2 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 2 for: Explain the concept of multiple inheritance and the method resolution order in Python."
    ]
  },
  {
    "question": "How would you detect a cycle in a linked list?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: How would you detect a cycle in a linked list?",
    "incorrect_answers": [
      "Sample answer 2 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 3 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 2 for: Explain the quicksort algorithm and its time complexity."
    ]
  },
  {
    "question": "What are the advantages and disadvantages of using arrays vs linked lists?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: What are the advantages and disadvantages of using arrays vs linked lists?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of encapsulation in Python.",
      "Sample answer 2 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 2 for: Explain the difference between class methods, static methods, and instance methods."
    ]
  },
  {
    "question": "Explain how Python handles memory management.",
    "category": "python_basics",
    "correct_answer": "Python uses automatic memory management through reference counting and garbage collection. When objects are created, Python allocates memory from a private heap. It tracks references to objects, and when an object's reference count drops to zero, the memory is reclaimed. Python also has a cyclic garbage collector to detect and collect objects in reference cycles that would otherwise not be collected.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 2 for: Explain the difference between '==' and 'is' operators in Python.",
      "Sample answer 3 for: Explain the concept of dynamic programming with an example."
    ]
  },
  {
    "question": "What is the difference between a list and a tuple in Python?",
    "category": "python_basics",
    "correct_answer": "Lists are mutable, meaning they can be modified after creation, while tuples are immutable. Lists use square brackets [] and tuples use parentheses (). Lists generally consume more memory than tuples and are slower for iteration.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of backtracking with an example.",
      "Sample answer 3 for: How would you implement a linked list in Python?",
      "Sample answer 1 for: Explain the asyncio module in Python and how it works."
    ]
  },
  {
    "question": "Explain the concept of hash tables and their implementation in Python.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the concept of hash tables and their implementation in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of dynamic programming with an example.",
      "Sample answer 2 for: What are Python type hints and how do they improve code quality?",
      "Lists are mutable collections that can be modified after creation, while tuples are immutable. Lists are defined using square brackets [], while tuples use parentheses (). Tuples are more memory-efficient and can be used as dictionary keys (since they're immutable), which lists cannot."
    ]
  },
  {
    "question": "What is the __init__ method in Python and how is it used?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What is the __init__ method in Python and how is it used?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the difference between '==' and 'is' operators in Python.",
      "Sample answer 3 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful."
    ]
  },
  {
    "question": "How would you implement a linked list in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: How would you implement a linked list in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 3 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 2 for: Explain the concept of multiple inheritance and the method resolution order in Python."
    ]
  },
  {
    "question": "Explain the concept of inheritance in Python with an example.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the concept of inheritance in Python with an example.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the difference between depth-first search and breadth-first search.",
      "Sample answer 2 for: Explain the concept of recursion with an example.",
      "Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?"
    ]
  },
  {
    "question": "Explain the concept of metaprogramming in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the concept of metaprogramming in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 3 for: How would you detect a cycle in a linked list?",
      "Sample answer 2 for: Explain the time complexity of common operations in Python dictionaries."
    ]
  },
  {
    "question": "What are Python's magic methods and how would you use them?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What are Python's magic methods and how would you use them?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of encapsulation in Python.",
      "Sample answer 2 for: Explain the concept of inheritance in Python with an example.",
      "Python manages memory through automatic garbage collection. It uses reference counting to track how many references point to an object, and when the count reaches zero, the memory is freed. Python also has a cycle detector to handle circular references. All Python objects are stored in a private heap, and the memory manager allocates heap space for objects."
    ]
  },
  {
    "question": "How would you find the kth largest element in an unsorted array?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: How would you find the kth largest element in an unsorted array?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 3 for: What is method overriding and how does it work in Python?",
      "Sample answer 1 for: Explain the concept of closures in Python with an example."
    ]
  },
  {
    "question": "Explain the concept of hash tables and their implementation in Python.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the concept of hash tables and their implementation in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python context managers and how do they work?",
      "Sample answer 3 for: Explain the concept of recursion with an example.",
      "Sample answer 2 for: Explain the concept of duck typing in Python."
    ]
  },
  {
    "question": "Explain the concept of monkey patching in Python and when it might be useful.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the concept of monkey patching in Python and when it might be useful.",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python's magic methods and how would you use them?",
      "Sample answer 2 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 1 for: Explain the concept of multiple inheritance and the method resolution order in Python."
    ]
  },
  {
    "question": "Explain the quicksort algorithm and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: Explain the quicksort algorithm and its time complexity.",
    "incorrect_answers": [
      "Sample answer 2 for: How would you implement a linked list in Python?",
      "Sample answer 1 for: What are abstract classes and interfaces in Python?",
      "Sample answer 2 for: What are metaclasses in Python and how would you use them?"
    ]
  },
  {
    "question": "Explain the concept of closures in Python with an example.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: Explain the concept of closures in Python with an example.",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 3 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 2 for: What is the __init__ method in Python and how is it used?"
    ]
  },
  {
    "question": "Explain the concept of composition vs inheritance with examples.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: Explain the concept of composition vs inheritance with examples.",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python descriptors and how do they work?",
      "Sample answer 1 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 1 for: What is the __init__ method in Python and how is it used?"
    ]
  },
  {
    "question": "Explain how Python handles memory management.",
    "category": "python_basics",
    "correct_answer": "Python uses automatic memory management with a private heap to store objects and data structures. It has a built-in garbage collector that reclaims memory from objects that are no longer referenced. Python uses reference counting as its primary memory management technique, along with cycle-detecting garbage collection to handle circular references.",
    "incorrect_answers": [
      "Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 3 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 1 for: What is the difference between multiprocessing and multithreading in Python?"
    ]
  },
  {
    "question": "How would you detect a cycle in a linked list?",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: How would you detect a cycle in a linked list?",
    "incorrect_answers": [
      "Sample answer 3 for: How does exception handling work in Python?",
      "Sample answer 2 for: What are abstract classes and interfaces in Python?",
      "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search."
    ]
  },
  {
    "question": "How would you implement a linked list in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: How would you implement a linked list in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 2 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?"
    ]
  },
  {
    "question": "Explain the concept of dynamic programming with an example.",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: Explain the concept of dynamic programming with an example.",
    "incorrect_answers": [
      "Sample answer 3 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 1 for: How would you find the longest common subsequence of two strings?",
      "The main difference is mutability: lists can be changed after creation (mutable) while tuples cannot (immutable). Lists use square brackets and support operations like append() and extend(), while tuples use parentheses and don't allow modification after creation. Tuples are more memory efficient and slightly faster than lists."
    ]
  },
  {
    "question": "What is polymorphism and how is it implemented in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: What is polymorphism and how is it implemented in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 1 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 2 for: What are binary trees and how would you implement one in Python?"
    ]
  },
  {
    "question": "Explain how Python handles memory management.",
    "category": "python_basics",
    "correct_answer": "Python uses automatic memory management through reference counting and garbage collection. When objects are created, Python allocates memory from a private heap. It tracks references to objects, and when an object's reference count drops to zero, the memory is reclaimed. Python also has a cyclic garbage collector to detect and collect objects in reference cycles that would otherwise not be collected.",
    "incorrect_answers": [
      "Sample answer 1 for: What is the difference between a stack and a queue?",
      "Sample answer 2 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 2 for: Explain the concept of duck typing in Python."
    ]
  },
  {
    "question": "Explain the concept of recursion with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: Explain the concept of recursion with an example.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 1 for: What are Python descriptors and how do they work?",
      "Sample answer 1 for: How would you find the kth largest element in an unsorted array?"
    ]
  },
  {
    "question": "What are metaclasses in Python and how would you use them?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: What are metaclasses in Python and how would you use them?",
    "incorrect_answers": [
      "Sample answer 3 for: How would you detect a cycle in a linked list?",
      "Sample answer 1 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 3 for: Explain the concept of coroutines in Python."
    ]
  },
  {
    "question": "What are Python type hints and how do they improve code quality?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What are Python type hints and how do they improve code quality?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 3 for: How would you implement a linked list in Python?",
      "Sample answer 3 for: Explain the concept of encapsulation in Python."
    ]
  },
  {
    "question": "What is the traveling salesman problem and how would you approach it?",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: What is the traveling salesman problem and how would you approach it?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 1 for: What are Python's data model and how does it relate to special methods?"
    ]
  },
  {
    "question": "What are Python's magic methods and how would you use them?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: What are Python's magic methods and how would you use them?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the difference between depth-first search and breadth-first search.",
      "Sample answer 3 for: What are Python descriptors and how do they work?",
      "Sample answer 2 for: Explain the concept of dynamic programming with an example."
    ]
  },
  {
    "question": "What is the difference between a greedy algorithm and dynamic programming?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?",
    "incorrect_answers": [
      "Sample answer 3 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 2 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 2 for: What are Python decorators and how do they work?"
    ]
  },
  {
    "question": "What are binary trees and how would you implement one in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: What are binary trees and how would you implement one in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 3 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 3 for: What are abstract classes and interfaces in Python?"
    ]
  },
  {
    "question": "Explain the concept of backtracking with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: Explain the concept of backtracking with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 3 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 1 for: What are Python generators and how do they differ from regular functions?"
    ]
  },
  {
    "question": "How would you detect a cycle in a linked list?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: How would you detect a cycle in a linked list?",
    "incorrect_answers": [
      "Sample answer 3 for: What is method overriding and how does it work in Python?",
      "Sample answer 3 for: Explain the concept of dynamic programming with an example.",
      "Sample answer 1 for: What are Python decorators and how do they work?"
    ]
  },
  {
    "question": "Explain the concept of coroutines in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the concept of coroutines in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 2 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 3 for: What is a heap data structure and when would you use it?"
    ]
  },
  {
    "question": "What is the difference between a stack and a queue?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: What is the difference between a stack and a queue?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 2 for: Explain the difference between class methods, static methods, and instance methods.",
      "Sample answer 1 for: How would you implement a breadth-first search algorithm?"
    ]
  },
  {
    "question": "What are binary trees and how would you implement one in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: What are binary trees and how would you implement one in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 3 for: How would you detect a cycle in a linked list?",
      "Sample answer 2 for: Explain the concept of closures in Python with an example."
    ]
  },
  {
    "question": "What are binary trees and how would you implement one in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: What are binary trees and how would you implement one in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of coroutines in Python.",
      "Sample answer 2 for: Explain the concept of encapsulation in Python.",
      "Sample answer 3 for: Explain the concept of binary search and its time complexity."
    ]
  },
  {
    "question": "How would you find the longest common subsequence of two strings?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you find the longest common subsequence of two strings?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the difference between '==' and 'is' operators in Python.",
      "Python uses automatic memory management with a private heap to store objects and data structures. It has a built-in garbage collector that reclaims memory from objects that are no longer referenced. Python uses reference counting as its primary memory management technique, along with cycle-detecting garbage collection to handle circular references.",
      "Lists are mutable, meaning they can be modified after creation, while tuples are immutable. Lists use square brackets [] and tuples use parentheses (). Lists generally consume more memory than tuples and are slower for iteration."
    ]
  },
  {
    "question": "What are Python type hints and how do they improve code quality?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What are Python type hints and how do they improve code quality?",
    "incorrect_answers": [
      "Sample answer 3 for: What is a heap data structure and when would you use it?",
      "Sample answer 1 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 3 for: What are Python decorators and how do they work?"
    ]
  },
  {
    "question": "Explain the concept of binary search and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: Explain the concept of binary search and its time complexity.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 2 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 1 for: Explain the asyncio module in Python and how it works."
    ]
  },
  {
    "question": "What are Python type hints and how do they improve code quality?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What are Python type hints and how do they improve code quality?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 2 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 1 for: What are abstract classes and interfaces in Python?"
    ]
  },
  {
    "question": "What are abstract classes and interfaces in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What are abstract classes and interfaces in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 3 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 1 for: What are Python type hints and how do they improve code quality?"
    ]
  },
  {
    "question": "What is the Global Interpreter Lock (GIL) in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 2 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 3 for: Explain the concept of metaprogramming in Python."
    ]
  },
  {
    "question": "How does exception handling work in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: How does exception handling work in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python context managers and how do they work?",
      "Sample answer 3 for: What is a heap data structure and when would you use it?",
      "Sample answer 2 for: What are metaclasses in Python and how would you use them?"
    ]
  },
  {
    "question": "What is polymorphism and how is it implemented in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What is polymorphism and how is it implemented in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of backtracking with an example.",
      "Sample answer 1 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 3 for: What is the difference between a stack and a queue?"
    ]
  },
  {
    "question": "What is the difference between a greedy algorithm and dynamic programming?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python descriptors and how do they work?",
      "Sample answer 2 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 3 for: How does exception handling work in Python?"
    ]
  },
  {
    "question": "Explain the concept of list comprehensions in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: Explain the concept of list comprehensions in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 3 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 2 for: What are Python descriptors and how do they work?"
    ]
  },
  {
    "question": "What are Python's data model and how does it relate to special methods?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: What are Python's data model and how does it relate to special methods?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of backtracking with an example.",
      "Sample answer 2 for: Explain the concept of duck typing in Python.",
      "Sample answer 1 for: Explain the difference between class methods, static methods, and instance methods."
    ]
  },
  {
    "question": "How would you find the kth largest element in an unsorted array?",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: How would you find the kth largest element in an unsorted array?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of closures in Python with an example.",
      "Sample answer 3 for: How does exception handling work in Python?",
      "Sample answer 2 for: Explain the difference between '==' and 'is' operators in Python."
    ]
  },
  {
    "question": "What are Python descriptors and how do they work?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: What are Python descriptors and how do they work?",
    "incorrect_answers": [
      "Sample answer 1 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 2 for: Explain the concept of backtracking with an example.",
      "Sample answer 3 for: What is the difference between a greedy algorithm and dynamic programming?"
    ]
  },
  {
    "question": "Explain the concept of metaprogramming in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the concept of metaprogramming in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: What is a heap data structure and when would you use it?",
      "Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 3 for: Explain the difference between class methods, static methods, and instance methods."
    ]
  },
  {
    "question": "Explain the time complexity of common operations in Python dictionaries.",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: Explain the time complexity of common operations in Python dictionaries.",
    "incorrect_answers": [
      "Sample answer 3 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 2 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 3 for: What are Python generators and how do they differ from regular functions?"
    ]
  },
  {
    "question": "Explain the difference between depth-first search and breadth-first search.",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: Explain the difference between depth-first search and breadth-first search.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of encapsulation in Python.",
      "Sample answer 3 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 1 for: Explain the concept of metaprogramming in Python."
    ]
  },
  {
    "question": "Explain the concept of dynamic programming with an example.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the concept of dynamic programming with an example.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 1 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 3 for: What is method overriding and how does it work in Python?"
    ]
  },
  {
    "question": "Explain the asyncio module in Python and how it works.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the asyncio module in Python and how it works.",
    "incorrect_answers": [
      "Python uses automatic memory management through reference counting and garbage collection. When objects are created, Python allocates memory from a private heap. It tracks references to objects, and when an object's reference count drops to zero, the memory is reclaimed. Python also has a cyclic garbage collector to detect and collect objects in reference cycles that would otherwise not be collected.",
      "Sample answer 2 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search."
    ]
  },
  {
    "question": "Explain the concept of backtracking with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: Explain the concept of backtracking with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python's magic methods and how would you use them?",
      "Sample answer 2 for: What are Python's magic methods and how would you use them?",
      "Sample answer 2 for: Explain the difference between depth-first search and breadth-first search."
    ]
  },
  {
    "question": "How would you implement a graph data structure in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: How would you implement a graph data structure in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 1 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 2 for: Explain the concept of multiple inheritance and the method resolution order in Python."
    ]
  },
  {
    "question": "What is method overriding and how does it work in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: What is method overriding and how does it work in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python's magic methods and how would you use them?",
      "Sample answer 3 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 3 for: Explain the concept of inheritance in Python with an example."
    ]
  },
  {
    "question": "What are metaclasses in Python and how would you use them?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What are metaclasses in Python and how would you use them?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of backtracking with an example.",
      "Sample answer 2 for: What are Python's data model and how does it relate to special methods?",
      "Python manages memory through automatic garbage collection. It uses reference counting to track how many references point to an object, and when the count reaches zero, the memory is freed. Python also has a cycle detector to handle circular references. All Python objects are stored in a private heap, and the memory manager allocates heap space for objects."
    ]
  },
  {
    "question": "Explain the difference between '==' and 'is' operators in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: Explain the difference between '==' and 'is' operators in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 3 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 2 for: What are Python generators and how do they differ from regular functions?"
    ]
  },
  {
    "question": "What are Python decorators and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: What are Python decorators and how do they work?",
    "incorrect_answers": [
      "Sample answer 1 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 2 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 3 for: What is the traveling salesman problem and how would you approach it?"
    ]
  },
  {
    "question": "What are Python descriptors and how do they work?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What are Python descriptors and how do they work?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 2 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 1 for: What is the difference between multiprocessing and multithreading in Python?"
    ]
  },
  {
    "question": "Explain how Python handles memory management.",
    "category": "python_basics",
    "correct_answer": "Python manages memory through automatic garbage collection. It uses reference counting to track how many references point to an object, and when the count reaches zero, the memory is freed. Python also has a cycle detector to handle circular references. All Python objects are stored in a private heap, and the memory manager allocates heap space for objects.",
    "incorrect_answers": [
      "Sample answer 1 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 3 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search."
    ]
  },
  {
    "question": "What is the difference between a greedy algorithm and dynamic programming?",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: What is the difference between a greedy algorithm and dynamic programming?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of backtracking with an example.",
      "Sample answer 1 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 3 for: What are abstract classes and interfaces in Python?"
    ]
  },
  {
    "question": "How would you implement a linked list in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: How would you implement a linked list in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 3 for: How does exception handling work in Python?",
      "Sample answer 3 for: What are Python type hints and how do they improve code quality?"
    ]
  },
  {
    "question": "Explain the time complexity of common operations in Python dictionaries.",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: Explain the time complexity of common operations in Python dictionaries.",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 3 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 3 for: What is a heap data structure and when would you use it?"
    ]
  },
  {
    "question": "Explain the concept of composition vs inheritance with examples.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: Explain the concept of composition vs inheritance with examples.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 1 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 1 for: Explain the concept of hash tables and their implementation in Python."
    ]
  },
  {
    "question": "What are Python generators and how do they differ from regular functions?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What are Python generators and how do they differ from regular functions?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the asyncio module in Python and how it works.",
      "Sample answer 3 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 1 for: How would you implement a graph data structure in Python?"
    ]
  },
  {
    "question": "Explain the concept of backtracking with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: Explain the concept of backtracking with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 3 for: Explain the concept of closures in Python with an example."
    ]
  },
  {
    "question": "Explain the concept of list comprehensions in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: Explain the concept of list comprehensions in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 1 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 1 for: Explain the concept of composition vs inheritance with examples."
    ]
  },
  {
    "question": "What is the Global Interpreter Lock (GIL) in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: What is the Global Interpreter Lock (GIL) in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 3 for: How would you implement a linked list in Python?",
      "Sample answer 2 for: What are abstract classes and interfaces in Python?"
    ]
  },
  {
    "question": "Explain the concept of hash tables and their implementation in Python.",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: Explain the concept of hash tables and their implementation in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 1 for: Explain the concept of coroutines in Python.",
      "Sample answer 3 for: What is the difference between a greedy algorithm and dynamic programming?"
    ]
  },
  {
    "question": "Explain the quicksort algorithm and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: Explain the quicksort algorithm and its time complexity.",
    "incorrect_answers": [
      "Sample answer 1 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 3 for: What is polymorphism and how is it implemented in Python?",
      "Python manages memory through automatic garbage collection. It uses reference counting to track how many references point to an object, and when the count reaches zero, the memory is freed. Python also has a cycle detector to handle circular references. All Python objects are stored in a private heap, and the memory manager allocates heap space for objects."
    ]
  },
  {
    "question": "What are Python decorators and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: What are Python decorators and how do they work?",
    "incorrect_answers": [
      "Sample answer 3 for: How would you detect a cycle in a linked list?",
      "Sample answer 3 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 2 for: Explain the concept of encapsulation in Python."
    ]
  },
  {
    "question": "How would you detect a cycle in a linked list?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: How would you detect a cycle in a linked list?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the difference between '==' and 'is' operators in Python.",
      "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 3 for: What is polymorphism and how is it implemented in Python?"
    ]
  },
  {
    "question": "What are Python generators and how do they differ from regular functions?",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: What are Python generators and how do they differ from regular functions?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 1 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 2 for: Explain the concept of encapsulation in Python."
    ]
  },
  {
    "question": "Explain the concept of composition vs inheritance with examples.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: Explain the concept of composition vs inheritance with examples.",
    "incorrect_answers": [
      "Sample answer 3 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 1 for: Explain the quicksort algorithm and its time complexity."
    ]
  },
  {
    "question": "How would you detect a cycle in a linked list?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you detect a cycle in a linked list?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the difference between '==' and 'is' operators in Python.",
      "Sample answer 2 for: Explain the concept of closures in Python with an example.",
      "Sample answer 1 for: Explain the concept of coroutines in Python."
    ]
  },
  {
    "question": "What is polymorphism and how is it implemented in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: What is polymorphism and how is it implemented in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of closures in Python with an example.",
      "Sample answer 2 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 1 for: What is the difference between a stack and a queue?"
    ]
  },
  {
    "question": "What are the advantages and disadvantages of using arrays vs linked lists?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python."
    ]
  },
  {
    "question": "Explain the concept of binary search and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: Explain the concept of binary search and its time complexity.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 2 for: Explain the concept of recursion with an example.",
      "Sample answer 2 for: What is the __init__ method in Python and how is it used?"
    ]
  },
  {
    "question": "Explain the concept of monkey patching in Python and when it might be useful.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the concept of monkey patching in Python and when it might be useful.",
    "incorrect_answers": [
      "Sample answer 3 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 2 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 2 for: Explain the concept of coroutines in Python."
    ]
  },
  {
    "question": "Explain the concept of dynamic programming with an example.",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: Explain the concept of dynamic programming with an example.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the difference between class methods, static methods, and instance methods.",
      "Sample answer 1 for: How would you implement a linked list in Python?",
      "Sample answer 1 for: How would you implement a breadth-first search algorithm?"
    ]
  },
  {
    "question": "Explain the concept of list comprehensions in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: Explain the concept of list comprehensions in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search.",
      "Sample answer 2 for: What are Python decorators and how do they work?",
      "Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?"
    ]
  },
  {
    "question": "Explain the concept of coroutines in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the concept of coroutines in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: What is method overriding and how does it work in Python?",
      "Sample answer 1 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 2 for: Explain the concept of dynamic programming with an example."
    ]
  },
  {
    "question": "What are Python context managers and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: What are Python context managers and how do they work?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 3 for: Explain the concept of closures in Python with an example."
    ]
  },
  {
    "question": "Explain the quicksort algorithm and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: Explain the quicksort algorithm and its time complexity.",
    "incorrect_answers": [
      "Sample answer 3 for: How would you implement a linked list in Python?",
      "Sample answer 2 for: Explain the concept of backtracking with an example.",
      "Sample answer 1 for: What are metaclasses in Python and how would you use them?"
    ]
  },
  {
    "question": "How would you find the kth largest element in an unsorted array?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: How would you find the kth largest element in an unsorted array?",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 1 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 3 for: Explain the concept of hash tables and their implementation in Python."
    ]
  },
  {
    "question": "Explain how Python handles memory management.",
    "category": "python_basics",
    "correct_answer": "Python uses automatic memory management through reference counting and garbage collection. When objects are created, Python allocates memory from a private heap. It tracks references to objects, and when an object's reference count drops to zero, the memory is reclaimed. Python also has a cyclic garbage collector to detect and collect objects in reference cycles that would otherwise not be collected.",
    "incorrect_answers": [
      "Sample answer 2 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 3 for: How would you implement a graph data structure in Python?",
      "Sample answer 2 for: What are Python context managers and how do they work?"
    ]
  },
  {
    "question": "Explain the difference between depth-first search and breadth-first search.",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: Explain the difference between depth-first search and breadth-first search.",
    "incorrect_answers": [
      "Sample answer 1 for: What is a heap data structure and when would you use it?",
      "Sample answer 1 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 1 for: Explain the concept of closures in Python with an example."
    ]
  },
  {
    "question": "What are Python's magic methods and how would you use them?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: What are Python's magic methods and how would you use them?",
    "incorrect_answers": [
      "Sample answer 3 for: What is a heap data structure and when would you use it?",
      "Sample answer 1 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 1 for: Explain the concept of composition vs inheritance with examples."
    ]
  },
  {
    "question": "Explain the quicksort algorithm and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: Explain the quicksort algorithm and its time complexity.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 1 for: How would you implement a breadth-first search algorithm?"
    ]
  },
  {
    "question": "What are abstract classes and interfaces in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What are abstract classes and interfaces in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: How would you detect a cycle in a linked list?",
      "Sample answer 3 for: What are Python descriptors and how do they work?",
      "Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?"
    ]
  },
  {
    "question": "What are Python context managers and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What are Python context managers and how do they work?",
    "incorrect_answers": [
      "The main difference is mutability: lists can be changed after creation (mutable) while tuples cannot (immutable). Lists use square brackets and support operations like append() and extend(), while tuples use parentheses and don't allow modification after creation. Tuples are more memory efficient and slightly faster than lists.",
      "Sample answer 3 for: What is the difference between a stack and a queue?",
      "Sample answer 3 for: Explain the concept of monkey patching in Python and when it might be useful."
    ]
  },
  {
    "question": "Explain the difference between depth-first search and breadth-first search.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the difference between depth-first search and breadth-first search.",
    "incorrect_answers": [
      "The main difference is mutability: lists can be changed after creation (mutable) while tuples cannot (immutable). Lists use square brackets and support operations like append() and extend(), while tuples use parentheses and don't allow modification after creation. Tuples are more memory efficient and slightly faster than lists.",
      "Sample answer 1 for: How would you implement a graph data structure in Python?",
      "Sample answer 3 for: Explain the concept of list comprehensions in Python."
    ]
  },
  {
    "question": "Explain the concept of binary search and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: Explain the concept of binary search and its time complexity.",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 1 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 3 for: Explain the concept of composition vs inheritance with examples."
    ]
  },
  {
    "question": "Explain how Python handles memory management.",
    "category": "python_basics",
    "correct_answer": "Python uses automatic memory management with a private heap to store objects and data structures. It has a built-in garbage collector that reclaims memory from objects that are no longer referenced. Python uses reference counting as its primary memory management technique, along with cycle-detecting garbage collection to handle circular references.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 2 for: What are Python decorators and how do they work?",
      "Sample answer 2 for: What are the advantages and disadvantages of using arrays vs linked lists?"
    ]
  },
  {
    "question": "Explain the asyncio module in Python and how it works.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: Explain the asyncio module in Python and how it works.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of backtracking with an example.",
      "Sample answer 3 for: What are abstract classes and interfaces in Python?",
      "Sample answer 2 for: Explain the concept of coroutines in Python."
    ]
  },
  {
    "question": "How does exception handling work in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: How does exception handling work in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Lists are mutable, meaning they can be modified after creation, while tuples are immutable. Lists use square brackets [] and tuples use parentheses (). Lists generally consume more memory than tuples and are slower for iteration.",
      "Sample answer 3 for: How would you find the kth largest element in an unsorted array?"
    ]
  },
  {
    "question": "What are Python context managers and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What are Python context managers and how do they work?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the difference between class methods, static methods, and instance methods.",
      "Sample answer 3 for: Explain the difference between '==' and 'is' operators in Python.",
      "Sample answer 3 for: How would you implement a linked list in Python?"
    ]
  },
  {
    "question": "Explain the concept of list comprehensions in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: Explain the concept of list comprehensions in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: What are binary trees and how would you implement one in Python?",
      "Lists are mutable, meaning they can be modified after creation, while tuples are immutable. Lists use square brackets [] and tuples use parentheses (). Lists generally consume more memory than tuples and are slower for iteration.",
      "Sample answer 1 for: Explain the concept of closures in Python with an example."
    ]
  },
  {
    "question": "Explain the concept of recursion with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: Explain the concept of recursion with an example.",
    "incorrect_answers": [
      "Sample answer 3 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 1 for: Explain the concept of composition vs inheritance with examples."
    ]
  },
  {
    "question": "Explain the concept of composition vs inheritance with examples.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: Explain the concept of composition vs inheritance with examples.",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 3 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 1 for: What are abstract classes and interfaces in Python?"
    ]
  },
  {
    "question": "Explain the concept of metaprogramming in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the concept of metaprogramming in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 1 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 3 for: How would you find the longest common subsequence of two strings?"
    ]
  },
  {
    "question": "Explain the concept of dynamic programming with an example.",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: Explain the concept of dynamic programming with an example.",
    "incorrect_answers": [
      "Sample answer 2 for: How does exception handling work in Python?",
      "Sample answer 2 for: What are abstract classes and interfaces in Python?",
      "Sample answer 3 for: How would you detect a cycle in a linked list?"
    ]
  },
  {
    "question": "How would you find the kth largest element in an unsorted array?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: How would you find the kth largest element in an unsorted array?",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python descriptors and how do they work?",
      "Sample answer 3 for: Explain the concept of encapsulation in Python.",
      "Sample answer 3 for: What is the __init__ method in Python and how is it used?"
    ]
  },
  {
    "question": "Explain the concept of coroutines in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the concept of coroutines in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 2 for: What are abstract classes and interfaces in Python?",
      "Sample answer 1 for: How would you implement a linked list in Python?"
    ]
  },
  {
    "question": "How would you implement a graph data structure in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: How would you implement a graph data structure in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 3 for: What is the difference between a stack and a queue?",
      "Sample answer 1 for: What is the difference between a stack and a queue?"
    ]
  },
  {
    "question": "What are Python generators and how do they differ from regular functions?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: What are Python generators and how do they differ from regular functions?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 3 for: How would you implement a graph data structure in Python?",
      "Sample answer 2 for: Explain the concept of coroutines in Python."
    ]
  },
  {
    "question": "What are Python type hints and how do they improve code quality?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: What are Python type hints and how do they improve code quality?",
    "incorrect_answers": [
      "Sample answer 3 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 2 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?"
    ]
  },
  {
    "question": "How would you implement a breadth-first search algorithm?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you implement a breadth-first search algorithm?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of encapsulation in Python.",
      "Sample answer 1 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 2 for: What are Python type hints and how do they improve code quality?"
    ]
  },
  {
    "question": "Explain the time complexity of common operations in Python dictionaries.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries.",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 1 for: What is method overriding and how does it work in Python?",
      "Sample answer 3 for: How would you detect a cycle in a linked list?"
    ]
  },
  {
    "question": "Explain the difference between class methods, static methods, and instance methods.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the difference between class methods, static methods, and instance methods.",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python context managers and how do they work?",
      "Sample answer 2 for: What are abstract classes and interfaces in Python?",
      "Sample answer 1 for: Explain the concept of duck typing in Python."
    ]
  },
  {
    "question": "Explain the difference between class methods, static methods, and instance methods.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: Explain the difference between class methods, static methods, and instance methods.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the asyncio module in Python and how it works.",
      "Sample answer 2 for: Explain the concept of closures in Python with an example.",
      "Sample answer 1 for: What are Python descriptors and how do they work?"
    ]
  },
  {
    "question": "What are abstract classes and interfaces in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: What are abstract classes and interfaces in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 2 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 3 for: Explain the concept of metaprogramming in Python."
    ]
  },
  {
    "question": "Explain the concept of recursion with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: Explain the concept of recursion with an example.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 1 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 2 for: Explain the quicksort algorithm and its time complexity."
    ]
  },
  {
    "question": "What is the __init__ method in Python and how is it used?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What is the __init__ method in Python and how is it used?",
    "incorrect_answers": [
      "Sample answer 1 for: What is the difference between a stack and a queue?",
      "Sample answer 2 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 1 for: Explain the concept of backtracking with an example."
    ]
  },
  {
    "question": "Explain the concept of duck typing in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: Explain the concept of duck typing in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: What is a heap data structure and when would you use it?",
      "Sample answer 2 for: What are Python descriptors and how do they work?",
      "Sample answer 1 for: How would you implement a graph data structure in Python?"
    ]
  },
  {
    "question": "What are metaclasses in Python and how would you use them?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What are metaclasses in Python and how would you use them?",
    "incorrect_answers": [
      "Sample answer 1 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 3 for: Explain the concept of duck typing in Python.",
      "Sample answer 2 for: What are Python descriptors and how do they work?"
    ]
  },
  {
    "question": "Explain the concept of composition vs inheritance with examples.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: Explain the concept of composition vs inheritance with examples.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search.",
      "Sample answer 1 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 3 for: Explain the concept of monkey patching in Python and when it might be useful."
    ]
  },
  {
    "question": "What is the __init__ method in Python and how is it used?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What is the __init__ method in Python and how is it used?",
    "incorrect_answers": [
      "Sample answer 1 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 2 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 1 for: How would you detect a cycle in a linked list?"
    ]
  },
  {
    "question": "What are Python's data model and how does it relate to special methods?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: What are Python's data model and how does it relate to special methods?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 3 for: How would you detect a cycle in a linked list?",
      "Sample answer 1 for: Explain the concept of closures in Python with an example."
    ]
  },
  {
    "question": "What are Python's data model and how does it relate to special methods?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: What are Python's data model and how does it relate to special methods?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of backtracking with an example.",
      "Sample answer 2 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?"
    ]
  },
  {
    "question": "Explain the concept of list comprehensions in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: Explain the concept of list comprehensions in Python.",
    "incorrect_answers": [
      "Lists are mutable, meaning they can be modified after creation, while tuples are immutable. Lists use square brackets [] and tuples use parentheses (). Lists generally consume more memory than tuples and are slower for iteration.",
      "Sample answer 2 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 1 for: How would you find the kth largest element in an unsorted array?"
    ]
  },
  {
    "question": "What is method overriding and how does it work in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What is method overriding and how does it work in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of coroutines in Python.",
      "Sample answer 1 for: Explain the concept of encapsulation in Python.",
      "Sample answer 2 for: What are Python type hints and how do they improve code quality?"
    ]
  },
  {
    "question": "Explain the concept of metaprogramming in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the concept of metaprogramming in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: How would you implement a graph data structure in Python?",
      "Sample answer 1 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python."
    ]
  },
  {
    "question": "Explain the concept of composition vs inheritance with examples.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: Explain the concept of composition vs inheritance with examples.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the asyncio module in Python and how it works.",
      "Sample answer 1 for: What is the difference between a stack and a queue?",
      "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?"
    ]
  },
  {
    "question": "Explain the concept of metaprogramming in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the concept of metaprogramming in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python descriptors and how do they work?",
      "Sample answer 3 for: What are Python descriptors and how do they work?",
      "Sample answer 3 for: Explain the concept of closures in Python with an example."
    ]
  },
  {
    "question": "What are Python generators and how do they differ from regular functions?",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: What are Python generators and how do they differ from regular functions?",
    "incorrect_answers": [
      "Sample answer 3 for: How would you detect a cycle in a linked list?",
      "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 1 for: What are Python's data model and how does it relate to special methods?"
    ]
  },
  {
    "question": "Explain the concept of inheritance in Python with an example.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: Explain the concept of inheritance in Python with an example.",
    "incorrect_answers": [
      "Sample answer 2 for: What is the difference between a stack and a queue?",
      "Sample answer 1 for: Explain the difference between class methods, static methods, and instance methods.",
      "Sample answer 3 for: Explain the concept of backtracking with an example."
    ]
  },
  {
    "question": "What are metaclasses in Python and how would you use them?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What are metaclasses in Python and how would you use them?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 3 for: How would you implement a graph data structure in Python?",
      "Sample answer 3 for: Explain the difference between depth-first search and breadth-first search."
    ]
  },
  {
    "question": "Explain the difference between class methods, static methods, and instance methods.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: Explain the difference between class methods, static methods, and instance methods.",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python descriptors and how do they work?",
      "Sample answer 1 for: How does exception handling work in Python?",
      "Sample answer 1 for: What are abstract classes and interfaces in Python?"
    ]
  },
  {
    "question": "What are Python context managers and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: What are Python context managers and how do they work?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 3 for: Explain the concept of encapsulation in Python.",
      "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search."
    ]
  },
  {
    "question": "Explain the time complexity of common operations in Python dictionaries.",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: Explain the time complexity of common operations in Python dictionaries.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 1 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?"
    ]
  },
  {
    "question": "Explain the time complexity of common operations in Python dictionaries.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries.",
    "incorrect_answers": [
      "Sample answer 2 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 3 for: Explain the concept of coroutines in Python.",
      "Sample answer 1 for: What is the traveling salesman problem and how would you approach it?"
    ]
  },
  {
    "question": "What are binary trees and how would you implement one in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: What are binary trees and how would you implement one in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: How does exception handling work in Python?",
      "Sample answer 2 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 3 for: How would you detect a cycle in a linked list?"
    ]
  },
  {
    "question": "What are Python generators and how do they differ from regular functions?",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: What are Python generators and how do they differ from regular functions?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the difference between depth-first search and breadth-first search.",
      "Sample answer 1 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 2 for: What are Python's data model and how does it relate to special methods?"
    ]
  },
  {
    "question": "Explain the concept of composition vs inheritance with examples.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the concept of composition vs inheritance with examples.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the difference between depth-first search and breadth-first search.",
      "Sample answer 2 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 1 for: What is the difference between a stack and a queue?"
    ]
  },
  {
    "question": "What is the difference between a greedy algorithm and dynamic programming?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: What is the difference between a greedy algorithm and dynamic programming?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of recursion with an example.",
      "Sample answer 1 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 1 for: What are the advantages and disadvantages of using arrays vs linked lists?"
    ]
  },
  {
    "question": "How would you find the longest common subsequence of two strings?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: How would you find the longest common subsequence of two strings?",
    "incorrect_answers": [
      "Python uses automatic memory management through reference counting and garbage collection. When objects are created, Python allocates memory from a private heap. It tracks references to objects, and when an object's reference count drops to zero, the memory is reclaimed. Python also has a cyclic garbage collector to detect and collect objects in reference cycles that would otherwise not be collected.",
      "Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 3 for: Explain the concept of encapsulation in Python."
    ]
  },
  {
    "question": "What are Python type hints and how do they improve code quality?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What are Python type hints and how do they improve code quality?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 2 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 3 for: Explain the concept of binary search and its time complexity."
    ]
  },
  {
    "question": "Explain the concept of metaprogramming in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the concept of metaprogramming in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 3 for: Explain the concept of recursion with an example.",
      "Sample answer 1 for: What are Python descriptors and how do they work?"
    ]
  },
  {
    "question": "Explain the concept of list comprehensions in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: Explain the concept of list comprehensions in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: What is method overriding and how does it work in Python?",
      "Sample answer 3 for: What are Python descriptors and how do they work?",
      "Sample answer 2 for: How would you detect a cycle in a linked list?"
    ]
  },
  {
    "question": "What are Python's magic methods and how would you use them?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: What are Python's magic methods and how would you use them?",
    "incorrect_answers": [
      "Sample answer 1 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 1 for: What is a heap data structure and when would you use it?",
      "Sample answer 1 for: Explain the concept of composition vs inheritance with examples."
    ]
  },
  {
    "question": "Explain the concept of multiple inheritance and the method resolution order in Python.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of coroutines in Python.",
      "Sample answer 2 for: Explain the difference between class methods, static methods, and instance methods.",
      "Sample answer 3 for: What are Python's magic methods and how would you use them?"
    ]
  },
  {
    "question": "What is the difference between a stack and a queue?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: What is the difference between a stack and a queue?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search.",
      "The main difference is mutability: lists can be changed after creation (mutable) while tuples cannot (immutable). Lists use square brackets and support operations like append() and extend(), while tuples use parentheses and don't allow modification after creation. Tuples are more memory efficient and slightly faster than lists.",
      "Sample answer 1 for: Explain the concept of metaprogramming in Python."
    ]
  },
  {
    "question": "Explain the time complexity of common operations in Python dictionaries.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of encapsulation in Python.",
      "Sample answer 3 for: Explain the difference between '==' and 'is' operators in Python.",
      "Sample answer 2 for: Explain the concept of encapsulation in Python."
    ]
  },
  {
    "question": "Explain how Python handles memory management.",
    "category": "python_basics",
    "correct_answer": "Python manages memory through automatic garbage collection. It uses reference counting to track how many references point to an object, and when the count reaches zero, the memory is freed. Python also has a cycle detector to handle circular references. All Python objects are stored in a private heap, and the memory manager allocates heap space for objects.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 2 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 2 for: Explain the asyncio module in Python and how it works."
    ]
  },
  {
    "question": "Explain the difference between class methods, static methods, and instance methods.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: Explain the difference between class methods, static methods, and instance methods.",
    "incorrect_answers": [
      "Sample answer 1 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 2 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 1 for: How would you find the longest common subsequence of two strings?"
    ]
  },
  {
    "question": "How would you implement a breadth-first search algorithm?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you implement a breadth-first search algorithm?",
    "incorrect_answers": [
      "Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 2 for: What is polymorphism and how is it implemented in Python?"
    ]
  },
  {
    "question": "Explain the concept of metaprogramming in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the concept of metaprogramming in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 2 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 2 for: Explain the time complexity of common operations in Python dictionaries."
    ]
  },
  {
    "question": "How would you find the longest common subsequence of two strings?",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: How would you find the longest common subsequence of two strings?",
    "incorrect_answers": [
      "Sample answer 2 for: How would you implement a linked list in Python?",
      "Sample answer 2 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 3 for: How would you implement a linked list in Python?"
    ]
  },
  {
    "question": "What are the advantages and disadvantages of using arrays vs linked lists?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 1 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 1 for: Explain the concept of binary search and its time complexity."
    ]
  },
  {
    "question": "What are the advantages and disadvantages of using arrays vs linked lists?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?",
    "incorrect_answers": [
      "Sample answer 3 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 3 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 1 for: Explain the quicksort algorithm and its time complexity."
    ]
  },
  {
    "question": "How would you detect a cycle in a linked list?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you detect a cycle in a linked list?",
    "incorrect_answers": [
      "Sample answer 2 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 2 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 3 for: Explain the concept of encapsulation in Python."
    ]
  },
  {
    "question": "Explain the time complexity of common operations in Python dictionaries.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 3 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 2 for: What is a heap data structure and when would you use it?"
    ]
  },
  {
    "question": "What are binary trees and how would you implement one in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: What are binary trees and how would you implement one in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python's magic methods and how would you use them?",
      "Sample answer 3 for: Explain the concept of dynamic programming with an example.",
      "Sample answer 1 for: What is the difference between a greedy algorithm and dynamic programming?"
    ]
  },
  {
    "question": "Explain the concept of hash tables and their implementation in Python.",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: Explain the concept of hash tables and their implementation in Python.",
    "incorrect_answers": [
      "Python manages memory through automatic garbage collection. It uses reference counting to track how many references point to an object, and when the count reaches zero, the memory is freed. Python also has a cycle detector to handle circular references. All Python objects are stored in a private heap, and the memory manager allocates heap space for objects.",
      "Sample answer 2 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries."
    ]
  },
  {
    "question": "Explain the time complexity of common operations in Python dictionaries.",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: Explain the time complexity of common operations in Python dictionaries.",
    "incorrect_answers": [
      "The main difference is mutability: lists can be changed after creation (mutable) while tuples cannot (immutable). Lists use square brackets and support operations like append() and extend(), while tuples use parentheses and don't allow modification after creation. Tuples are more memory efficient and slightly faster than lists.",
      "Sample answer 3 for: How would you implement a graph data structure in Python?",
      "Sample answer 1 for: How does exception handling work in Python?"
    ]
  },
  {
    "question": "What are the advantages and disadvantages of using arrays vs linked lists?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: What are the advantages and disadvantages of using arrays vs linked lists?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 3 for: What are Python descriptors and how do they work?",
      "Sample answer 3 for: What is the difference between a greedy algorithm and dynamic programming?"
    ]
  },
  {
    "question": "What is the difference between a stack and a queue?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: What is the difference between a stack and a queue?",
    "incorrect_answers": [
      "Sample answer 1 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 1 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?"
    ]
  },
  {
    "question": "Explain the time complexity of common operations in Python dictionaries.",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: Explain the time complexity of common operations in Python dictionaries.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 1 for: Explain the concept of inheritance in Python with an example.",
      "Python manages memory through automatic garbage collection. It uses reference counting to track how many references point to an object, and when the count reaches zero, the memory is freed. Python also has a cycle detector to handle circular references. All Python objects are stored in a private heap, and the memory manager allocates heap space for objects."
    ]
  },
  {
    "question": "How would you implement a breadth-first search algorithm?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: How would you implement a breadth-first search algorithm?",
    "incorrect_answers": [
      "Sample answer 1 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 2 for: How would you implement a linked list in Python?",
      "Sample answer 3 for: Explain the concept of duck typing in Python."
    ]
  },
  {
    "question": "Explain the concept of list comprehensions in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: Explain the concept of list comprehensions in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: What are abstract classes and interfaces in Python?",
      "Sample answer 1 for: Explain the concept of coroutines in Python.",
      "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python."
    ]
  },
  {
    "question": "How would you implement a graph data structure in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: How would you implement a graph data structure in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 3 for: Explain the concept of coroutines in Python.",
      "Sample answer 3 for: Explain the concept of hash tables and their implementation in Python."
    ]
  },
  {
    "question": "Explain the difference between class methods, static methods, and instance methods.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the difference between class methods, static methods, and instance methods.",
    "incorrect_answers": [
      "Sample answer 1 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 1 for: What are binary trees and how would you implement one in Python?"
    ]
  },
  {
    "question": "What are Python context managers and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: What are Python context managers and how do they work?",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python descriptors and how do they work?",
      "Sample answer 2 for: Explain the concept of duck typing in Python.",
      "Sample answer 1 for: Explain the concept of composition vs inheritance with examples."
    ]
  },
  {
    "question": "How would you find the longest common subsequence of two strings?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you find the longest common subsequence of two strings?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 1 for: What are Python generators and how do they differ from regular functions?"
    ]
  },
  {
    "question": "Explain how Python handles memory management.",
    "category": "python_basics",
    "correct_answer": "Python uses automatic memory management through reference counting and garbage collection. When objects are created, Python allocates memory from a private heap. It tracks references to objects, and when an object's reference count drops to zero, the memory is reclaimed. Python also has a cyclic garbage collector to detect and collect objects in reference cycles that would otherwise not be collected.",
    "incorrect_answers": [
      "Sample answer 3 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 1 for: Explain the concept of closures in Python with an example.",
      "Sample answer 1 for: Explain the concept of binary search and its time complexity."
    ]
  },
  {
    "question": "Explain the asyncio module in Python and how it works.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the asyncio module in Python and how it works.",
    "incorrect_answers": [
      "Sample answer 3 for: What is the difference between a stack and a queue?",
      "Sample answer 3 for: What are abstract classes and interfaces in Python?",
      "Sample answer 1 for: How does exception handling work in Python?"
    ]
  },
  {
    "question": "What are abstract classes and interfaces in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: What are abstract classes and interfaces in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python context managers and how do they work?",
      "Sample answer 3 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 3 for: How would you detect a cycle in a linked list?"
    ]
  },
  {
    "question": "Explain how Python handles memory management.",
    "category": "python_basics",
    "correct_answer": "Python uses automatic memory management with a private heap to store objects and data structures. It has a built-in garbage collector that reclaims memory from objects that are no longer referenced. Python uses reference counting as its primary memory management technique, along with cycle-detecting garbage collection to handle circular references.",
    "incorrect_answers": [
      "Sample answer 1 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 1 for: Explain the concept of backtracking with an example.",
      "Lists are mutable, meaning they can be modified after creation, while tuples are immutable. Lists use square brackets [] and tuples use parentheses (). Lists generally consume more memory than tuples and are slower for iteration."
    ]
  },
  {
    "question": "What are abstract classes and interfaces in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What are abstract classes and interfaces in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of duck typing in Python.",
      "Sample answer 1 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 3 for: What is the difference between a greedy algorithm and dynamic programming?"
    ]
  },
  {
    "question": "What is the difference between multiprocessing and multithreading in Python?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 1 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 3 for: What is method overriding and how does it work in Python?"
    ]
  },
  {
    "question": "Explain the quicksort algorithm and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: Explain the quicksort algorithm and its time complexity.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search.",
      "Sample answer 2 for: Explain the difference between class methods, static methods, and instance methods.",
      "Sample answer 3 for: Explain the concept of encapsulation in Python."
    ]
  },
  {
    "question": "Explain the concept of coroutines in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the concept of coroutines in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Python uses automatic memory management with a private heap to store objects and data structures. It has a built-in garbage collector that reclaims memory from objects that are no longer referenced. Python uses reference counting as its primary memory management technique, along with cycle-detecting garbage collection to handle circular references.",
      "Sample answer 2 for: Explain the concept of composition vs inheritance with examples."
    ]
  },
  {
    "question": "What are Python type hints and how do they improve code quality?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What are Python type hints and how do they improve code quality?",
    "incorrect_answers": [
      "Sample answer 1 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 3 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 2 for: How would you find the longest common subsequence of two strings?"
    ]
  },
  {
    "question": "What is method overriding and how does it work in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: What is method overriding and how does it work in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of closures in Python with an example.",
      "Sample answer 3 for: How does exception handling work in Python?",
      "Sample answer 1 for: What are Python context managers and how do they work?"
    ]
  },
  {
    "question": "What is polymorphism and how is it implemented in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: What is polymorphism and how is it implemented in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python's magic methods and how would you use them?",
      "Sample answer 3 for: Explain the concept of dynamic programming with an example.",
      "Sample answer 1 for: What are abstract classes and interfaces in Python?"
    ]
  },
  {
    "question": "Explain the concept of recursion with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: Explain the concept of recursion with an example.",
    "incorrect_answers": [
      "Sample answer 3 for: What is method overriding and how does it work in Python?",
      "Sample answer 3 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 3 for: How would you find the longest common subsequence of two strings?"
    ]
  },
  {
    "question": "Explain the difference between depth-first search and breadth-first search.",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: Explain the difference between depth-first search and breadth-first search.",
    "incorrect_answers": [
      "Sample answer 2 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 2 for: Explain the concept of duck typing in Python.",
      "Sample answer 2 for: Explain the concept of metaprogramming in Python."
    ]
  },
  {
    "question": "How would you detect a cycle in a linked list?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you detect a cycle in a linked list?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 1 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 1 for: What is the traveling salesman problem and how would you approach it?"
    ]
  },
  {
    "question": "Explain the concept of dynamic programming with an example.",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: Explain the concept of dynamic programming with an example.",
    "incorrect_answers": [
      "Sample answer 3 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 3 for: Explain the concept of closures in Python with an example.",
      "Sample answer 3 for: How would you detect a cycle in a linked list?"
    ]
  },
  {
    "question": "What is method overriding and how does it work in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: What is method overriding and how does it work in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 1 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 3 for: How would you implement a graph data structure in Python?"
    ]
  },
  {
    "question": "Explain the concept of backtracking with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: Explain the concept of backtracking with an example.",
    "incorrect_answers": [
      "Sample answer 2 for: How does exception handling work in Python?",
      "Sample answer 2 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 1 for: Explain the concept of multiple inheritance and the method resolution order in Python."
    ]
  },
  {
    "question": "Explain the quicksort algorithm and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: Explain the quicksort algorithm and its time complexity.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 2 for: What is the difference between a stack and a queue?",
      "Sample answer 2 for: What is the difference between a stack and a queue?"
    ]
  },
  {
    "question": "Explain the concept of monkey patching in Python and when it might be useful.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the concept of monkey patching in Python and when it might be useful.",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 3 for: How would you implement a graph data structure in Python?",
      "Python manages memory through automatic garbage collection. It uses reference counting to track how many references point to an object, and when the count reaches zero, the memory is freed. Python also has a cycle detector to handle circular references. All Python objects are stored in a private heap, and the memory manager allocates heap space for objects."
    ]
  },
  {
    "question": "What are the advantages and disadvantages of using arrays vs linked lists?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: What are the advantages and disadvantages of using arrays vs linked lists?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 2 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 1 for: What is the __init__ method in Python and how is it used?"
    ]
  },
  {
    "question": "What is the difference between a list and a tuple in Python?",
    "category": "python_basics",
    "correct_answer": "Lists are mutable, meaning they can be modified after creation, while tuples are immutable. Lists use square brackets [] and tuples use parentheses (). Lists generally consume more memory than tuples and are slower for iteration.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of coroutines in Python.",
      "Sample answer 1 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 3 for: How would you find the longest common subsequence of two strings?"
    ]
  },
  {
    "question": "What is method overriding and how does it work in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What is method overriding and how does it work in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python context managers and how do they work?",
      "Sample answer 1 for: What are Python descriptors and how do they work?",
      "Sample answer 1 for: Explain the concept of list comprehensions in Python."
    ]
  },
  {
    "question": "What are Python's data model and how does it relate to special methods?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: What are Python's data model and how does it relate to special methods?",
    "incorrect_answers": [
      "Sample answer 2 for: What is the difference between a stack and a queue?",
      "Sample answer 2 for: Explain the difference between '==' and 'is' operators in Python.",
      "Sample answer 3 for: What are Python type hints and how do they improve code quality?"
    ]
  },
  {
    "question": "What are binary trees and how would you implement one in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: What are binary trees and how would you implement one in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 2 for: Explain the difference between class methods, static methods, and instance methods.",
      "Sample answer 1 for: What are the advantages and disadvantages of using arrays vs linked lists?"
    ]
  },
  {
    "question": "What is method overriding and how does it work in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What is method overriding and how does it work in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 1 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 2 for: Explain the concept of inheritance in Python with an example."
    ]
  },
  {
    "question": "How would you find the kth largest element in an unsorted array?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: How would you find the kth largest element in an unsorted array?",
    "incorrect_answers": [
      "Sample answer 3 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 2 for: Explain the concept of duck typing in Python.",
      "Sample answer 3 for: Explain the concept of inheritance in Python with an example."
    ]
  },
  {
    "question": "What is a heap data structure and when would you use it?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: What is a heap data structure and when would you use it?",
    "incorrect_answers": [
      "Sample answer 2 for: What is method overriding and how does it work in Python?",
      "Sample answer 3 for: Explain the difference between '==' and 'is' operators in Python.",
      "Sample answer 3 for: Explain the concept of monkey patching in Python and when it might be useful."
    ]
  },
  {
    "question": "How would you implement a linked list in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: How would you implement a linked list in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of dynamic programming with an example.",
      "Sample answer 3 for: What are Python context managers and how do they work?",
      "Sample answer 3 for: What is the difference between a greedy algorithm and dynamic programming?"
    ]
  },
  {
    "question": "Explain the concept of recursion with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: Explain the concept of recursion with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: What is the difference between a stack and a queue?",
      "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 2 for: Explain the asyncio module in Python and how it works."
    ]
  },
  {
    "question": "Explain the concept of encapsulation in Python.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: Explain the concept of encapsulation in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: How would you detect a cycle in a linked list?",
      "Sample answer 1 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 2 for: What is the difference between a stack and a queue?"
    ]
  },
  {
    "question": "Explain the concept of closures in Python with an example.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the concept of closures in Python with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 1 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 3 for: What is method overriding and how does it work in Python?"
    ]
  },
  {
    "question": "What are metaclasses in Python and how would you use them?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: What are metaclasses in Python and how would you use them?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 3 for: How does exception handling work in Python?",
      "Sample answer 3 for: What are Python type hints and how do they improve code quality?"
    ]
  },
  {
    "question": "Explain the difference between class methods, static methods, and instance methods.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the difference between class methods, static methods, and instance methods.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 1 for: Explain the concept of inheritance in Python with an example."
    ]
  },
  {
    "question": "What is the traveling salesman problem and how would you approach it?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: What is the traveling salesman problem and how would you approach it?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of coroutines in Python.",
      "Sample answer 2 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 1 for: Explain the concept of backtracking with an example."
    ]
  },
  {
    "question": "What are Python's magic methods and how would you use them?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What are Python's magic methods and how would you use them?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 3 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 2 for: Explain the concept of binary search and its time complexity."
    ]
  },
  {
    "question": "Explain the concept of multiple inheritance and the method resolution order in Python.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: How does exception handling work in Python?",
      "Sample answer 3 for: What are Python decorators and how do they work?",
      "Sample answer 3 for: Explain the difference between depth-first search and breadth-first search."
    ]
  },
  {
    "question": "What are Python generators and how do they differ from regular functions?",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: What are Python generators and how do they differ from regular functions?",
    "incorrect_answers": [
      "Sample answer 1 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 2 for: What are abstract classes and interfaces in Python?",
      "Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful."
    ]
  },
  {
    "question": "Explain the concept of binary search and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: Explain the concept of binary search and its time complexity.",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python descriptors and how do they work?",
      "Sample answer 2 for: How would you detect a cycle in a linked list?",
      "Sample answer 2 for: How would you implement a linked list in Python?"
    ]
  },
  {
    "question": "Explain the concept of monkey patching in Python and when it might be useful.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful.",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python's magic methods and how would you use them?",
      "Sample answer 1 for: Explain the concept of duck typing in Python.",
      "Sample answer 3 for: How does exception handling work in Python?"
    ]
  },
  {
    "question": "Explain the concept of recursion with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: Explain the concept of recursion with an example.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of duck typing in Python.",
      "Sample answer 3 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 1 for: What is the difference between multiprocessing and multithreading in Python?"
    ]
  },
  {
    "question": "What are Python generators and how do they differ from regular functions?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: What are Python generators and how do they differ from regular functions?",
    "incorrect_answers": [
      "Lists are mutable, meaning they can be modified after creation, while tuples are immutable. Lists use square brackets [] and tuples use parentheses (). Lists generally consume more memory than tuples and are slower for iteration.",
      "Sample answer 3 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 3 for: Explain the concept of list comprehensions in Python."
    ]
  },
  {
    "question": "Explain the concept of hash tables and their implementation in Python.",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: Explain the concept of hash tables and their implementation in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: How would you implement a graph data structure in Python?",
      "Sample answer 2 for: Explain the difference between '==' and 'is' operators in Python.",
      "Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful."
    ]
  },
  {
    "question": "Explain the concept of list comprehensions in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: Explain the concept of list comprehensions in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of dynamic programming with an example.",
      "Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 1 for: What are Python's data model and how does it relate to special methods?"
    ]
  },
  {
    "question": "Explain the difference between '==' and 'is' operators in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: Explain the difference between '==' and 'is' operators in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 1 for: Explain the concept of coroutines in Python.",
      "Sample answer 3 for: Explain the concept of hash tables and their implementation in Python."
    ]
  },
  {
    "question": "Explain the concept of encapsulation in Python.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the concept of encapsulation in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 3 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 2 for: What are Python context managers and how do they work?"
    ]
  },
  {
    "question": "What is the traveling salesman problem and how would you approach it?",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: What is the traveling salesman problem and how would you approach it?",
    "incorrect_answers": [
      "Sample answer 2 for: How does exception handling work in Python?",
      "Sample answer 2 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 1 for: Explain the asyncio module in Python and how it works."
    ]
  },
  {
    "question": "Explain the concept of encapsulation in Python.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: Explain the concept of encapsulation in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 1 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 3 for: Explain the concept of duck typing in Python."
    ]
  },
  {
    "question": "What is the Global Interpreter Lock (GIL) in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: What is the Global Interpreter Lock (GIL) in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 3 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 3 for: What is the __init__ method in Python and how is it used?"
    ]
  },
  {
    "question": "What are the advantages and disadvantages of using arrays vs linked lists?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: What are the advantages and disadvantages of using arrays vs linked lists?",
    "incorrect_answers": [
      "Sample answer 1 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 1 for: What are Python descriptors and how do they work?",
      "Sample answer 3 for: Explain the asyncio module in Python and how it works."
    ]
  },
  {
    "question": "How would you implement a breadth-first search algorithm?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: How would you implement a breadth-first search algorithm?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 2 for: What are Python descriptors and how do they work?",
      "Sample answer 2 for: What are Python descriptors and how do they work?"
    ]
  },
  {
    "question": "What are Python's data model and how does it relate to special methods?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: What are Python's data model and how does it relate to special methods?",
    "incorrect_answers": [
      "Sample answer 2 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 1 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 3 for: What are Python context managers and how do they work?"
    ]
  },
  {
    "question": "What are Python type hints and how do they improve code quality?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: What are Python type hints and how do they improve code quality?",
    "incorrect_answers": [
      "Sample answer 1 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 2 for: What are abstract classes and interfaces in Python?",
      "Sample answer 2 for: Explain the difference between depth-first search and breadth-first search."
    ]
  },
  {
    "question": "Explain the asyncio module in Python and how it works.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: Explain the asyncio module in Python and how it works.",
    "incorrect_answers": [
      "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 3 for: Explain the concept of backtracking with an example.",
      "Sample answer 2 for: Explain the difference between depth-first search and breadth-first search."
    ]
  },
  {
    "question": "Explain the concept of closures in Python with an example.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the concept of closures in Python with an example.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 3 for: Explain the difference between '==' and 'is' operators in Python.",
      "Sample answer 2 for: Explain the quicksort algorithm and its time complexity."
    ]
  },
  {
    "question": "Explain the concept of composition vs inheritance with examples.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the concept of composition vs inheritance with examples.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of duck typing in Python.",
      "Sample answer 2 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 2 for: What are metaclasses in Python and how would you use them?"
    ]
  },
  {
    "question": "Explain the concept of hash tables and their implementation in Python.",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: Explain the concept of hash tables and their implementation in Python.",
    "incorrect_answers": [
      "Lists are mutable, meaning they can be modified after creation, while tuples are immutable. Lists use square brackets [] and tuples use parentheses (). Lists generally consume more memory than tuples and are slower for iteration.",
      "Sample answer 2 for: Explain the concept of coroutines in Python.",
      "Sample answer 3 for: How does exception handling work in Python?"
    ]
  },
  {
    "question": "What are abstract classes and interfaces in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: What are abstract classes and interfaces in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 3 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 3 for: How does exception handling work in Python?"
    ]
  },
  {
    "question": "What is the difference between a list and a tuple in Python?",
    "category": "python_basics",
    "correct_answer": "Lists are mutable collections that can be modified after creation, while tuples are immutable. Lists are defined using square brackets [], while tuples use parentheses (). Tuples are more memory-efficient and can be used as dictionary keys (since they're immutable), which lists cannot.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of encapsulation in Python.",
      "Sample answer 3 for: What are Python context managers and how do they work?",
      "Sample answer 2 for: Explain the concept of duck typing in Python."
    ]
  },
  {
    "question": "Explain the concept of binary search and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: Explain the concept of binary search and its time complexity.",
    "incorrect_answers": [
      "Sample answer 3 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 1 for: What are Python's magic methods and how would you use them?",
      "Sample answer 1 for: How does exception handling work in Python?"
    ]
  },
  {
    "question": "Explain the concept of backtracking with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: Explain the concept of backtracking with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 2 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python."
    ]
  },
  {
    "question": "Explain the concept of inheritance in Python with an example.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the concept of inheritance in Python with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: How does exception handling work in Python?",
      "Sample answer 3 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 1 for: Explain the difference between class methods, static methods, and instance methods."
    ]
  },
  {
    "question": "Explain the difference between class methods, static methods, and instance methods.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the difference between class methods, static methods, and instance methods.",
    "incorrect_answers": [
      "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 3 for: How would you implement a graph data structure in Python?",
      "Sample answer 1 for: What is the traveling salesman problem and how would you approach it?"
    ]
  },
  {
    "question": "Explain the concept of recursion with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: Explain the concept of recursion with an example.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search.",
      "Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?"
    ]
  },
  {
    "question": "Explain the concept of monkey patching in Python and when it might be useful.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful.",
    "incorrect_answers": [
      "Sample answer 1 for: How would you implement a linked list in Python?",
      "Sample answer 2 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 2 for: Explain the concept of list comprehensions in Python."
    ]
  },
  {
    "question": "Explain the concept of inheritance in Python with an example.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: Explain the concept of inheritance in Python with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Lists are mutable, meaning they can be modified after creation, while tuples are immutable. Lists use square brackets [] and tuples use parentheses (). Lists generally consume more memory than tuples and are slower for iteration.",
      "Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?"
    ]
  },
  {
    "question": "What are Python decorators and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: What are Python decorators and how do they work?",
    "incorrect_answers": [
      "Sample answer 3 for: How would you detect a cycle in a linked list?",
      "Sample answer 1 for: What is a heap data structure and when would you use it?",
      "Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?"
    ]
  },
  {
    "question": "How would you find the longest common subsequence of two strings?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: How would you find the longest common subsequence of two strings?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 2 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 3 for: What are binary trees and how would you implement one in Python?"
    ]
  },
  {
    "question": "What are Python context managers and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: What are Python context managers and how do they work?",
    "incorrect_answers": [
      "Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 3 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 2 for: What are binary trees and how would you implement one in Python?"
    ]
  },
  {
    "question": "Explain the concept of closures in Python with an example.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: Explain the concept of closures in Python with an example.",
    "incorrect_answers": [
      "Sample answer 3 for: How would you detect a cycle in a linked list?",
      "Sample answer 3 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 1 for: Explain the concept of duck typing in Python."
    ]
  },
  {
    "question": "What is a heap data structure and when would you use it?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: What is a heap data structure and when would you use it?",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 3 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 2 for: Explain the concept of binary search and its time complexity."
    ]
  },
  {
    "question": "What are Python's data model and how does it relate to special methods?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What are Python's data model and how does it relate to special methods?",
    "incorrect_answers": [
      "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 2 for: Explain the concept of hash tables and their implementation in Python.",
      "Sample answer 3 for: Explain the concept of duck typing in Python."
    ]
  },
  {
    "question": "How does exception handling work in Python?",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: How does exception handling work in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: How would you detect a cycle in a linked list?",
      "Sample answer 3 for: What are metaclasses in Python and how would you use them?",
      "Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?"
    ]
  },
  {
    "question": "What is the difference between a stack and a queue?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: What is the difference between a stack and a queue?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search.",
      "Sample answer 1 for: Explain the concept of closures in Python with an example.",
      "Sample answer 3 for: What is the difference between a greedy algorithm and dynamic programming?"
    ]
  },
  {
    "question": "What is the __init__ method in Python and how is it used?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What is the __init__ method in Python and how is it used?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 3 for: Explain the concept of backtracking with an example.",
      "Sample answer 2 for: What is polymorphism and how is it implemented in Python?"
    ]
  },
  {
    "question": "What is the difference between multiprocessing and multithreading in Python?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 1 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 2 for: Explain the concept of backtracking with an example."
    ]
  },
  {
    "question": "What are Python's magic methods and how would you use them?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What are Python's magic methods and how would you use them?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 3 for: How would you implement a graph data structure in Python?",
      "Sample answer 1 for: What are Python descriptors and how do they work?"
    ]
  },
  {
    "question": "Explain the concept of duck typing in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: Explain the concept of duck typing in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 2 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 1 for: What are binary trees and how would you implement one in Python?"
    ]
  },
  {
    "question": "Explain the concept of list comprehensions in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: Explain the concept of list comprehensions in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of coroutines in Python.",
      "Sample answer 2 for: Explain the difference between class methods, static methods, and instance methods.",
      "Sample answer 1 for: What are Python generators and how do they differ from regular functions?"
    ]
  },
  {
    "question": "Explain the quicksort algorithm and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: Explain the quicksort algorithm and its time complexity.",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python context managers and how do they work?",
      "Sample answer 1 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 1 for: Explain the difference between '==' and 'is' operators in Python."
    ]
  },
  {
    "question": "Explain the concept of dynamic programming with an example.",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: Explain the concept of dynamic programming with an example.",
    "incorrect_answers": [
      "Sample answer 2 for: What is method overriding and how does it work in Python?",
      "Sample answer 3 for: What are Python's data model and how does it relate to special methods?",
      "Sample answer 1 for: What is the traveling salesman problem and how would you approach it?"
    ]
  },
  {
    "question": "What is the difference between multiprocessing and multithreading in Python?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: How would you implement a graph data structure in Python?",
      "Sample answer 2 for: How would you implement a linked list in Python?",
      "Sample answer 3 for: What are Python's data model and how does it relate to special methods?"
    ]
  },
  {
    "question": "Explain the concept of multiple inheritance and the method resolution order in Python.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 1 for: What is the difference between multiprocessing and multithreading in Python?",
      "Sample answer 1 for: What are Python context managers and how do they work?"
    ]
  },
  {
    "question": "Explain the time complexity of common operations in Python dictionaries.",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: Explain the time complexity of common operations in Python dictionaries.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of coroutines in Python.",
      "Lists are mutable collections that can be modified after creation, while tuples are immutable. Lists are defined using square brackets [], while tuples use parentheses (). Tuples are more memory-efficient and can be used as dictionary keys (since they're immutable), which lists cannot.",
      "Sample answer 1 for: Explain the difference between class methods, static methods, and instance methods."
    ]
  },
  {
    "question": "How would you detect a cycle in a linked list?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: How would you detect a cycle in a linked list?",
    "incorrect_answers": [
      "Sample answer 2 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 1 for: How would you implement a graph data structure in Python?",
      "Sample answer 2 for: Explain the difference between '==' and 'is' operators in Python."
    ]
  },
  {
    "question": "What are Python decorators and how do they work?",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: What are Python decorators and how do they work?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search.",
      "Python manages memory through automatic garbage collection. It uses reference counting to track how many references point to an object, and when the count reaches zero, the memory is freed. Python also has a cycle detector to handle circular references. All Python objects are stored in a private heap, and the memory manager allocates heap space for objects.",
      "Sample answer 1 for: Explain the difference between depth-first search and breadth-first search."
    ]
  },
  {
    "question": "What are Python's magic methods and how would you use them?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What are Python's magic methods and how would you use them?",
    "incorrect_answers": [
      "Sample answer 1 for: How would you detect a cycle in a linked list?",
      "Sample answer 2 for: Explain the difference between '==' and 'is' operators in Python.",
      "Sample answer 3 for: Explain the concept of hash tables and their implementation in Python."
    ]
  },
  {
    "question": "Explain the concept of duck typing in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 1 for: Explain the concept of duck typing in Python.",
    "incorrect_answers": [
      "Lists are mutable, meaning they can be modified after creation, while tuples are immutable. Lists use square brackets [] and tuples use parentheses (). Lists generally consume more memory than tuples and are slower for iteration.",
      "Sample answer 3 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 3 for: How would you detect a cycle in a linked list?"
    ]
  },
  {
    "question": "Explain the difference between depth-first search and breadth-first search.",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: Explain the difference between depth-first search and breadth-first search.",
    "incorrect_answers": [
      "Sample answer 2 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 2 for: Explain the concept of backtracking with an example.",
      "Sample answer 3 for: What are Python context managers and how do they work?"
    ]
  },
  {
    "question": "What is polymorphism and how is it implemented in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: What is polymorphism and how is it implemented in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of encapsulation in Python.",
      "Sample answer 3 for: Explain the asyncio module in Python and how it works.",
      "Sample answer 1 for: Explain the quicksort algorithm and its time complexity."
    ]
  },
  {
    "question": "How would you find the kth largest element in an unsorted array?",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: How would you find the kth largest element in an unsorted array?",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python descriptors and how do they work?",
      "Sample answer 2 for: What are the advantages and disadvantages of using arrays vs linked lists?",
      "Sample answer 2 for: How would you detect a cycle in a linked list?"
    ]
  },
  {
    "question": "How would you detect a cycle in a linked list?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you detect a cycle in a linked list?",
    "incorrect_answers": [
      "Sample answer 1 for: What is the traveling salesman problem and how would you approach it?",
      "Sample answer 3 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?"
    ]
  },
  {
    "question": "What are Python's magic methods and how would you use them?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What are Python's magic methods and how would you use them?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 3 for: Explain the concept of dynamic programming with an example.",
      "Sample answer 3 for: How would you implement a linked list in Python?"
    ]
  },
  {
    "question": "What is the difference between a list and a tuple in Python?",
    "category": "python_basics",
    "correct_answer": "Lists are mutable collections that can be modified after creation, while tuples are immutable. Lists are defined using square brackets [], while tuples use parentheses (). Tuples are more memory-efficient and can be used as dictionary keys (since they're immutable), which lists cannot.",
    "incorrect_answers": [
      "Sample answer 3 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 3 for: What is polymorphism and how is it implemented in Python?",
      "Sample answer 2 for: What are metaclasses in Python and how would you use them?"
    ]
  },
  {
    "question": "What is the difference between multiprocessing and multithreading in Python?",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: What is the difference between multiprocessing and multithreading in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
      "Sample answer 3 for: Explain the concept of recursion with an example.",
      "Sample answer 3 for: How would you implement a graph data structure in Python?"
    ]
  },
  {
    "question": "How would you implement a linked list in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 2 for: How would you implement a linked list in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python context managers and how do they work?",
      "Sample answer 3 for: What are Python decorators and how do they work?",
      "Sample answer 1 for: What are Python type hints and how do they improve code quality?"
    ]
  },
  {
    "question": "Explain the concept of dynamic programming with an example.",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: Explain the concept of dynamic programming with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: How does exception handling work in Python?",
      "Sample answer 2 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 2 for: What is a heap data structure and when would you use it?"
    ]
  },
  {
    "question": "Explain the concept of list comprehensions in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 3 for: Explain the concept of list comprehensions in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 3 for: What is the __init__ method in Python and how is it used?",
      "Sample answer 2 for: How does exception handling work in Python?"
    ]
  },
  {
    "question": "What is the __init__ method in Python and how is it used?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What is the __init__ method in Python and how is it used?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of encapsulation in Python.",
      "Sample answer 2 for: Explain the concept of coroutines in Python.",
      "Sample answer 3 for: Explain the concept of duck typing in Python."
    ]
  },
  {
    "question": "Explain the concept of duck typing in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: Explain the concept of duck typing in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 1 for: What are Python context managers and how do they work?",
      "Sample answer 2 for: Explain the difference between class methods, static methods, and instance methods."
    ]
  },
  {
    "question": "Explain the concept of list comprehensions in Python.",
    "category": "python_basics",
    "correct_answer": "Sample answer 2 for: Explain the concept of list comprehensions in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: What are abstract classes and interfaces in Python?",
      "Sample answer 2 for: Explain the concept of monkey patching in Python and when it might be useful.",
      "Sample answer 3 for: Explain the concept of encapsulation in Python."
    ]
  },
  {
    "question": "Explain the concept of multiple inheritance and the method resolution order in Python.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: Explain the concept of multiple inheritance and the method resolution order in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: How would you implement a linked list in Python?",
      "Sample answer 1 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 2 for: How would you implement a graph data structure in Python?"
    ]
  },
  {
    "question": "Explain the concept of composition vs inheritance with examples.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: Explain the concept of composition vs inheritance with examples.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of backtracking with an example.",
      "Sample answer 1 for: Explain the concept of backtracking with an example.",
      "Sample answer 1 for: Explain the concept of duck typing in Python."
    ]
  },
  {
    "question": "How would you find the longest common subsequence of two strings?",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: How would you find the longest common subsequence of two strings?",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python descriptors and how do they work?",
      "Sample answer 3 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 3 for: Explain the concept of duck typing in Python."
    ]
  },
  {
    "question": "Explain the asyncio module in Python and how it works.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the asyncio module in Python and how it works.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 1 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 2 for: How would you implement a graph data structure in Python?"
    ]
  },
  {
    "question": "Explain the concept of coroutines in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 1 for: Explain the concept of coroutines in Python.",
    "incorrect_answers": [
      "Sample answer 2 for: What is a heap data structure and when would you use it?",
      "Sample answer 2 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 2 for: How would you detect a cycle in a linked list?"
    ]
  },
  {
    "question": "Explain the asyncio module in Python and how it works.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the asyncio module in Python and how it works.",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 1 for: Explain the concept of metaprogramming in Python.",
      "Sample answer 1 for: Explain the concept of multiple inheritance and the method resolution order in Python."
    ]
  },
  {
    "question": "Explain the quicksort algorithm and its time complexity.",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: Explain the quicksort algorithm and its time complexity.",
    "incorrect_answers": [
      "Sample answer 3 for: What is a heap data structure and when would you use it?",
      "Sample answer 3 for: Explain the concept of encapsulation in Python.",
      "Sample answer 2 for: What is method overriding and how does it work in Python?"
    ]
  },
  {
    "question": "What is the difference between a greedy algorithm and dynamic programming?",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: What is the difference between a greedy algorithm and dynamic programming?",
    "incorrect_answers": [
      "Sample answer 3 for: How would you implement a breadth-first search algorithm?",
      "Sample answer 1 for: What are Python type hints and how do they improve code quality?",
      "Sample answer 2 for: Explain the concept of binary search and its time complexity."
    ]
  },
  {
    "question": "Explain the concept of composition vs inheritance with examples.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: Explain the concept of composition vs inheritance with examples.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of binary search and its time complexity.",
      "Sample answer 1 for: What is a heap data structure and when would you use it?",
      "Sample answer 2 for: What is the difference between multiprocessing and multithreading in Python?"
    ]
  },
  {
    "question": "How would you detect a cycle in a linked list?",
    "category": "algorithms",
    "correct_answer": "Sample answer 3 for: How would you detect a cycle in a linked list?",
    "incorrect_answers": [
      "Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 2 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 2 for: What are abstract classes and interfaces in Python?"
    ]
  },
  {
    "question": "Explain the concept of metaprogramming in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 3 for: Explain the concept of metaprogramming in Python.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 2 for: What are abstract classes and interfaces in Python?",
      "Python uses automatic memory management with a private heap to store objects and data structures. It has a built-in garbage collector that reclaims memory from objects that are no longer referenced. Python uses reference counting as its primary memory management technique, along with cycle-detecting garbage collection to handle circular references."
    ]
  },
  {
    "question": "What is the traveling salesman problem and how would you approach it?",
    "category": "algorithms",
    "correct_answer": "Sample answer 1 for: What is the traveling salesman problem and how would you approach it?",
    "incorrect_answers": [
      "Sample answer 3 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?",
      "Sample answer 3 for: How does exception handling work in Python?"
    ]
  },
  {
    "question": "Explain the difference between class methods, static methods, and instance methods.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: Explain the difference between class methods, static methods, and instance methods.",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of dynamic programming with an example.",
      "Sample answer 2 for: What are Python descriptors and how do they work?",
      "Sample answer 2 for: What are the advantages and disadvantages of using arrays vs linked lists?"
    ]
  },
  {
    "question": "Explain the concept of recursion with an example.",
    "category": "algorithms",
    "correct_answer": "Sample answer 2 for: Explain the concept of recursion with an example.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of duck typing in Python.",
      "Sample answer 3 for: Explain the concept of coroutines in Python.",
      "Sample answer 1 for: How would you detect a cycle in a linked list?"
    ]
  },
  {
    "question": "What are metaclasses in Python and how would you use them?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 1 for: What are metaclasses in Python and how would you use them?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of recursion with an example.",
      "Sample answer 3 for: What is the difference between a stack and a queue?",
      "Sample answer 3 for: How would you detect a cycle in a linked list?"
    ]
  },
  {
    "question": "What are binary trees and how would you implement one in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: What are binary trees and how would you implement one in Python?",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 3 for: Explain the concept of inheritance in Python with an example.",
      "Sample answer 3 for: What are Python type hints and how do they improve code quality?"
    ]
  },
  {
    "question": "Explain the concept of inheritance in Python with an example.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: Explain the concept of inheritance in Python with an example.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the asyncio module in Python and how it works.",
      "Sample answer 1 for: What are Python descriptors and how do they work?",
      "Sample answer 1 for: What are Python context managers and how do they work?"
    ]
  },
  {
    "question": "How would you implement a graph data structure in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: How would you implement a graph data structure in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: What is the __init__ method in Python and how is it used?",
      "Lists are mutable collections that can be modified after creation, while tuples are immutable. Lists are defined using square brackets [], while tuples use parentheses (). Tuples are more memory-efficient and can be used as dictionary keys (since they're immutable), which lists cannot.",
      "Sample answer 3 for: Explain the concept of duck typing in Python."
    ]
  },
  {
    "question": "Explain the concept of coroutines in Python.",
    "category": "advanced_python",
    "correct_answer": "Sample answer 2 for: Explain the concept of coroutines in Python.",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python's magic methods and how would you use them?",
      "Sample answer 2 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 2 for: What are the advantages and disadvantages of using arrays vs linked lists?"
    ]
  },
  {
    "question": "Explain the difference between class methods, static methods, and instance methods.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 3 for: Explain the difference between class methods, static methods, and instance methods.",
    "incorrect_answers": [
      "Sample answer 1 for: What are Python context managers and how do they work?",
      "Sample answer 3 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 1 for: What is polymorphism and how is it implemented in Python?"
    ]
  },
  {
    "question": "How would you implement a graph data structure in Python?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: How would you implement a graph data structure in Python?",
    "incorrect_answers": [
      "Sample answer 3 for: What are Python generators and how do they differ from regular functions?",
      "Sample answer 3 for: Explain the difference between '==' and 'is' operators in Python.",
      "Sample answer 3 for: Explain the concept of metaprogramming in Python."
    ]
  },
  {
    "question": "Explain the difference between class methods, static methods, and instance methods.",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: Explain the difference between class methods, static methods, and instance methods.",
    "incorrect_answers": [
      "Sample answer 1 for: Explain the concept of backtracking with an example.",
      "Sample answer 1 for: How would you implement a linked list in Python?",
      "Sample answer 3 for: What is the Global Interpreter Lock (GIL) in Python?"
    ]
  },
  {
    "question": "What are the advantages and disadvantages of using arrays vs linked lists?",
    "category": "data_structures",
    "correct_answer": "Sample answer 3 for: What are the advantages and disadvantages of using arrays vs linked lists?",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of duck typing in Python.",
      "Sample answer 2 for: Explain the concept of closures in Python with an example.",
      "Sample answer 3 for: What are Python context managers and how do they work?"
    ]
  },
  {
    "question": "What is polymorphism and how is it implemented in Python?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: What is polymorphism and how is it implemented in Python?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the concept of composition vs inheritance with examples.",
      "Sample answer 1 for: How would you find the longest common subsequence of two strings?",
      "Sample answer 1 for: Explain the asyncio module in Python and how it works."
    ]
  },
  {
    "question": "Explain how Python handles memory management.",
    "category": "python_basics",
    "correct_answer": "Python uses automatic memory management with a private heap to store objects and data structures. It has a built-in garbage collector that reclaims memory from objects that are no longer referenced. Python uses reference counting as its primary memory management technique, along with cycle-detecting garbage collection to handle circular references.",
    "incorrect_answers": [
      "Sample answer 3 for: Explain the concept of list comprehensions in Python.",
      "Sample answer 1 for: Explain the concept of duck typing in Python.",
      "Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful."
    ]
  },
  {
    "question": "What is a heap data structure and when would you use it?",
    "category": "data_structures",
    "correct_answer": "Sample answer 1 for: What is a heap data structure and when would you use it?",
    "incorrect_answers": [
      "Sample answer 2 for: Explain the time complexity of common operations in Python dictionaries.",
      "Sample answer 1 for: Explain the quicksort algorithm and its time complexity.",
      "Sample answer 1 for: Explain the concept of monkey patching in Python and when it might be useful."
    ]
  },
  {
    "question": "What is the __init__ method in Python and how is it used?",
    "category": "oop_concepts",
    "correct_answer": "Sample answer 2 for: What is the __init__ method in Python and how is it used?",
    "incorrect_answers": [
      "Sample answer 1 for: What are binary trees and how would you implement one in Python?",
      "Sample answer 3 for: What is the difference between a stack and a queue?",
      "Sample answer 1 for: How would you find the kth largest element in an unsorted array?"
    ]
  },
  {
    "question": "What is the difference between a list and a tuple in Python?",
    "category": "python_basics",
    "correct_answer": "Lists are mutable collections that can be modified after creation, while tuples are immutable. Lists are defined using square brackets [], while tuples use parentheses (). Tuples are more memory-efficient and can be used as dictionary keys (since they're immutable), which lists cannot.",
    "incorrect_answers": [
      "Sample answer 1 for: How would you find the kth largest element in an unsorted array?",
      "Sample answer 2 for: What is the difference between a greedy algorithm and dynamic programming?",
      "Sample answer 2 for: Explain the difference between depth-first search and breadth-first search."
    ]
  }
]